DESCRIPTION

TMF: Synchronize traces on their host ID instead of trace name

This allow to synchronize traces with identical names, and will have the
side-effect that different traces from the same host will be automatically
synchronized with the same formula.

Change-Id: Ifbf8da91d581e1cee3c699bd976b1437e661830b
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2014-04-22 02:59:01.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/6543/

-------------------------------------
author: Brenden Conley
date: 2014-04-22 03:40:53.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/6543/ : SUCCESS

-------------------------------------
author: Annalise Jimenez
date: 2014-04-22 18:29:53.000000000

Patch Set 2: Code-Review+1

+1 on Marc-Andre's rebase and changes

-------------------------------------
author: Kaeden Tapia
date: 2014-04-29 00:26:53.000000000

Patch Set 2:

I'll take a look.

-------------------------------------
author: Kaeden Tapia
date: 2014-04-30 22:14:16.000000000

Patch Set 2: Code-Review-1

(1 comment)

Line:163, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/SynchronizeTracesHandler.java -> can you use traceel.getTrace instead? I'm just worried that the assumption that the traces will be in the same order under the experiment element and in the TmfExperiment might not always be true.

-------------------------------------
author: Annalise Jimenez
date: 2014-05-01 00:57:24.000000000

Patch Set 2: -Code-Review

(1 comment)

Line:163, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/SynchronizeTracesHandler.java -> No I can't because getTrace() will open the trace if it is not opened, but as this is done in another thread, it is not available right away so this method will return null and this is what I absolutely don't want to get...

I could add a delay if it is null and call the getTrace() method again after a delay (like in the unit tests, you know the thing that sometimes says "The trace didn't open in a reasonable time"). But this is run in the UI thread. 

Or I can make sure that the trace is opened before calling this (assuming the user wants it opened), but that will trigger the opened signal, which will trigger the analysis, which will run just before some of the traces will be renamed, so those analysis will have to be re-run again after with the new timestamps, waste of CPU time/memory. 

Or I could get the corresponding trace with a for loop instead of the index in the experiment. That will make sure that if the order is wrong, at least the right trace will be taken. That's probably the cleanest, easiest solution for now.

The ideal solution would be not to have to copy the trace at all in the first place, but that involves quite a lot of refactoring that I don't plan to do before luna, but after... :D

-------------------------------------
author: Kaeden Tapia
date: 2014-05-01 17:58:56.000000000

Patch Set 2:

(1 comment)

Line:163, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/SynchronizeTracesHandler.java -> "Or I could get the corresponding trace with a for loop instead of the index in the experiment. That will make sure that if the order is wrong, at least the right trace will be taken. That's probably the cleanest, easiest solution for now."

sounds good

-------------------------------------
