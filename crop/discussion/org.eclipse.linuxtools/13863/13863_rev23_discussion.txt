DESCRIPTION

lttng rcp: add tracing rcp "file->open" buttons

there are two buttons added:
* File-> Open Trace File...
* File-> Open Trace Directory...

The traces will be opened into the default directory and
automatically select the trace type. If the trace viewer is
ambiguous, it will pop-up a window to help.

The trace is then opened.

The reason that we have open file and open directory is since
some traces are directories.

Change-Id: I28df30745bf47b64ce0ab0f15a8d425fef4dd91a
Signed-off-by: Ivy Mitchell xxx@xxx.xxx


COMMENTS

author: Ricky Reeves
date: 2013-08-05 13:26:11.000000000

Uploaded patch set 23.

-------------------------------------
author: Brenden Conley
date: 2013-08-05 13:26:16.000000000

Patch Set 23:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/3100/

-------------------------------------
author: Ricky Reeves
date: 2013-08-05 13:30:20.000000000

Patch Set 23:

Patch 23 fixes problem with opening trace files for custom parsers

-------------------------------------
author: Brenden Conley
date: 2013-08-05 13:49:15.000000000

Patch Set 23: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/3100/ : SUCCESS

-------------------------------------
author: Ricky Reeves
date: 2013-08-05 15:50:16.000000000

Patch Set 23: Code-Review-1

(10 comments)

Sorry for -1 again, but I think the OpenTraceHelper needs to cleaned-up. In there, code code is copied from the OpenTraceHandler. Since you introduced a helper class in this commit to open a trace then this class should provide helper methods that can be re-used for all open procedures. 

Also, it executes multiple tasks at once: 1) detect trace type 2) import trace as link to given project 3) open the trace. So, these steps could be re-used by other components e.g. open from control. So, these steps should be available as API. For the detection of the trace type it should be in TmfTraceType.The import should be part of a import utility.

Line:59, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> Update the java doc. It also handles trace directories. Add a short description of what it does.

Line:71, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> Update java doc. Add a description what it actually does:
- Import to project with link
- Trace type detection
- Trace validation
- Rename trace in case of name collisions
- Open trace

Line:76, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> file is not a correct name since it could be directory too. Maybe traceName or tracePath is better.

Line:89, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> Magic number 2. This couple of lines are done all over different files and should be part of a utility method of TraceTypeHelper?

Line:95, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> Add some comments about each step. Not easy to follow the code.

Line:118, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> Up to here the should be in TmfTraceType in a utility method so that it can be reused. It should return a list of candidates. If the list is empty -> create a message box, if list.size() > 1 then open a selection box. If list.size() is one the use the only candiate.

By having it in a utility method the procedure can be re-used.

Line:141, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> reduce what? Please, add some comments.

Line:146, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> Readability: cattt is not a good name. Again the magic split into 2

Line:324, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> This synchronized method doesn't have an affect because any other access to fCandidate is not protected by a synchronized block. Also fCandidate is not used anywhere else. Have the candidate variable local to this method and return it. Use a final String[] localCandidate = new String[1]. Then you can update it in the listener localCandidate[0] = source.getText() and return it localCabdiate[0].

Line:332, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/OpenTraceHelper.java -> Use constant TRACES_DIRECTORY

-------------------------------------
