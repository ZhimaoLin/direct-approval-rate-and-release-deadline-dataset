DESCRIPTION

tmf: Store the ID in the state system itself

Many components already refer to state systems with an ID, might
as well store it in the state system object itself for better
encapsulation.

Beyond the SSID pun, I like having it *not* be getId(), because that
quickly becomes confusing with IAnalysisModule.getId() (even though
those two values are usually the same).

Change-Id: I51babc177f54b4f8af66544e6c75be53da56b6c4
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2014-02-05 00:21:46.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5328/

-------------------------------------
author: Brenden Conley
date: 2014-02-05 01:17:42.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5328/ : SUCCESS

-------------------------------------
author: Annalise Jimenez
date: 2014-02-05 19:50:38.000000000

Patch Set 1:

(2 comments)

clarification needed here

Line:142, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> put this in static field? Though an id of null shouldn't happen quite often

Line:213, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> Any reason you did this? I guess you want to be able to change the fHtBackend without impacting the state system build. But don't you loose the reference to the old backend if it was already assigned? It won't be disposed of when the module is disposed of.

-------------------------------------
author: Braxton Mccarthy
date: 2014-02-05 20:17:46.000000000

Patch Set 1: Code-Review-1

(3 comments)

Line:142, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> It's quite easy for the ID to be null actually. If you "do your own" analysis - not from an extension point - there is nothing forcing you to set the ID. It's not a forced constructor parameter or anything like that. So it can easily remain null. I had that problem when first implementing the sub-analyses of the statistics module.

If name/ID were final, life would be soo much easier ;)  That would require splitting away a "config element" class, defined in the extension, to instantiate the IAnalysisModule separately though.

Ok for the static field, it's cleaner.

Line:213, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> It was to keep the null analysis happy. At first I was doing getId() in the parameter, and got a warning saying that fHtBackend could be null (it is a mutable nullable field after all). So if the thread go pre-empted during the call, the backend could be set to something else.

Although right now it wouldn't complain, because there is no call in between. But try adding a random statemenet (system.out etc.) between the two lines, and you'll get the error. In any case I think it's safer to extract it to a local variable.

Line:233, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> fStateSystem should probably be replaced by a local variable here too, and below.  But like it is now, the compiler doesn't complain.

-------------------------------------
author: Annalise Jimenez
date: 2014-02-05 20:31:34.000000000

Patch Set 1:

(1 comment)

Line:142, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> > That would require splitting away a "config element" class, defined in the extension, to instantiate the IAnalysisModule separately though.

Well, if you find a clean way to do this, then by all means go ahead, I'll gladly +1 this patch! All I can come up with is getting the constructor with a String parameter, calling it with reflexion, etc. Beurk

-------------------------------------
