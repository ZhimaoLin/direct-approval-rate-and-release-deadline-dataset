DESCRIPTION

[RFC] tmf: Add an accumulator of pending requests

Change-Id: I513e667a8e7842b9a4ea9c57b248b07d6f3942fa
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-12-04 22:57:18.000000000

Patch Set 1:

This branch is a quick prototype of automatic request coalescing using a timer. I'm not 100% sure it actually works, traces seem to get coalesced, but when running the actual program it seems there is still a small delay between the histogram and Control Flow View being ready, for example.

I'm pushing it here in case somebody spots something obvious that I missed.

There's also a bunch of indexer unit test failures which I haven't looked into yet.

-------------------------------------
author: Brenden Conley
date: 2013-12-05 02:23:43.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/4420/

-------------------------------------
author: Brenden Conley
date: 2013-12-05 02:38:06.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/4420/ : FAILURE

-------------------------------------
author: Ivy Mitchell
date: 2013-12-05 02:54:17.000000000

Patch Set 1: Code-Review-1

(2 comments)

-1 means comments

Line:190, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/component/TmfEventProvider.java -> How do we know they are done at the same time?

Line:19, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/component/TmfRequestAccumulator.java -> I can see two timers in near proximity waiting for each other then sending off their own schedulers if the are arriving in an odd order. please explain why this would not happen

-------------------------------------
author: Ricky Reeves
date: 2013-12-05 17:59:45.000000000

Patch Set 1:

(1 comment)

Line:187, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/component/TmfEventProvider.java -> Note that many requests at startup are from start time till big crunch. So this check won't be sufficient

-------------------------------------
author: Annalise Jimenez
date: 2013-12-05 21:01:07.000000000

Patch Set 1:

(1 comment)

Line:192, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/component/TmfEventProvider.java -> Why not just try to coalesce them all?  Say you select a given time range and 3 analysis fire at that moment, they could be coalesced together. The provider's coalesceEventRequest method should take care of this and any query that cannot be coalesced?

-------------------------------------
author: Braxton Mccarthy
date: 2013-12-06 00:18:28.000000000

Patch Set 1:

(4 comments)

Line:187, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/component/TmfEventProvider.java -> Ah, good point. Perhaps we should change them to user TimeRange.ETERNITY too? (since it's the same thing in the end, it will save on TimeRange object, and will make this check here faster).

Line:190, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/component/TmfEventProvider.java -> We don't. Not at this point yet. Perhaps the comment should read "Send the request to the accumulator, which will automatically coalesce..."

Line:192, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/component/TmfEventProvider.java -> It's true that coalesceEventRequest() does some checking already. That's probably part of what could be reworked in future patches.

The idea for now was to just coalesce the "big requests that happen at trace open", and let other smaller requests go through directly. Because sending a request to the accumulator will always add some latency to it (500 ms minimum, then more if other requests arrive in the meantime). For smaller requests, responsiveness is usually more important than throughput.

Although it's hard to determine where the exact cut-off point is, or even how to define it. % of the trace's total range maybe?

Line:19, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/component/TmfRequestAccumulator.java -> Not sure what you mean? There is only one accumulator per event provider (so per trace). There should never be two timers going on in parallel.

-------------------------------------
author: Braxton Mccarthy
date: 2014-01-20 22:41:00.000000000

Abandoned

Superseded by https://git.eclipse.org/r/#/c/20824/

-------------------------------------
