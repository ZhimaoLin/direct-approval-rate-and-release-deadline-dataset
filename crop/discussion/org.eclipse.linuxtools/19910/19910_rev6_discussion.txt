DESCRIPTION

TMF: Introduce the XML state provider for data driven analysis

This patch presents how to define by XML a state provider for a trace. It
contains a test file that works for the test CtfTmfTraces. The patch for XML
analysis module source will be necessary to be able to import XML files and see
the analysis modules appear under the trace.

Change-Id: I4b2db36beb2185049c96344a5faff12d51996317
Signed-off-by: Aryana Jones xxx@xxx.xxx
Signed-off-by: Ayanna Reed xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2014-01-14 03:06:35.000000000

Uploaded patch set 6.

-------------------------------------
author: Brenden Conley
date: 2014-01-14 03:06:41.000000000

Patch Set 6:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5021/

-------------------------------------
author: Brenden Conley
date: 2014-01-14 03:44:15.000000000

Patch Set 6: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5021/ : FAILURE

-------------------------------------
author: Annalise Jimenez
date: 2014-01-14 16:26:38.000000000

Patch Set 6:

(1 comment)

Not ready to be reviewed yet, but request for opinion (see comment).

Line:232, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/stateprovider/XmlStateProvider.java -> For more encapsulation and easier maintenance afterwards, I think this method should be moved to the TmfXmlCondition class. The same applies for loops and code bits that relate only to one object of a TmfXml* class (and its children).

Is there anything to prevent this? Even if it means having to pass the state system at every call, this is preferable than having all the processing for all classes done in this parent class.

-------------------------------------
author: Braxton Mccarthy
date: 2014-01-14 20:06:08.000000000

Patch Set 6:

(7 comments)

Got side-tracked and thought that file was part of another review ;) Oh well, some comments in advance.

Line:71, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/stateprovider/XmlStateProvider.java -> Definitions should use the high-level interfaces, like List. Here:
  private List<TmfXmlEventHandler> name = new ArrayList<>();

Might want to keep the naming style consistent, if you use 'f' for class fields here, call it fProvider or similar.

Line:74, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/stateprovider/XmlStateProvider.java -> ArrayList -> List (for the definition)

Don't make the fields themselves protected. They should always be private, with protected getters/setters if needed. And ideally, don't expose the whole list, just one element at a time (unless you really need to set the whole list object, for some reason).

Line:77, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/stateprovider/XmlStateProvider.java -> HashMap -> Map

should be private, see above

Line:129, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/stateprovider/XmlStateProvider.java -> How are we guaranteed this cast is safe?

If we really are (private method we call only after checking, for example), add a comment explaining how so.

Line:187, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/stateprovider/XmlStateProvider.java -> Is NodeList Iterable? I can't check at the moment, but if it is, then it's usually better to use the "for each" iteration, since the implementation can give better performance than just doing .item(i) or .get(i).

Line:232, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/stateprovider/XmlStateProvider.java -> If the <condition> works the same for everybody, then yes I think I'd be a good idea to have it in one place.

Line:256, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/stateprovider/XmlStateProvider.java -> put } else { on the same line. the comments can go inside the condition

-------------------------------------
