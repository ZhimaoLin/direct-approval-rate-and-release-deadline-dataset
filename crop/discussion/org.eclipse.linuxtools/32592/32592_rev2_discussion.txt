DESCRIPTION

TMF: Introduce a fast linear timestamp transform

The fast timestamp transform uses standard integer arithmetic to compute the
the transform, instead of BigDecimal, yet producing monotonic timestamp within
3ns of the original function.

Test that the fast transform yields about the same results as the original
function, either forward or backward, and also verify that the cache is
effectively used.

The benchmark results are:

Transform   | time (ms)
-----------------------
original    |     17800
fast        |       311

This benchmark suggests that the fast transform is about 57 times faster than
the original transform.

This patch adds a dependency on com.google.common.hash to use hash function
from guava instead of reinventing the wheel.

Change-Id: Ifdf8e23b3e042bf1f2b0454e64a4ab4c47d408d4
Signed-off-by: Adonis Kirk xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2014-09-02 15:09:41.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2014-09-02 15:09:47.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8656/

-------------------------------------
author: Annalise Jimenez
date: 2014-09-02 15:18:03.000000000

Patch Set 2:

The 2 new tests indeed fail. Maybe instead of using start = ts, you could use a value for start that is multiple of <something> so that there are pre-defined steps (for equivalence). And using that, for repeatability, instead of absDelta, you could use the step such that step start time < ts < step+1 start time.

What do you think?

-------------------------------------
author: Brenden Conley
date: 2014-09-02 17:05:06.000000000

Patch Set 2: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8656/ : FAILURE

-------------------------------------
author: Adonis Kirk
date: 2014-09-02 18:25:25.000000000

Patch Set 2:

The fast transform will not work for large slope as it. If the slope * (1<<30) does not fit into 32 bits, an overflow can occur. In this situation, we may reduce the resolution of the timestamp transform, or make the tsBitsWidth smaller. The cache hit rate will be reduced, but the computation will be correct.

However, in the case we are interested in lttng, the slope is close to 1.0, because the operating system already scale the timestamp counter (TSC) to nanosecond.

-------------------------------------
author: Ivy Mitchell
date: 2014-12-11 16:44:25.000000000

Patch Set 2:

Could you port this to TC?

-------------------------------------
author: Ricky Reeves
date: 2015-01-20 19:06:26.000000000

Patch Set 2:

Francis, could you please abandon this patch since it was merged in Trace Compass.

Thanks
Meredith Scott

-------------------------------------
author: Adonis Kirk
date: 2015-01-20 20:05:34.000000000

Abandoned

Merged in Trace Compass

-------------------------------------
