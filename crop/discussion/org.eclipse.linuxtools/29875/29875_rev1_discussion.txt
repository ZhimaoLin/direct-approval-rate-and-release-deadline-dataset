DESCRIPTION

TMF: Add process information provider interface

This interface is to be implemented by any component who has a way to provide
information on the running process at any given time.

It is implemented by LttngUstTrace, LttngKernelTrace and
LttngKernelAnalysisModule and used by the LttngUstMemory analysis.

Change-Id: I5eac87ece6cb5f9a430983e11d011bd15766eb0d
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2014-07-14 18:14:39.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2014-07-14 18:14:45.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/7742/

-------------------------------------
author: Annalise Jimenez
date: 2014-07-14 18:16:00.000000000

Patch Set 1:

This is not totally ready yet, probably still need some code cleanup. But I'm pushing just to know how you like the idea before actually doing the full cleanup ;-)

-------------------------------------
author: Brenden Conley
date: 2014-07-14 18:16:49.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/7742/ : ABORTED

-------------------------------------
author: Braxton Mccarthy
date: 2014-07-14 19:50:09.000000000

Patch Set 1: Code-Review-1

(1 comment)

LTTng-specific things shouldn't go in the base framework. In fact, I'm not sure if even the notion of "process" should be in the base framework.

Instead of an interface, why not just do something lttng-specific that checks for either:
* lttng kernel trace with sched_switch
* UST trace with vtid + procname

and then can return the information to the lttng-specific views?

Line:65, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/helper/IProcessInformationProvider.java -> This is extremely LTTng-specific. It should be defined in the lttng plugins.

If you do so then, I'm not sure an enum would be the best way to go. You could have specific methods like getTid(), getProcname() etc.

-------------------------------------
author: Annalise Jimenez
date: 2014-07-14 20:24:35.000000000

Patch Set 1:

(1 comment)

It is not *that* LTTng-specific. For instance, David Couturier with his ATL GPU traces might want to have the current process for each GPU event. And as Matthew pointed out when I talked to him about it, we could do that to Windows traces as well.

This way, you can aggregate traces together in an experiment and they can share information (here process information) between them so that if any trace type provides it, the other traces' analyses can use it.

So the best place to put it, without adding a new plug-in is in tmf.core.

Line:65, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/helper/IProcessInformationProvider.java -> I started like this, and it's not very pretty. One getX and providesX per information, so 10 new methods to implement, which are copy/paste of one another

-------------------------------------
author: Ivy Mitchell
date: 2014-07-15 18:17:30.000000000

Patch Set 1:

(1 comment)

Line:65, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/helper/IProcessInformationProvider.java -> maybe check which one of these items has a wiki entry or something proving its notability. Or coordinate with patricks work on generalizing the timegraph.

-------------------------------------
author: Annalise Jimenez
date: 2014-07-16 13:32:54.000000000

Patch Set 1:

(1 comment)

Line:65, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/helper/IProcessInformationProvider.java -> What's the relation with Patrick's work on the time graph? Is he doing something about these? This is analysis related, not view related.

-------------------------------------
author: Annalise Jimenez
date: 2015-01-19 19:12:01.000000000

Abandoned

aspects will solve the problem this was meant to solve

-------------------------------------
