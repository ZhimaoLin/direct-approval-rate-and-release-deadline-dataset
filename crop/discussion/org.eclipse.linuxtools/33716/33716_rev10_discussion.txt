DESCRIPTION

State system: add a Compare() method to ITmfStateValue

It is required to compare two state values based on different comparison
operators. It will be useful for the XML analysis.

Change-Id: I1fcb9525a41b11a648922271b5c2e06d6bd309ac
Signed-off-by: Makena Hernandez xxx@xxx.xxx


COMMENTS

author: Makena Hernandez
date: 2014-10-01 18:10:03.000000000

Uploaded patch set 10.

-------------------------------------
author: Brenden Conley
date: 2014-10-01 18:10:08.000000000

Patch Set 10:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/9154/

-------------------------------------
author: Brenden Conley
date: 2014-10-01 18:41:39.000000000

Patch Set 10: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/9154/ : FAILURE

-------------------------------------
author: Braxton Mccarthy
date: 2014-10-01 20:36:51.000000000

Patch Set 10: Code-Review-1

(16 comments)

Taking a little break from rebasing filtered branches to do some reviews ;)

This looks good in general, some comments. Very nice addition, this can be useful in many places. Props on the test cases too, that's very exhaustive!

I'm not too sure about the integer > string thing though. Why not just throw an IllegalArgumentException (or StateValueTypeException, which is a runtime exception now) ? It would then be the responsibility of the caller to check the types with getType() before doing comparisons, just like they should check before doing unboxInt() etc.

Line:7, /COMMIT_MSG -> technically it's a compareTo() method ;)

You could say for instance "Make ITmfStateValue Comparable"

Line:74, lttng/org.eclipse.linuxtools.statesystem.core/src/org/eclipse/linuxtools/statesystem/core/statevalue/DoubleStateValue.java -> This is misleading, "object == null" wouldn't mean a NullStateValue here, it would be a null reference.

All the comments here apply to the other compareTo() implementations.

Line:83, lttng/org.eclipse.linuxtools.statesystem.core/src/org/eclipse/linuxtools/statesystem/core/statevalue/DoubleStateValue.java -> you could just do return Double.compare(...) here, no need for the 'result' variable (this avoids needing break's too).

Line:108, lttng/org.eclipse.linuxtools.statesystem.core/src/org/eclipse/linuxtools/statesystem/core/statevalue/DoubleStateValue.java -> and return 0; here (your default value)

Line:11, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/statesystem/StateValueComparisonTest.java -> add empty line below

Line:28, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/statesystem/StateValueComparisonTest.java -> remove this line

Line:23, lttng/org.eclipse.linuxtools.statesystem.core/src/org/eclipse/linuxtools/statesystem/core/statevalue/ITmfStateValue.java -> add space before the {

Line:23, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateValuesComparison.java -> This will be 3.2 now. Everyone can upgrade their baselines to 3.1 now for that matter.

Line:25, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateValuesComparison.java -> I'm not sure I get the point of this file? To use it, you need two ITmfStateValue object, and you can call object1.compareTo(object2); directly no?

Or as GeneviÃ¨ve mentioned, if this is to map XML constructs to which comparison type to use, then it should be in the xml plugins only.

Line:25, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/AllTests.java -> The state system unit tests are in pretty bad shape... You could add this to a new package "o.e.l.statesystem.core.tests.statevalue"

Line:11, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateValueCompareToTest.java -> add emtpy line below

Line:25, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateValueCompareToTest.java -> remove this empty line

Line:30, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateValueCompareToTest.java -> Not very important in tests, but typically the names for "static final" defines should be in ALL_CAPS (so BASE_INT_VALUE here, etc.).

Line:63, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateValueCompareToTest.java -> { on the same line

Line:100, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateValueCompareToTest.java -> You could separate these different sections in xxx@xxx.xxx methods

Line:5, lttng/org.eclipse.linuxtools.statesystem.core/META-INF/MANIFEST.MF -> We can't break the API yet. Wait a couple days/weeks for Trace Compass ;)

-------------------------------------
