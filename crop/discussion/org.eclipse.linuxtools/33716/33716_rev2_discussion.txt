DESCRIPTION

State system: add a Compare() method to ITmfStateValue

It is required to compare two state values based on different comparison
operators. It will be useful for the XML analysis.

Change-Id: I1fcb9525a41b11a648922271b5c2e06d6bd309ac
Signed-off-by: Makena Hernandez xxx@xxx.xxx


COMMENTS

author: Makena Hernandez
date: 2014-09-22 20:11:26.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2014-09-22 20:18:40.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/9040/

-------------------------------------
author: Brenden Conley
date: 2014-09-22 20:56:12.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/9040/ : SUCCESS

-------------------------------------
author: Annalise Jimenez
date: 2014-09-23 14:54:00.000000000

Patch Set 2: Code-Review-1

(8 comments)

Comments in DoubleStateValue apply to all the other classes.

Another approach to this could be to have ITmfStateValue extend the Comparator<T> interface (so that the comparison pattern can be used by other parts of the code if required). And you could add utility class with static method to compare 2 values using a ComparisonOperator as you defined that will use the value's compare() method.

Line:70, lttng/org.eclipse.linuxtools.statesystem.core/src/org/eclipse/linuxtools/statesystem/core/statevalue/DoubleStateValue.java -> Don't use a String for the comparisonOperator. It is easy to send a wrong string here and you can easily forget a case statement. Use an enum that is defined... where? maybe somewhere in tmf.core and these operators can be used in other contexts.

Line:72, lttng/org.eclipse.linuxtools.statesystem.core/src/org/eclipse/linuxtools/statesystem/core/statevalue/DoubleStateValue.java -> bizarre situation here when object is not an instance of DoubleStateValue, it is neither less, nor greater, nor equal to the current value. Code using this method may assume that if val1 not >= val2, then it is less, but it is not the case either.  It should return something consistent.

Line:97, lttng/org.eclipse.linuxtools.statesystem.core/src/org/eclipse/linuxtools/statesystem/core/statevalue/DoubleStateValue.java -> I think the default should just return false, or throw an IllegalStateException. Once you use an enum, this case should never happen so the illegalStateException makes sense.

Line:107, lttng/org.eclipse.linuxtools.statesystem.core/src/org/eclipse/linuxtools/statesystem/core/statevalue/ITmfStateValue.java -> This, I am not 100% sure of. We should check with Alex first.

In any case, the name of the method is the same as the one used when implementing the Comparator interface and may be confused with it. Maybe rename this method to something different.

Line:2, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateSystemComparisonTest.java -> 2014 only and you are from École Polytechnique de Montréal, not Ericsson

Line:25, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateSystemComparisonTest.java -> Technically it is not StateSystem comparison, but state value. StateValueComparisonTest would be a more appropriate name for the class

Line:28, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateSystemComparisonTest.java -> at least 2 exra blank lines

Line:33, lttng/org.eclipse.linuxtools.statesystem.core.tests/src/org/eclipse/linuxtools/statesystem/core/tests/StateSystemComparisonTest.java -> You can do either that, or have xxx@xxx.xxx method for each operator. That last approach will allow to test all operators at once and see which ones fails. Otherwise, the test just fails at first failure, you correct the bug, and if another operator has bugs, you have to run the test again, it will fail again, etc.

-------------------------------------
author: Annalise Jimenez
date: 2014-09-23 15:37:45.000000000

Patch Set 2:

Alex, could you please take a quick look at this patch and say what you think on the general approach.

-------------------------------------
