DESCRIPTION

tmf: Add support for partial state system history

A partial history is like a shim between a trace's state system
and a "standard" history backend.

In a standard history, all state intervals are inserted into the
backend. With a partial history, only the intervals that cross
pre-determined checkpoints are inserted. To rebuild any state
between checkpoints, we load the previous checkpoint and re-read
the events in the trace between the checkpoint and the time of
the query.

Partial histories do not support single queries. While those
could be implemented by using a full-query, it seemed to cause
problems with range queries, where multiple state/event queries
happen in parallel (which is not so bad, range-query performance
would be absolutely disastrous!).

Change-Id: Iad709a00d630a40bf5a1c2e13d55d901f9a1eaa5
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-03-11 22:22:56.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-03-11 22:23:02.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1638/ 

-------------------------------------
author: Brenden Conley
date: 2013-03-11 22:41:22.000000000

Patch Set 2: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1638/ : SUCCESS

-------------------------------------
author: Ricky Reeves
date: 2013-03-12 16:00:45.000000000

Patch Set 2: Looks good to me, but someone else must approve; IP review completed

It looks good too me. Smart move to re-use the test of the full history. The final verification will be when it will be used in practice. Only then we'll see if we run in concurrency issues. There are new locks and countdown latches introduced that have to coexist with the existing framework synchronisation locks.

-------------------------------------
author: Braxton Mccarthy
date: 2013-03-13 19:40:15.000000000

Patch Set 2: Looks good to me, approved



-------------------------------------
