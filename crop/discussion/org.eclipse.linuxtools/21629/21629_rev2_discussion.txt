DESCRIPTION

tmf: Add a waitForCompletion() with no parameter to analysis modules

This avoids having to instantiate useless NullProgressMonitor's we
can't cancel anyway.

Change-Id: Ibe9464315c7d957722817f9332e1024ab18e9609
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2014-02-06 22:02:26.000000000

Uploaded patch set 2.

-------------------------------------
author: Braxton Mccarthy
date: 2014-02-06 22:03:17.000000000

Patch Set 2:

For some reason, the unit test exhibited the behavior that https://git.eclipse.org/r/#/c/21576/ was fixing. So I rebased it on top of that patch, I guess.

-------------------------------------
author: Brenden Conley
date: 2014-02-06 22:24:04.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5370/

-------------------------------------
author: Brenden Conley
date: 2014-02-06 23:06:47.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5370/ : SUCCESS

-------------------------------------
author: Annalise Jimenez
date: 2014-02-07 00:33:09.000000000

Patch Set 2: Code-Review+1 IP-Clean+1

Where am I? I remember writing comments on that patch. Would I have forgotten to publish my comments?

Anyway, I have no objections to this, since the no monitor is the most common use case (and it was there at origin), as long as the one with the monitor stays (unless I get convinced that it is now useless with all the changes that occurred since the birth of the analysis modules)

-------------------------------------
author: Braxton Mccarthy
date: 2014-02-07 01:16:37.000000000

Patch Set 2: Code-Review+2

It's strange to be able to cancel via the waitForCompletion() method. Anybody calling waitFor() could potentially cancel the analysis for everyone else. It should be the callers job to check their own ProgressMonitor, and then call subAnalysis.cancel(). And cancel() could cancel sub-analyses recursively. imo.

But we can debate this once we get to that point :)

-------------------------------------
author: Gerrit Code Review
date: 2014-02-07 01:16:38.000000000

The change could not be merged due to a path conflict.

Please rebase the change locally and upload the rebased commit for review.

-------------------------------------
author: Braxton Mccarthy
date: 2014-02-07 01:17:16.000000000

Patch Set 2:

Meh, I'll rebase tomorrow.

-------------------------------------
author: Annalise Jimenez
date: 2014-02-07 14:51:06.000000000

Patch Set 2:

I remember the case where the IProgresMonitor is useful. It's not related to analysis at all, after all, the abstract class does the right job of cancelling the analysis and countdowning the latch.

Use case: critical path view: when you select an entry in the control flow view, a new buildThread of the critical path view is started, cancelling the old one. BuildThread has a monitor that is cancelled when cancelling the thread. But the thread cannot be cancelled if it is waiting on an analysis module completion, so that's why the build thread's monitor is sent in the waitForCompletion it doesn't hang there.

-------------------------------------
