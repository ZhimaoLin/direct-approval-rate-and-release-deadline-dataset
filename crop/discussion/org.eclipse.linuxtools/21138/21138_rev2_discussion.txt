DESCRIPTION

tmf: Lazy loading of timer task in TmfEventProvider

Also, cancel timer when trace is disposed.

Change-Id: I4269ddb1faba771c039649d92f2e1477076668c8
Signed-off-by: Ricky Reeves <Meredith xxx@xxx.xxx


COMMENTS

author: Ricky Reeves
date: 2014-01-27 15:06:27.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2014-01-27 15:06:33.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5193/

-------------------------------------
author: Ivy Mitchell
date: 2014-01-27 15:34:23.000000000

Patch Set 2: IP-Clean+1

Code is clean and looks good, is there a reason to lazy load it? Performance or other?

-------------------------------------
author: Brenden Conley
date: 2014-01-27 15:50:02.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5193/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2014-01-27 16:57:56.000000000

Patch Set 2: Code-Review-1

Patrick's comment still applies (should lock the dipose()) also the getTimer() should probably be synchronized, so that no extraneous Timer can be created. In most cases it doesn't matter, but here new Timer() starts a new thread.

-------------------------------------
author: Braxton Mccarthy
date: 2014-01-27 17:56:31.000000000

Patch Set 2:

@Matthew: this change is so that a thread is not started every time a "trace" object is instantiated, since TmfTrace extends TmfEventProvider. And we create trace objects just for validation purposes.

-------------------------------------
author: Ricky Reeves
date: 2014-01-27 17:56:44.000000000

Patch Set 2:

Hi Alex

Thanks for pointing that out. I missed that initially and only realized it after pushing patch set 2. I'm going to provide a fix for that.

-------------------------------------
