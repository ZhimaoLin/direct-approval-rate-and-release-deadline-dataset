DESCRIPTION

tmf: Replace state value types with an enum

Originally, we specified the low-level byte to write to the
history tree file in ITmfStateValue. Now that we have multiple
possible state backends, it's much more convenient to use an
enum in the framework, and define the type<->byte conversion
inside the History Tree only.

Change-Id: I8bd694672256c15737e41813b3146b2f929d8c78
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2013-03-11 22:37:51.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1639/ 

-------------------------------------
author: Brenden Conley
date: 2013-03-11 22:51:25.000000000

Patch Set 1: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1639/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-03-12 14:56:42.000000000

Patch Set 1: (2 inline comments)



Line:46, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> Could you import Type directly?

Line:35, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/statesystem/backends/historytree/HTInterval.java -> You could associate the byte value directly in the enum. Either by using .ordinal() but that wouldn't be backwards compatible (starts at 0), or by assigning the value in the enum constructor and adding a getter method. See example here: http://stackoverflow.com/a/5372902

-------------------------------------
author: Braxton Mccarthy
date: 2013-03-12 17:08:17.000000000

Patch Set 1: (2 inline comments)



Line:46, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> Sure we could, but there are many many class called "Type" in Java/Eclipse. In the TransientState, or StateValue classes, it's clear we're talking about state values Types, but here I specifically used ITmfStateValue.Type in the code to make it a bit more clear.

Would you prefer we use just Type?

Line:35, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/statesystem/backends/historytree/HTInterval.java -> Ok I see what you mean. But then this would have to be in the definition of the enum (which is in ITmfStateValue) and the framework shouldn't have know what byte values are used in the specific back-end implementation.

Another concern I had is, .ordinal() returns an int, but we write 8 bits in the file so that's why I used byte here.

-------------------------------------
author: Luciana Barry
date: 2013-03-12 17:31:30.000000000

Patch Set 1: (2 inline comments)



Line:46, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> It's fine, let's leave it explicitly clear.

Line:35, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/statesystem/backends/historytree/HTInterval.java -> Agree to not use ordinal(), it's not safe as it is dependent on the enum ordering anyways.

It seems fine to me to add a getByteValue() method (or similar) in the enum, I don't foresee another back-end implementation having a different mapping table? At worst it could transform the byte value into something else.

-------------------------------------
author: Braxton Mccarthy
date: 2013-03-12 22:24:21.000000000

Patch Set 1: (1 inline comment)



Line:35, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/statesystem/backends/historytree/HTInterval.java -> Ok after trying it, I realized that in here, I'm reading a byte value from the file, then doing a switch on it (line 97). There is no TmfStateValue object at this point, so we would need those redundant 'static final byte' definitions here anyway.

Then the question is where to put the getByteFromType() method, either here or in ITmfStateValue's enum. As I mentioned above, I'd rather have them in here, since the byte values are specific to this back-end should not even be used in the framework. I don't think we'd save lines of code either way ;)

-------------------------------------
author: Luciana Barry
date: 2013-03-13 18:07:17.000000000

Patch Set 1: Looks good to me, but someone else must approve; IP review completed



-------------------------------------
author: Braxton Mccarthy
date: 2013-03-13 19:37:31.000000000

Patch Set 1: Looks good to me, approved



-------------------------------------
