DESCRIPTION

tmf: add constant offset synchronization algorithm and algorithm factory

Change-Id: Ia5b2b49c0e49275b6fa78a16655325a57ab04725
Signed-off-by: Ivy Mitchell xxx@xxx.xxx


COMMENTS

author: Ivy Mitchell
date: 2014-07-29 17:27:26.000000000

Uploaded patch set 1.

-------------------------------------
author: Ivy Mitchell
date: 2014-07-29 17:38:31.000000000

Topic set to Offsetting

-------------------------------------
author: Brenden Conley
date: 2014-07-29 17:59:34.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/7987/

-------------------------------------
author: Brenden Conley
date: 2014-07-29 18:06:54.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/7987/ : FAILURE

-------------------------------------
author: Annalise Jimenez
date: 2014-07-29 21:42:29.000000000

Patch Set 1: Code-Review-1

(2 comments)

Line:24, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/synchronization/TimestampTransformFactory.java -> Fair enough, with this, all timestamp transform classes can go internal and we expose only the interface.

Line:31, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/synchronization/SyncAlgorithmOffset.java -> I'm not sure you need a synchronization algorithm for the offset. All you need to do is set the timestamp transform for a trace, which, even when synchronization happens, is not done by the synchronization algorithm, but by the synchronization handler. So unless I see how you use this and I am convinced, I have doubts here.

-------------------------------------
