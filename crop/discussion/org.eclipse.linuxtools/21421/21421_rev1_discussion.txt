DESCRIPTION

[WIP] tmf: Move the tmftracetype extension point to tmf.core

Split the current "tmf.ui.tracetype" extension point into a
tmf.core.tracetype and tmf.ui.tracetypeui. "tracetypeui" refers to
the ID of the "tracetype", to add UI elements like type-specific icon
and events editor.

This separation makes it possible to unit-test the trace validation
without depending on UI/SWTBot tests. We will also eventually be able
to handle trace opening/validation in completely headless mode.

Change-Id: I227a199d1dddf62ad07b60392793b4694d0ec2de
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2014-01-31 22:55:29.000000000

Patch Set 1:

Current status: the values from the new tmf.core.tracetype extension point get read correctly. But the values in tmf.ui.tracetypeui are still ignored. I'm not 100% sure what's the best way to handle those.

-------------------------------------
author: Brenden Conley
date: 2014-02-01 00:26:10.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5286/

-------------------------------------
author: Brenden Conley
date: 2014-02-03 15:18:04.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5286/ : ABORTED

-------------------------------------
author: Kaeden Tapia
date: 2014-02-03 15:18:50.000000000

Patch Set 1:

I aborted the build, it had been running for 2 days+. Does it work locally? mvn clean install?

-------------------------------------
author: Annalise Jimenez
date: 2014-02-03 18:49:31.000000000

Patch Set 1:

> But the values in tmf.ui.tracetypeui are still ignored. I'm not 100% sure what's the best way to handle those.

In the case of the analysis, for example, the views (in UI) to go with analysis modules (in core) are wrapped in a class that implements IAnalysisOutput so I can easily add them to the appropriate analysis, so that's a way of doing things.

But in this case, it's really extensions of the trace type that do not interact with the trace type itself, so I'd just add a TmfTraceTypeUIUtils.getConfigurationElement(traceTypeId) and from that configuration element, you can get what you need from the extension point.

-------------------------------------
author: Braxton Mccarthy
date: 2014-02-03 19:05:13.000000000

Patch Set 1: Code-Review-1

Hmm, indeed, when running the build locally, at the Tmf UI unit test it got stuck at a popup saying "No trace type defined for that trace". On the Hudson server nobody could click OK, which would explain the hang.

In any case, that test should time out. I'll look into it

-------------------------------------
author: Braxton Mccarthy
date: 2014-02-03 19:16:03.000000000

Patch Set 1:

> But in this case, it's really extensions of the trace type that
> do not interact with the trace type itself, so I'd just add a
> TmfTraceTypeUIUtils.getConfigurationElement(traceTypeId) and from
> that configuration element, you can get what you need from the
> extension point.

Ok, yeah that's what I had in mind. But, currently the the TmfTraceType caches the information from the extension point in its fTraceTypeAttributes (why that is not in the TraceElement I wonder, but that's a separate mystery). Is there a performance impact, or other downside to re-reading the extension point info every time?

-------------------------------------
author: Annalise Jimenez
date: 2014-02-03 19:21:00.000000000

Patch Set 1:

Why not cache it again as before? The first time it is requested it would be read and cached. 

Though in this case, it is used mostly when a trace is opened, so it might be a memory performance improvement to read it every time instead of caching it... But so small...

-------------------------------------
