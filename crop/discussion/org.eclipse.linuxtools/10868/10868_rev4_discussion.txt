DESCRIPTION

[TMF] Add support for 64-bit integers in the history tree

Change-Id: Ib37fc52bcb3e032bb671ba836023281f4c4f0b01
Signed-off-by: Francis Mclean xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2013-03-06 12:27:55.000000000

Patch Set 4:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1590/ 

-------------------------------------
author: Brenden Conley
date: 2013-03-06 12:41:11.000000000

Patch Set 4: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1590/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2013-03-06 16:16:48.000000000

Patch Set 4: I would prefer that you didn't submit this; Unclean IP, do not check in

(6 inline comments)

Some comments.

Also don't forget the IP statement, it's still needed for now... You can add it just after pushing a patch the first time.

Line:249, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/statesystem/backends/historytree/HTInterval.java -> See the comments on patch set #1. You could use putLong() directly, and no need for the extra first and last bytes (the size is constant in this case).

Line:149, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/TmfStateValue.java -> For consistency, I would also make it so passing -1 results in a nullValue

Line:179, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/TmfStateValue.java -> xxx@xxx.xxx 2.0 (sometimes you need to clean+rebuild to get the API analyzer to pick it up...).

I would also put the -long method between the -int and -string. But that's just me ;)

Line:185, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/TmfStateValue.java -> Maybe we could want to allow "unboxing" a Int as a Long too? Not saying we should, but we can think about it.

Line:8, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/LongStateValue.java -> Add a line Contributors: with "your name - Initial API and implementation" under it.

Line:46, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/LongStateValue.java -> I wouldn't implement this (just return null). A long has a fixed size, and we can use putLong() in HTInterval to write them to the file.

This method was more for string, structs, etc. that we want to serialize.

-------------------------------------
author: Dax Sharp
date: 2013-03-06 17:04:55.000000000

Patch Set 4: (5 inline comments)

I will be submitting the next revision in a jiffy.

Line:249, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/statesystem/backends/historytree/HTInterval.java -> I already did not use the extra 2 bytes. I will rework that part to use putLong.

Line:149, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/TmfStateValue.java -> Done

Line:179, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/TmfStateValue.java -> xxx@xxx.xxx notation was in the ITmfStateValue file.
I added it here too.

Line:185, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/TmfStateValue.java -> I agree that it could make sense. But I'd rather let the user know that his logic may be wrong by throwing an exception.
Also, when do we stop adding special cases? Maybe this string can be interpreted as a long, so we could support that as well. Or maybe it's a float, but you could want to unbox it as an int.
I say: let the user do his conversions.

Line:46, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statevalue/LongStateValue.java -> Done

-------------------------------------
