DESCRIPTION

TMF: Introduce the XML state system view for data driven outputs

Change-Id: I3ecf738e918be7b52075706f85c3f842c737b712
Signed-off-by: Aryana Jones xxx@xxx.xxx
Signed-off-by: Ayanna Reed xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2014-04-23 18:42:19.000000000

Uploaded patch set 7.

-------------------------------------
author: Brenden Conley
date: 2014-04-23 18:42:26.000000000

Patch Set 7:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/6590/

-------------------------------------
author: Brenden Conley
date: 2014-04-23 19:41:17.000000000

Patch Set 7: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/6590/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2014-04-23 22:55:41.000000000

Patch Set 7: Code-Review-1

(1 comment)

Line:55, lttng/org.eclipse.linuxtools.tmf.analysis.xml.ui/src/org/eclipse/linuxtools/tmf/analysis/xml/ui/views/timegraph/XmlPresentationProvider.java -> these two could be final.

If you're using Integer (or Long etc.) keys, and plan to have less than ­~1000 elements in the map, a TreeMap will be faster than a HashMap.

In fact, using two separate collections for the same elements is a synchronization time bomb, and is harder to follow/understand. It should be abstracted into its own class. You can take a look at TransientState for an example of what to NOT do >.>

I *think* just a TreeMap would be enough here (the elements are always sorted, so it's kind-of an ArrayList with "holes", and the iteration order is respected), but if not it should be a separate container class.

-------------------------------------
author: Annalise Jimenez
date: 2014-04-24 00:13:10.000000000

Patch Set 7:

(1 comment)

Line:55, lttng/org.eclipse.linuxtools.tmf.analysis.xml.ui/src/org/eclipse/linuxtools/tmf/analysis/xml/ui/views/timegraph/XmlPresentationProvider.java -> The time graph view keeps its colors in a Color[] array, ordered with the order of the stateValues List.

For each time event, the time graph wants index of the color in a Color[] fEventColorMap from a value (that's the getStateTableIndex purpose). That why we keep the stateIndex map. Unless there exists a indexOf method on a map that I haven't found yet, then I don't think we can do with just a TreeMap. It should indeed be synchronized though.

Values' color may or may not exist when they are requested. Eventually, we'll want to support different series entry types in a view with different sets of stateItems, mapped from potentially identical values (like the Resource view and Control Flow view in the same view for instance...). 

I didn't want to mess into the matter just yet, but if it is necessary to get that patch in, I'll go for a more holistic approach right away.

-------------------------------------
author: Braxton Mccarthy
date: 2014-04-24 17:15:12.000000000

Patch Set 7: Code-Review+2

After discussing with Geneviève, this whole data structure bending is due to how the abstract class expects its colors, etc. 

We'll leave it like it is for now, and eventually fix the abstract view to use a more sane way of storing its properties (Set instead of arrays, etc.)

-------------------------------------
author: Annalise Jimenez
date: 2014-04-24 17:16:42.000000000

Patch Set 7: Verified+1 Code-Review+2

-------------------------------------
