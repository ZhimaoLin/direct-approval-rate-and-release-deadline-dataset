DESCRIPTION

TMF: Add XML state provider schema definition and test file

This patch adds to the XSD the schema definition for a full XML-defined state
provider. The valid test file is also augmented to use that definition.

Change-Id: Ib75082f04fae69f62f6c7990ee8c92ea4cc042e5
Signed-off-by: Aryana Jones xxx@xxx.xxx
Signed-off-by: Ayanna Reed xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2014-01-22 15:48:31.000000000

Uploaded patch set 4.

-------------------------------------
author: Brenden Conley
date: 2014-01-22 15:48:37.000000000

Patch Set 4:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5143/

-------------------------------------
author: Annalise Jimenez
date: 2014-01-22 15:51:54.000000000

Patch Set 4: Code-Review-1

I haven't fully reviewed the state value yet, but here is a new version of the XSD with the proposed changes.

-------------------------------------
author: Brenden Conley
date: 2014-01-22 16:30:14.000000000

Patch Set 4: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5143/ : SUCCESS

-------------------------------------
author: Ayanna Reed
date: 2014-01-22 20:04:19.000000000

Patch Set 4:

(4 comments)

Line:277, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core.tests/test_xml_files/test_valid.xml -> It's not easy to understand the difference between field and eventfield this new syntax.

Line:94, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> stateAssignation is still useful ?

Line:139, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> I don't really like this.
In a example : in the previous version we have :
<stateChange>
    <attribute location="CurrentThread" />
    <attribute eventField="TID" />
    <attribute constant="System_call" />
    <value type="null" />
</stateChange>

with your solution we have :

<stateChange>
    <location value="CurrentThread" />
    <eventfield name="TID" />
    <constant value="System_call" />
    <stateValue type="null" />
</stateChange>

I thinks it's less easy to read.

Line:159, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> ctrl+f

-------------------------------------
author: Annalise Jimenez
date: 2014-01-22 20:35:05.000000000

Patch Set 4:

(2 comments)

Line:94, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> No, I forgot to remove it

Line:139, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> Fair enough. How about this?

<stateChange>
    <attribute type="location" value="CurrentThread" />
    <attribute type="eventField" value="TID" />
    <attribute type="constant" value="System_call" />
    <query>
        <attribute type=....>
    </query>
    <stateValue type="null">
</stateChange>

This way, it is still easy to ready (queries can be considered something different than other attributes) and we can make extra validation on the XSD (an enum value in the type attribute)

-------------------------------------
author: Ayanna Reed
date: 2014-01-22 22:24:05.000000000

Patch Set 4:

(1 comment)

Line:139, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> I'm agree that it's better for the reading. 
In fact it was the first proposed version in may :O

-------------------------------------
author: Annalise Jimenez
date: 2014-01-23 02:07:09.000000000

Patch Set 4:

(1 comment)

Line:139, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> And why was it changed?

-------------------------------------
author: Annalise Jimenez
date: 2014-01-23 15:48:10.000000000

Patch Set 4:

So we're having a debate here about the XML readability vs ease of validation (error reduction and easier debugging at XML development time). I think we all have good points here.

Here's something else I can propose to have the best of both worlds:

Let's keep the original syntax (for stateAttribute at least) and add a static validator when we import the file. 

Validation will thus have an extra step:

* We will first check the XML with the XSD as it is right now.
* If it validates, we open the file, see if we have an element with extra validator (like the stateProvider element) and call a static XmlStateProvider.validate(Element) method that will check the DOM and warn the user if what he did doesn't make sense (for instance, if he did a <stateAttribute constant="const" eventField="field" /> we tell him only one of constant, eventField and location must be set)

Would that sound acceptable?

-------------------------------------
author: Ayanna Reed
date: 2014-01-23 16:01:24.000000000

Patch Set 4:

(1 comment)

Ok. Alex what is your opinion on this ?
May be it's better for the maintenance to have for the stateAttribute type="" value="".
It's sounds good for me.

Line:139, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> It's just to have a shorter syntax in the XML. I like the type="" value="" also

-------------------------------------
author: Annalise Jimenez
date: 2014-01-23 16:30:34.000000000

Patch Set 4:

(1 comment)

I'm now reviewing the stateValue element. The same comments apply as for the stateAttribute.

It's a choice between

type="" value="" 

or

constant="" or eventField="" or location=""

I'll speak with Alex today about that and I hope we'll make a final decision on this.

Line:162, lttng/org.eclipse.linuxtools.tmf.analysis.xml.core/src/org/eclipse/linuxtools/tmf/analysis/xml/core/module/xmldefinition.xsd -> This is my next victim in line... readability vs validativity.

IF we go for type="" in the stateAttribute, we would do the same here.

The type could be required and int, lon, eventField, stack, forceType, string would become types. We'd have "value" attrib for a string corresponding to certain type. "stack" and "forcedType" would remain and be used only if type="stack" or "forcedType".

And the stateAttribute elements make sense only if type is query.

-------------------------------------
author: Braxton Mccarthy
date: 2014-01-23 21:39:04.000000000

Patch Set 4:

I like the more solid validation too (type="something" value="somethingelse"). Readabiliy or brevity of the XML is not *that* important, since we will eventually move to have nice pretty UIs (hah!) to generate and read those files anyway.

-------------------------------------
