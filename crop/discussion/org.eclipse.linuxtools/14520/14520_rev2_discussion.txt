DESCRIPTION

Tmf:Benchmark for the request scheduler

The benchmark has three tests. The first one is the latency (time
between the creation of the request and the beginning of its execution).
The second one is the average waiting time for a request. The last one
is the total completion time.

Change-Id: Icc8cb47111221aaefb871faab97bb49c8bdf0b03
Signed-off-by: Kelsie Blackwell xxx@xxx.xxx


COMMENTS

author: Kelsie Blackwell
date: 2013-07-12 19:25:46.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-07-12 19:25:51.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/2902/

-------------------------------------
author: Brenden Conley
date: 2013-07-12 19:42:58.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/2902/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2013-07-12 20:24:24.000000000

Patch Set 2: Code-Review-1

(9 comments)

Some comments, mainly about clarity...

This will be very useful for current, but also future benchmarking!

Line:28, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> Extra * at the end

Line:30, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> empty line after

Line:35, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> You don't need NON-NLS annotations in the test plugins (the project settings should be configured as such). You can remove all of them.

Line:36, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> Instead of writing into the plugin's directory (and creating files that will show up in git), you should write it to the temporary files. You can do so in a cross-platform way with File.createTempFile().

Since the results are quite short, you could simply print it to System.out too (and then they can copy-paste it to a file). Up to you.

Line:37, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> To be representative, a benchmark should be run at least 10 times, that way it reduces the effects of caching that might affect the first few runs.

Line:54, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> These should be in an array, whose size depends on NUM_LOOPS (that way one can easily tweak NUM_LOOPS and get the average results fine).

Line:136, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> You should use a static final define for 1000000, like MILLISECONDS_IN_SECONDS. Juuuust to be safe ;)

Line:149, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> The requests here could be made in an array (or two arrays, one for foregrounds and one for background). And you can add another level of for's that will call .sendRequest() and .waitForCompletion().

Line:217, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> here too

-------------------------------------
author: Braxton Mccarthy
date: 2013-07-12 20:26:51.000000000

Patch Set 2:

(2 comments)

Line:217, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> ... meaning, here you can use a static final constant too

Line:301, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerBenchmark.java -> never used, gives a warning

-------------------------------------
