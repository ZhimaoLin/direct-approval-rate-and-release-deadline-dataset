DESCRIPTION

TMF: Export trace to text

Add a command to export traces to text.
If a filter is applied, only filtered elements are exported.

Change-Id: Ie213eda715f68104572704cb3c08226aa5c52a85
Signed-off-by: Bryce Kline xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2013-10-28 09:09:35.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3768/

-------------------------------------
author: Brenden Conley
date: 2013-10-28 09:48:05.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3768/ : SUCCESS

-------------------------------------
author: Ricky Reeves
date: 2013-11-11 14:27:57.000000000

Patch Set 1: Code-Review-1

(15 comments)

Hi Xavier

Very nice addition! Our user will want that.

Beside the inline commends I have two requests below. Please let me know what you think about it.

Currently, there is no means to trigger the export command handler. I would suggest to add this to the TmfEventsTable Pop-up menu.Here how you could call the command handler in the method createPopupMenu() of the TmfEventsTable programmatically:

final IAction exportToTextAction = new Action("ExportToText") {
           xxx@xxx.xxx
            public void run() {
                IWorkbenchPage activePage = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
                IHandlerService handlerService = (IHandlerService) activePage.getActiveEditor().getSite().getService(IHandlerService.class);
handlerService.executeCommand("org.eclipse.linuxtools.tmf.ui.exportToText", null);
            }
        };
tablePopupMenu.add(exportToTextAction);
-------

I also would like to ask you to change the format of the text file to match the columns in the table and instead of a hard-coded order of columns (which are actually the default TMF table columns). This you can achieve using methods extractFieldItems() of TmfEventsTable and getColumns() of the TmfVirtualTable instance which is a member of TmfEventsTable. You will need some public methods to access these information and pass a reference to the TmfEventsTable instance as command parameter.

Line:826, lttng/org.eclipse.linuxtools.tmf.ui/plugin.xml -> category org.eclipse.linuxtools.tmf.ui.commands.trace.category does not exist. Either create category or use an existing one if existing one makes sense (e.g. org.eclipse.linuxtools.tmf.ui.commands.category)

Line:829, lttng/org.eclipse.linuxtools.tmf.ui/plugin.xml -> define name in plugin.properties

Line:62, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextJob.java -> use a constant for 100

Line:75, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextJob.java -> variable name _ is not a good name. Also it will cause warnings on Sonar (see https://dev.eclipse.org/sonar/dashboard/index/org.eclipse.linuxtools:linuxtools-parent)

please use a better name here

Line:81, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextJob.java -> please use a better name here

Line:103, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextJob.java -> use a constant for 100, re-use the one at beginning of run()

Line:110, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextJob.java -> Could be a constant

Line:127, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextJob.java -> no need to non-Javadoc comments, please remove

Line:70, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTraceManager.java -> I think the filter should be part of the TmfTraceContext. Please move it there.

Line:267, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTraceManager.java -> xxx@xxx.xxx 2.2

Line:280, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTraceManager.java -> xxx@xxx.xxx 2.2

Line:281, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTraceManager.java -> personally I avoid one letter parameters and variables (my preference). Refactor to trace instead of t

Line:71, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextRequest.java -> Use event.getContent().toString() instead of content.getFromattedValue(). 
content.getFromattedValue() will cause NullPointerExceptions for some trace implementations. 

For example, CTF traces parsed with TMF event.getContent() returns a "root" field which doesn't a have a value (event.getContent() == null), but it has sub-fields. Sub-fields can be  accessed wit iTmfEventFields[] subFields = content.getFields();

The toString() method (i.e. event.getContent().toString()) uses the getFormattedValue() for each of the values for pretty-printing.

Line:73, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextRequest.java -> you could use fWriter.newLine(); instead

Line:75, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/commands/ExportToTextRequest.java -> please change _ to a different parameter name.

-------------------------------------
