DESCRIPTION

tmf: Introduce a scheduler for event requests

The request scheduler will increase the responsiveness of user actions.
It works with 5 slots with a specific time. It has 4 slots for foreground
requests and 1 slot for background requests, and it passes through all the
slots (foreground first and background after).

Example: if we have one foreground and one background request, the foreground
request will be executed four times more often than the background request.

Change-Id: I82dc1da60eaad92c47e015e052a69473119d7a43
Signed-off-by: Kelsie Blackwell xxx@xxx.xxx
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-07-08 21:57:49.000000000

Uploaded patch set 9.

-------------------------------------
author: Brenden Conley
date: 2013-07-08 21:57:54.000000000

Patch Set 9:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/2875/

-------------------------------------
author: Braxton Mccarthy
date: 2013-07-08 22:02:10.000000000

Patch Set 9:

Small improvements:

* use a CachedThreadPool instead of a fixed thread pool hard-coded to two threads. The scheduler now controls the requests being executed, and thus, the number of threads.

* Replaced the (previously there) use of .wait() in the TmfEventThread by a CountDownLatch. In the end it works the same, but its imo much cleaner.

-------------------------------------
author: Brenden Conley
date: 2013-07-08 22:11:36.000000000

Patch Set 9: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/2875/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2013-07-09 18:34:53.000000000

Patch Set 9: Verified+1 Code-Review+1 IP-Clean+1

Very nice work! Requests can now actually be preempted again. I also think noticed a slight throughput performance improvement when indexing a large trace.

-------------------------------------
author: Kaeden Tapia
date: 2013-07-12 17:46:41.000000000

Patch Set 9: Code-Review-1

(2 comments)

Line:149, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/request/TmfSchedulerTest.java -> I think it should assertEquals with NB_EVENTS_TRACE. Both nb could be equal but still wrong.

Line:278, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/request/TmfRequestExecutor.java -> TmfRequestExecutor.isAlone seems semantically wrong. Just by the name, I would expect it to return whether or not the executor is alone. But it's actually checking if there are tasks. Perhaps hasTasks or something like that would be better (and flipping the condition).

I also think it's simple enough to one-line it.
return (fForegroundTasks.isEmpty() && fBackgroundTasks.isEmpty());

-------------------------------------
