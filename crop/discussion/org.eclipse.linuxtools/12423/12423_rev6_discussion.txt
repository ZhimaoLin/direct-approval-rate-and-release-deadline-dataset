DESCRIPTION

TMF: Consolidate some view code into the AbstractTimeGraphView

This new view is a base view for all views using the TimeGraphCombo widget.
As a first step, the lttng2 kernel Control flow view and Resources view have
been modified to extend this abstract view.

Mostly all of the interface management code (build thread, zoom thread, signal
handling, etc) is in the base class.  Final views need only implement to code
to fill the entries' list and events.

This patch includes:
- The abstract view class that all new time graph views may extend.  The default
   weight of each sash can be set in the child view.
- A TimeGraphEntry class that can be used as is if the view does not require
  extra data of its entries
- Modification of the TimeEvent class to add a value to it.
- Added a ITimeGraphDrawingHelper interface to pass to the presentation
  providers to help them get the information they need to know where to draw
  some things (see ResourcesPresentationProvider)

It is a first step before adding new features to the time graph views.  Some
more abstraction may need to be done as well as other reorganizing of the
code.

Change-Id: I73c9f1b4bf8ec265f1b02804fa7f819bd2b8dd7a
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-05-13 18:37:44.000000000

Uploaded patch set 6.

-------------------------------------
author: Brenden Conley
date: 2013-05-13 18:37:49.000000000

Patch Set 6:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/2290/ 

-------------------------------------
author: Annalise Jimenez
date: 2013-05-13 18:40:27.000000000

Patch Set 6:

Merged with the Timegraph

And, by the way...

I, Aryana Jones, declare that I developed the attached code from scratch, without referencing any 3rd party materials except material licensed under the terms of EPL. I am authorized by École Polytechnique de Montréal to make this contribution under the terms of EPL.

-------------------------------------
author: Brenden Conley
date: 2013-05-13 18:53:16.000000000

Patch Set 6: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/2290/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-06-06 18:57:47.000000000

Patch Set 6: I would prefer that you didn't submit this

(35 inline comments)



Line:60, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesEntry.java -> Would prefer to store the quark as a member of this class and keep a getQuark method.

Line:125, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesEntry.java -> should override hasTimeEvents() to return false when the type is Type.NULL (to mimic the old behavior of TraceEntry)

Line:34, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> Ctrl-Shift-O

Line:124, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> to keep consistent naming scheme, use ControlFlowTreeLabelProvider

Line:200, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> fix wrapping

Line:224, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> fix wrapping

Line:282, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> this method should be declared before buildStatusEvents

Line:348, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> see comment in AbstractTimeGraphView, combine the two methods in one synchToTime(long time)

Line:33, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowPresentationProvider.java -> Ctrl-Shift-O

Line:72, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowPresentationProvider.java -> getEventName() has been mistakenly deleted. Also, move getStateTable() and getStateTableIndex() back here to avoid unnecessary file diff.

Line:123, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesPresentationProvider.java -> They are all TimeEvent instances in current implementation so TRANSPARENT can never be returned (it should for filler 'multiple' events)

Line:143, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesPresentationProvider.java -> There should be a case where ResourcesView_multipleStates is returned

Line:202, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesPresentationProvider.java -> fix wrapping

Line:357, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesPresentationProvider.java -> order was changed

Line:50, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/timegraph/AbstractTimeGraphView.java -> Ctrl-Shift-O

Line:528, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/timegraph/AbstractTimeGraphView.java -> should not be in 'Signal handlers' section

Line:539, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/timegraph/AbstractTimeGraphView.java -> should not be in 'Signal handlers' section

Line:574, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/timegraph/AbstractTimeGraphView.java -> Instead of computing an obscure 'selection value', we could just do all the work in one method in the subclass, for example synchToTime(long time) that would be called here in the asyncExec

Line:25, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/timegraph/Messages.java -> BarChart > TimeGraph x 5

Line:45, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowEntry.java -> Would prefer to store the quark as a member of this class and keep the getThreadQuark method.

Line:32, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> Ctrl-Shift-O

Line:164, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> Move the check as a negative check that can return before the try (to prevent extra indentation and diff change)

Line:166, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> In base code there was a distinction between TimeEvent for 'multiple state' showing with bars (TRANSPARENT), and a ResourcesEvent with no status, not showing at all (INVISIBLE). This distinction is gone now. We could still have a ResourcesEvent that extends TimeEvent even if it adds no field. But I would probably invert the base code logic so that TimeEvent = INVISIBLE and ResourcesEvent with no value = TRANSPARENT, it would make more sense...

Line:181, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> Here we want TRANSPARENT (multiple)

Line:187, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> Here we want INVISIBLE

Line:208, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> This is a special case where we want to show IRQ_ACTIVE state but we don't know the CPU (it is between two null samples)

Line:211, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> Here we want INVISIBLE

Line:233, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> This is a special case where we want to show SOFT_IRQ_ACTIVE state but we don't know the CPU (it is between two null samples)

Line:236, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> Here we want INVISIBLE

Line:5, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/timegraph/messages.properties -> BarChart > TimeGraph x5

Line:113, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/model/TimeEvent.java -> spaces around ? : operators

Line:29, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/model/TimeGraphEntry.java -> Would prefer to let this be a subclass field with a meaningful name, since it's not used by the framework or the abstract view

Line:97, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/model/TimeGraphEntry.java -> execName > name since the entry could be anything

Line:126, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/model/TimeGraphEntry.java -> should return null if hasTimeEvents() is false

Line:139, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/model/TimeGraphEntry.java -> Not necessarily a CTF trace

-------------------------------------
