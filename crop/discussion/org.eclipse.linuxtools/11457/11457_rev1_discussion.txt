DESCRIPTION

tmf: Buffer time range signals in the Statistics View

Instead of sending queries to the statistics back-end every time
a TimeRangeSynch signal is received, wait until a pre-defined
delay (default = 500 ms) passes between two subsequent signals.
This prevents sending many requests in a row when the user is
scrolling the mouse, for example.

Also removed the QUIET_TIME stuff in the Histogram, all it did
was freeze the view so that the user couldn't move the time range.
The view is now much smoother!

Thanks Matthew for the tip of using a java.util.Timer! Much cleaner
than what it could have ended like...

Change-Id: I3268b18c795fe56cfd97d267ab6ce5034e9d1ce0
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2013-03-25 22:04:06.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1774/ 

-------------------------------------
author: Brenden Conley
date: 2013-03-25 22:21:22.000000000

Patch Set 1: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1774/ : SUCCESS

-------------------------------------
author: Ricky Reeves
date: 2013-03-26 15:05:09.000000000

Patch Set 1: I would prefer that you didn't submit this

(3 inline comments)



Line:19, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/viewers/statistics/RequestProcessor.java -> I think this is nice feature to have to delay the time range signal to be sent so that we can avoid sending too many of these request in a short time (after e.g. mouse wheel). However I think this feature would be nice addition to the TmfSignalManager that takes care of broadcasting signals. We could generalise this for each signal. 

Otherwise each view might re-implement this for their needs. (see TimeGraphControl).

If it is not too easy to add this to the TmfSignalManager, at lease provide this class a utility class and generalize it so it can be used for any signal and viewer.

Line:169, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/histogram/HistogramZoom.java -> Since you removed the delay in the counter thread, there is no guarantee  that the run method is executed after the incrementMousScroll() call below. 

Moreover, the access (increment/reading) of the scroll counter variable is not thread-safe. It needs to be synchronized.

Is still necessary to have it in an own thread, since it is accessed without delay?

Another thought: If you don't want to lock the GUI for a delay period you could use a TimeTask as in the request processor.

Line:223, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/histogram/HistogramZoom.java -> variable not accessed synchronized. (see above comment)

-------------------------------------
author: Braxton Mccarthy
date: 2013-03-26 22:26:11.000000000

Patch Set 1: Abandoned

Replaced by https://git.eclipse.org/r/#/c/11502/

-------------------------------------
