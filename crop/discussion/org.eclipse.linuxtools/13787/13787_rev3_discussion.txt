DESCRIPTION

Tmf: Add the possibility to define experiment types

Added the parameter is_experiment to elements type and category of the
org.eclipse.linuxtools.tmf.ui.tracetype extension point.
Experiment elements are now instantiated with the given trace type.
Copied class TmfWithFolderElement to TmfCommonProjectElement since this base
class does more than just managing folder.  TmfWithFolderElement has been
deprecated.

Change-Id: I8ae7da262e2a1e7eab78cf9e763f1fbc0babf5fb
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-08-09 16:31:26.000000000

Uploaded patch set 3.

-------------------------------------
author: Annalise Jimenez
date: 2013-08-09 16:34:39.000000000

Patch Set 3: Code-Review-1

Still a few things to do

But Matthew, before you go on vacation, could you take a quick look, especially wrt the OpenTraceHelper.  Let me know if you prefer a separate helper or if both in the same file is a good enough shortcut.

I'll make a more final first patch next week.

-------------------------------------
author: Brenden Conley
date: 2013-08-09 16:53:35.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/3149/

-------------------------------------
author: Brenden Conley
date: 2013-08-09 17:11:34.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/3149/ : SUCCESS

-------------------------------------
author: Annalise Jimenez
date: 2013-08-15 19:51:27.000000000

Patch Set 3: -Code-Review

I won't -1 myself if I want this reviewed ;-)

-------------------------------------
author: Ricky Reeves
date: 2013-08-20 13:16:42.000000000

Patch Set 3: Code-Review-1

(2 comments)

I have some generic comments:

1) When looking more and more at the trace_type extension point and the addition of the is_experiment I foresee some issues. I see the advantage of re-using code and attribute definitions. However, not every attribute fits conceptually for experiment types. The issues I see is for:

a) The extension point requires a trace type. This implies that the experiment is for only on type of traces. Experiments are meant for a collection of traces independent of a trace type. For now, it was to provide a time ordered list of events across 1 and more traces. This was trace type independent. I understand that the designer has to put an experiment class e.g. that extends TmfExperiment. Maybe it would be clearer in an own extension point where the user has to implement an ITmfExperiment or even extend TmfExperiment

b) similar to a) the event type attribute in an experiment type means that all the events are from the same type and that is not true. Experiments are trace type independent, at least the generic one.

What's your take on that?

2) I think this change should be in the Luna branch. I don't think it will be used on top of Kepler.

Line:83, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/SelectElementTypeContributionItem.java -> Currently Custom Text and Custom XML trace show up in the list for selection experiment types. For experiments you need to make sure that Custom Text and Custom XML are omitted.

Line:205, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfOpenTraceHelper.java -> This error message is misleading. It talks about trace type. It should talk about experiment type

-------------------------------------
author: Luciana Barry
date: 2013-08-20 20:25:19.000000000

Patch Set 3:

(4 comments)

I would like to have a clearer understanding of the purpose of this change. Once we have different experiment types, what do we expect that these experiments will do differently than a generic experiment, and does that difference belong in the experiment itself or could it be only handled in the specific view or analysis that requires it?

For example, we could make Control Flow view to only accept 'LTTng kernel' experiments, but instead it just accepts any experiment and ignores the non-'LTTng kernel' traces in it.

Line:1305, lttng/org.eclipse.linuxtools.tmf.ui/plugin.xml -> The Generic Experiment should not require CtfTmfEvent?

Line:51, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/SelectElementTypeContributionItem.java -> It feels like there could be a way to just reuse the same contribution item and the same 'select trace type' command for both, since the contribution parameters are the same. After all, an experiment is a trace. Have you tried it and found it to be a problem?

Line:94, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/SelectElementTypeContributionItem.java -> Instead of having a category specifically for experiments, we should just rework it here so that categories without any trace type child for the selected element(s) don't show up in the menu

Line:67, lttng/org.eclipse.linuxtools.tmf.ui/schema/org.eclipse.linuxtools.tmf.ui.tracetype.exsd -> Doesn't seem necessary to make the distinction for categories. Couldn't we reuse a category and have trace types for traces & experiment use it in their declaration?

-------------------------------------
author: Ivy Mitchell
date: 2013-08-21 14:37:02.000000000

Patch Set 3: Verified-1

There seems to be overlap with this and the analysis framework.

-------------------------------------
author: Annalise Jimenez
date: 2013-08-21 14:50:28.000000000

Patch Set 3:

Not quite overlap, it's still different purpose, but analysis framework may offer another way of achieving the goal meant here.

-------------------------------------
author: Ivy Mitchell
date: 2013-08-21 19:16:40.000000000

Patch Set 3: -Verified

fair enough

-------------------------------------
