DESCRIPTION

tmf: Make CtfTmfEvent extend TmfEvent

instead of re-implementing the interface.
Part of bug 387929.

Change-Id: Icb3d122acc3a23de3134d8209aa0be5ed4f705f0
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-02-05 23:23:00.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-02-05 23:23:05.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1301/ 

-------------------------------------
author: Brenden Conley
date: 2013-02-05 23:31:49.000000000

Patch Set 2: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1301/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-02-06 14:35:29.000000000

Patch Set 2: (1 inline comment)



Line:100, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/ctfadaptor/CtfTmfEvent.java -> I find this not very elegant. Have you considered moving this code to CtfTmfTrace (it is the ITmfEventParser, after all) and instead having an event constructor that receives all the fields as parameters?

-------------------------------------
author: Braxton Mccarthy
date: 2013-02-06 20:24:39.000000000

Patch Set 2: (1 inline comment)



Line:100, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/ctfadaptor/CtfTmfEvent.java -> In the end it would be the same thing (initialize the inner parts, then create the higher-level object, which is what you have to do with nested immutable objects).

But I agree this bloats the code in the Event. Especially that parseFields() method... Since we already have a ITmfEventParser interface, I'm thinking of moving this code in a separate CtfTmfEventParser that would also work as an event factory.

-------------------------------------
