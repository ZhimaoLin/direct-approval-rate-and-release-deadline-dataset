DESCRIPTION

tmf: Make CtfTmfEvent extend TmfEvent

instead of re-implementing the interface.
Part of bug 387929.

For clarity's sake, moved all the instantiation-related code
into a new CtfTmfEventFactory.

Change-Id: Icb3d122acc3a23de3134d8209aa0be5ed4f705f0
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-02-06 22:30:52.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2013-02-06 22:30:57.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1312/ 

-------------------------------------
author: Braxton Mccarthy
date: 2013-02-06 22:32:52.000000000

Patch Set 3:

In the end I left CtfTmfTrace do the ITmfEventParser job, and just created a separate CtfTmfEventFactory.

Now it feels so... clean!

-------------------------------------
author: Brenden Conley
date: 2013-02-06 22:39:41.000000000

Patch Set 3: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1312/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-02-07 14:48:59.000000000

Patch Set 3: (2 inline comments)



Line:40, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/ctfadaptor/CtfTmfEventFactory.java -> It works, but it's a bit strange to have an abstract class which declares that it implements an interface, but does not really implement it, leaving it to the subclasses when no such subclass exists, and that only has static methods.

I would have expected the code to migrate to CtfTmfTrace, with non-static methods (except getNullEvent) and no need to pass the trace as parameter.

Line:96, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/ctfadaptor/CtfTmfEventFactory.java -> Perhaps just declare a static constant directly in CtfTmfEvent class e.g. CtfTmfEvent.NULL ?

-------------------------------------
author: Braxton Mccarthy
date: 2013-02-07 15:59:34.000000000

Patch Set 3: (2 inline comments)



Line:40, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/ctfadaptor/CtfTmfEventFactory.java -> Oh, good catch, I forgot to remove this when I ended up moving the code back into CtfTmfTrace.

I kind of like having it separate. CtfTmfTrace is getting quite big: it already does the ITmfTrace AND the ITmfEventParserStuff.

Line:96, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/ctfadaptor/CtfTmfEventFactory.java -> Yep, another good catch ;)

It was like that before (in current master), then in the previous version of this patch I changed it to this singleton "factory", because it was called by the CtfTmfEvent constructor (and you can't do new CtfTmfEvent() during a constructor...)

If this code lives in a separate class, we can indeed define it statically.

-------------------------------------
