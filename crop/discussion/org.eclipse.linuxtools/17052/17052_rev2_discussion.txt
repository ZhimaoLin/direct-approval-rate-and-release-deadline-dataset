DESCRIPTION

tmf: Merge TmfDataProvider and TmfEventProvider together

Initially, there was a plan to support "traces" that had no timestamps,
and this would be handled by a DataProvider. Turns out the whole
framework requires some sort of timestamp nowadays, so this distinction
is no longer necessary.

(If a trace really does not have any timestamp, they could just use the
event rank as a sort of dummy timestamp, which is quite intuitive anyway).

This also merges Tmf{Data|Event}Request and TmfCoalesced{Data|Event}Request.

Change-Id: I734bb297d252d56902e1eb0534669b0d4088d911
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-10-30 20:51:57.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-10-30 20:52:04.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3804/

-------------------------------------
author: Brenden Conley
date: 2013-10-30 21:38:14.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3804/ : SUCCESS

-------------------------------------
author: Ricky Reeves
date: 2013-10-31 14:53:20.000000000

Patch Set 2:

I think from design point of view it makes sense to keep a base class (Data Provider). There could be other classes extending TmfDataProvider.

-------------------------------------
author: Braxton Mccarthy
date: 2013-11-05 19:01:59.000000000

Patch Set 2:

> I think from design point of view it makes sense to keep a base class

It would make sense, if TmfData still existed. But, as mentioned in the commit message, that class doesn't exist anymore. So we have TmfDataProvider, TmfDataRequest, and TmfCoalescedDataRequest, which are now basically cruft. ~1500 lines of cruft that can be safely removed. Isn't that tempting? ;)

However, Patrick was concerned that the performance of a TmfDataRequest would be lower vs. a TmfEventRequest with Timerange = ETERNITY, because TmfEventRequest also checks the borders of the timerange at every event[1]. I tried to address this with https://git.eclipse.org/r/#/c/17981/ (where now a TmfEventRequest with Eternity time range should behave almost like the old TmfDataRequest. Just like one extra vtable lookup. Teh horror!)

[1] This made me realize, requests still assume that events can be in non-chronological order. I know this academic use case really fascinates some people, but we have many components already that depend on time-ordered event, notably the state system. If we made this assumption in the event requests too, we could probably increase their performance non-negligibly!

-------------------------------------
