DESCRIPTION

lttng: Cleanup the state system tests

Only xxx@xxx.xxx (not the -Class variants), and make it more
clear which class is responsible for which resources. Also, dispose
resources more aggressively in StateSystemAnalysisModule's close().

Change-Id: Ic1e2d0b7edbdac5eec250bd2d4a6cbacc9181843
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2014-09-18 20:34:06.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/9010/

-------------------------------------
author: Brenden Conley
date: 2014-09-18 21:11:31.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/9010/ : SUCCESS

-------------------------------------
author: Kaeden Tapia
date: 2014-09-19 16:58:10.000000000

Patch Set 3: Verified-1 Code-Review-1

(2 comments)

Line:55, lttng/org.eclipse.linuxtools.lttng2.kernel.core.tests/src/org/eclipse/linuxtools/lttng2/kernel/core/tests/stateprovider/StateSystemInMemoryTest.java -> I get a NPE here when I don't the traces downloaded. Also in the other tests that were modified.

Line:221, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> cancel is already getting called in super.dispose();

-------------------------------------
author: Braxton Mccarthy
date: 2014-09-19 19:33:51.000000000

Patch Set 3:

(2 comments)

Line:55, lttng/org.eclipse.linuxtools.lttng2.kernel.core.tests/src/org/eclipse/linuxtools/lttng2/kernel/core/tests/stateprovider/StateSystemInMemoryTest.java -> > I get a NPE here when I don't the traces downloaded

Do you get an NPE when you don't the verb? xD

Good catch! I assumed that if the @Before does not complete because the assume() stops it, it would not not run xxx@xxx.xxx at all, but that is not the case.

Line:221, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> It calls cancel(), not canceling(), which is not the same thing. The fact that there are two separate methods is a problem in itself... I suggest we merge everything into one big teleport() method :P

-------------------------------------
author: Kaeden Tapia
date: 2014-09-19 20:09:37.000000000

Patch Set 3: -Verified

(1 comment)

Line:221, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> Yes, I mean.. why do you need to call canceling then? cancel will end up calling canceling, no? If you think that's not the case, could you explain why?

-------------------------------------
author: Braxton Mccarthy
date: 2014-09-19 20:30:49.000000000

Patch Set 3:

(1 comment)

Line:221, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemAnalysisModule.java -> Nope, cancel() does not call canceling(), from what I see. In this particular case, canceling() is used to stop any ongoing event request, while cancel() cancels the execution of the analysis completely.

The names are quite confusing, and I agree it would make sense for the big red CANCEL_EVERYTHING method to itself cancel all the little jobs running underneath. But in this case it seems it doesn't. Should it?

Genevi√®ve, could you chime on this?

-------------------------------------
