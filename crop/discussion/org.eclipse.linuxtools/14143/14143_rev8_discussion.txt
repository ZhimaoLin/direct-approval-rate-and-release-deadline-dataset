DESCRIPTION

tmf : introducing the mipmap

adding MipMapProvider abstact class, CtfMipMapProvider and tests

Change-Id: Idfde25a4cc622db35c5e9bb8a3f88bc89285a6b4
Signed-off-by: Liana Berg xxx@xxx.xxx


COMMENTS

author: Liana Berg
date: 2013-08-12 20:07:11.000000000

Uploaded patch set 8.

-------------------------------------
author: Brenden Conley
date: 2013-08-12 20:07:35.000000000

Patch Set 8:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/3163/

-------------------------------------
author: Brenden Conley
date: 2013-08-12 20:26:24.000000000

Patch Set 8: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/3163/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-08-14 22:15:28.000000000

Patch Set 8: Code-Review-1

(26 comments)

General comment:

The optional use of 'mipmap' attributes in the state system should be built-in, in the similar way that it was done for 'stack' attributes.

That is, in the ITmfStateSystemBuilder there should be methods similar to pushAttribute/popAttribute, where you specify the state value, time, mipmap range, and which mipmap feature (min/max/avg, perhaps as a bitmap). Or you separately store the normal value, then call a method for each mipmap update (min/max/avg).

Then in the ITmfStateSystem there would be queries for the mipmap min/max/avg of an attribute for a specified range.

It would perhaps be cleaner/clearer if the mipmap attributes were all sub-attributes of the normal value attributes, like for 'stack' attributes, where the sub-attributes are called "1","2","3",etc...

It should only do the processing and storage for the mipmap feature min/max/avg that you specify, instead of building all three by default.

Line:43, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> Why LTTNG? This could be used for any state system.

Line:84, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> It's common to use 'avg' for average.

Line:104, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> extra when

Line:105, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> receive

Line:106, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> update

Line:107, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> will > to

Line:109, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> Does it need to be a TmfTrace? Could it be ITmfTrace?

Line:123, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> Do we need this constructor? We should always expect the user to provide a state system ID.

Line:146, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> Not necessarily a TmfEvent, anyways ITmfEvent has getTimestamp().

Line:150, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> getEventMap() seems to require that the subclass overrides eventHandle() to first store the map in some variable that later gets read by getEventMap() without any parameters, in super.eventHandle(). Is this thread-safe? It's a bit odd, it would seem cleaner to pass the event as a parameter and compute the map at that time.

Line:171, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> index is a quark, clearer to call it that (same comment applies to most methods below)

Line:173, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> seems like an unnecessary check, you are verifying that a quark given by the state system is valid

Line:180, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> first

Line:202, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> Can this happen? Seems like you don't get here if the attribute is not a INT or LONG

Line:213, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> why not just use value?

Line:227, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> Not sure that integer value -2 couldn't be used in the state system. Wouldn't it be better to initialize with Null state (which I think the state system does automatically)

Line:231, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> will this add -2 to the sum the first time?

Line:275, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> first

Line:388, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> Since the state intervals can have any duration, I'm not sure of the usefulness of having an average based on a fixed count of interval values. It would seem more useful if it was a weighted average that takes the duration into consideration.

Line:396, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> is this adding to the current value, the value of null (-1) then incrementing by 1? that is the same as just using the current value... or does it just catch an exception when you try to add null?

Line:435, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> Conversion from int/long to String back to int/long, there must be a better way...

Line:462, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> his > its

Line:489, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> This needs a much better explanation... Not sure 'range' is the right term to use.

Line:215, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/ITmfStateSystem.java -> I'm not sure we need this method. Usually you only query the state system using a quark that was returned by one of the getQuark... methods. If you use a random value, you could get an AttributeNotFoundException. You shouldn't have to validate the quark first.

Line:49, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/ctfadaptor/CtfMipMapProviderTest.java -> INTER(E)STING

Line:502, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/ctfadaptor/CtfMipMapProviderTest.java -> All the methods below are how to 'read' the data stored in the mipmap. I don't think we should expect every user to rewrite this code, it should be implemented in the ITmfStateSystem.

-------------------------------------
author: Ivy Mitchell
date: 2013-08-20 15:48:05.000000000

Patch Set 8:

(1 comment)

Line:489, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/MipMapProvider.java -> resolution maybe?

-------------------------------------
