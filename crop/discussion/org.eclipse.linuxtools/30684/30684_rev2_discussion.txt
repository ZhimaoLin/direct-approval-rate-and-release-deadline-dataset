DESCRIPTION

tmf: make event synchronization work with non-ctf traces

Change-Id: Idba2722d814a2ff8df434ec8e7c192a93480094d
Signed-off-by: Ivy Mitchell xxx@xxx.xxx


COMMENTS

author: Ivy Mitchell
date: 2014-07-29 17:22:08.000000000

Uploaded patch set 2.

-------------------------------------
author: Ivy Mitchell
date: 2014-07-29 17:38:17.000000000

Topic set to Offsetting

-------------------------------------
author: Brenden Conley
date: 2014-07-29 17:47:13.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/7985/

-------------------------------------
author: Brenden Conley
date: 2014-07-29 17:59:34.000000000

Patch Set 2: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/7985/ : FAILURE

-------------------------------------
author: Luciana Barry
date: 2014-07-29 21:02:29.000000000

Patch Set 2: Code-Review-2

(2 comments)

Line:268, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/event/TmfEvent.java -> If the event is a subclass of TmfEvent, it loses its type and all additional fields!

Line:24, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/event/ITimeshiftedTmfEvent.java -> Should probably be Timeshiftable instead of Timeshifted, but I think there's a showstopping problem with this interface.

-------------------------------------
author: Annalise Jimenez
date: 2014-07-29 21:20:55.000000000

Patch Set 2: Code-Review-1

(1 comment)

Line:627, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> The cleaner way to do this would be to use the createTimestamp() method of the trace. That may require changing the parseEvent method, or adding the timestamp transform or the trace to the context. But as Patrick mentioned, I'm not sure about he TimeshiftedTmfEvent, sounds more like a hack.

-------------------------------------
author: Luciana Barry
date: 2014-07-30 19:28:30.000000000

Patch Set 2:

(2 comments)

Line:627, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> Have we painted ourselves in a corner with our design (making things immutable and final)? Theoretically an ITmfTrace can be of any type, creating any kind of ITmfEvent which can have any kind of ITmfTimestamp. Would it not be better if the timestamp transform function could just go inside the timestamp instance and change its value? The method createTimestamp() could do the job but many, many extensions don't use it in their getNext() or parseEvent() (not even TmfTrace) and if a different ITmfTimestamp class is used, the default method in TmfTrace needs to be overriden or else you lose the timestamp type. In conclusion, it seems like timestamp transform only works if the ITmfTrace subclass is coded with it in mind. So actually, even having a mutable timestamp would not help if the ITmfTrace subclass isn't coded to use the transform on the generated timestamps (assuming it overrides getNext()).

Line:868, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> It should be noted that this method creates a timestamp which is using the seconds scale...

-------------------------------------
author: Ivy Mitchell
date: 2014-07-30 20:36:51.000000000

Abandoned

new solution proposed

-------------------------------------
