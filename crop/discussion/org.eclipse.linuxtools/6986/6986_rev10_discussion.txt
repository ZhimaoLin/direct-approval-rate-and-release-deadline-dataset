DESCRIPTION

tmf: Make TmfStatisticsViewer use the trace's stats provider

Rework the TmfStatisticsViewer to get its information from a
ITmfStatistics object (instead of doing direct event queries
on the trace). That way, the logic to compute the statistics
is now separate from the view, which I think is a good thing.

This removes the need for the ITmfExtraInfo completely. Unit
tests have also been updated to take account for the fact that
the view does not 'count' anymore, it just displays whatever
we send it.

Fixes bug 387634.

Change-Id: I1e6b9931007c79cce8c1c93c6c0ddc955cbd0a93
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2012-10-09 20:33:23.000000000

Uploaded patch set 10.

-------------------------------------
author: Brenden Conley
date: 2012-10-09 20:33:28.000000000

Patch Set 10:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/315/ 

-------------------------------------
author: Braxton Mccarthy
date: 2012-10-09 20:37:35.000000000

Patch Set 10:

Reworked version to avoid re-newing dummy TmfEvent's all the time. The increment() methods in the BaseStatisticsTree have been replaced with straight setters, since all the counting should now happen in the backend.

Next I will try to update the prototype example to show how we can extend the stats view with this new paradigm.

-------------------------------------
author: Brenden Conley
date: 2012-10-09 20:52:03.000000000

Patch Set 10: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/315/ : SUCCESS

-------------------------------------
author: Ivy Mitchell
date: 2012-10-09 21:01:13.000000000

Patch Set 10: Verified; Looks good to me, but someone else must approve; IP review completed

Please read: 
The trace I tested with was 21MB large, 
The state history is 40MB
the statistics are 27MB
Do we want this? If yes then +2 this patch is great and fast.

-------------------------------------
author: Braxton Mccarthy
date: 2012-10-11 17:54:28.000000000

Patch Set 10: I would prefer that you didn't submit this

@Matthew: yes, it's expected for now. The statistics are a good contender for using a partial history, when it's implemented. This will reduce the size of that state file by a good amount, and also probably the time required to build it.

I'm still working on an example that extends the new statistics viewer, to identify which parts need to be made protected and whatnot. It's really not trivial, since we completely changed the logic of how the stats work (the view shouldn't increment anymore, it only receives the final counts).

-------------------------------------
