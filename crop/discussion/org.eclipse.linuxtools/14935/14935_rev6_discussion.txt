DESCRIPTION

TMF: Introduce a framework to hook trace analysis modules/plugins

* Add a new extension point to define trace analysis modules
* Add new interface IAnalysisModule and abstract class
  TmfAbstractAnalysisModule to implement the analysis itself
* TmfAnalysisManager is the main class to obtain which analysis are available
  to a trace.
* IAnalysisOutput interface describe the different outputs the analysis can
  provide.  Objects of classes implementing this interface can register to an
  analysis module.
* On the UI side, analysis and their provided outputs (if any) are now children
  of the trace and can be directly opened.
* Unit tests in tmf.core and tmf.ui provide stub analysis

Change-Id: Ie0d0fa9b726555b6416829c1c49e44301297d11b
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-08-23 13:56:51.000000000

Uploaded patch set 6.

-------------------------------------
author: Brenden Conley
date: 2013-08-23 13:56:56.000000000

Patch Set 6:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/3259/

-------------------------------------
author: Brenden Conley
date: 2013-08-23 14:27:08.000000000

Patch Set 6: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/3259/ : SUCCESS

-------------------------------------
author: Annalise Jimenez
date: 2013-08-28 15:34:39.000000000

Patch Set 6:

A question I postponed for later, but later is now...:

Should the trace own its analysis?  That would mean one instance of analysis/analysis type/trace (not all analysis, just those requested to be executed).  If not who should own it?

Right now, the analysis manager owns the analysis and there is 1 instance of analysis/analysis type.

-------------------------------------
