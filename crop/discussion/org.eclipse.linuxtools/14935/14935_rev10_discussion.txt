DESCRIPTION

TMF: Introduce a framework to hook trace analysis modules/plugins

* Add a new extension point to define trace analysis modules.
* Add new interface IAnalysisModule and abstract class
  TmfAbstractAnalysisModule to implement the analysis itself.
* TmfAnalysisManager is the main class to obtain which analysis are available
  to a trace.
* IAnalysisOutput interface describe the different outputs the analysis can
  provide.  Objects of classes implementing this interface can register to an
  analysis module.
* The IAnalysisParameterProvider allows other parts of the system to set an
  analysis' parameters.
* Analysis are executed as Eclipse jobs.
* On the UI side, analysis and their provided outputs (if any) are now children
  of the trace and can be directly opened.
* Unit tests in tmf.core and tmf.ui provide stub analysis.

Change-Id: Ie0d0fa9b726555b6416829c1c49e44301297d11b
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-09-23 13:54:26.000000000

Uploaded patch set 10.

-------------------------------------
author: Brenden Conley
date: 2013-09-23 13:54:32.000000000

Patch Set 10:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3533/

-------------------------------------
author: Brenden Conley
date: 2013-09-23 14:22:56.000000000

Patch Set 10: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3533/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-09-27 15:35:54.000000000

Patch Set 10:

(32 comments)

I have not checked if any of those comments don't apply anymore to the latest patch set.

Line:170, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> Function(n)alities

Line:777, lttng/org.eclipse.linuxtools.tmf.ui/plugin.xml -> copy&paste error?

Line:779, lttng/org.eclipse.linuxtools.tmf.ui/plugin.xml -> copy&paste error?

Line:1378, lttng/org.eclipse.linuxtools.tmf.ui/plugin.xml -> I believe this won't do anything unless you also update TmfEditorLinkHelper?

Line:159, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisType.java -> unnecessary method layer...

Line:34, lttng/org.eclipse.linuxtools.tmf.ui.tests/widgetStubs/org/eclipse/linuxtools/tmf/ui/tests/stubs/analysis/TestAnalysisUi.java -> Might need to override appliesToTraceType() to return true for test traces if the default is changed to false...

Line:29, lttng/org.eclipse.linuxtools.tmf.ui.tests/plugin.xml -> The Test Analysis View is the SDView? or is this a copy&paste error?

Line:34, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAction.java -> Remove me. Please.

Line:628, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfTraceElement.java -> Would there be a way for TmfTraceType to hide all the custom trace specifics from the outside world? It seems like there are some TraceTypeHelper sometimes created which would have the correct trace class. Maybe just need to have getTraceType handle those special trace type id's (if it doesn't break anything else)

Line:651, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfTraceElement.java -> couldn't we use fResource.getFullPath() in all cases?

Line:56, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisOutputHandler.java -> a trace > an analysis output

Line:321, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> If I understand correctly, there is only one instance of each module for the whole application. So couldn't opening two traces of the same type cause the second one to steal the module from the first one? The abstract module kind of handles this but it is not synchronized.
Is it necessary to create the empty modules in advance in the analysis manager? Seems like it would be better that new instance would be created by TmfAnalysisManager.getAnalysisModules(ITmfTrace) and the manager would then assign the trace to the instance in a final way.

Line:322, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> Although the abstract analysis module does, nothing guarantees that the module's schedule() will execute the analysis in a separate Job or Thread. So rogue modules could block the UI thread.

Line:15, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/messages.properties -> TmfAnalysisViewOutput_...
(the prefix is usually the class where it's used). Also group it with the last one below

Line:37, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/messages.properties -> TmfAnalysisViewOutput_ErrorTitle?

Line:129, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> Cannot synchronize on a Boolean! There are only two Boolean instances in the whole JVM, TRUE and FALSE. Every such synchronization (across all applications) would be synchronizing on the same instances, and when the value of fToBeExecuted is changed, the synchronization from TRUE wouldn't block execution on FALSE and vice-versa. It's recommended to always synchronize on final objects.

Line:232, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> Should return false by default, or stay abstract?

Line:425, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> The 'Eclipse' way to do this is to use NLS.bind() where the parameter to insert is indicated with a {0} in the message string.

Line:491, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> Did you want to also store it in fBundle here? Right now fBundle is always null.

Line:73, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/analysis/TmfAnalysisViewOutput.java -> I'm guessing that if you open the output under a trace's analysis, you'd want that view to be pinned to that trace and not synchronized to the active trace. Maybe that can wait for framework support for pinning views though.

Line:90, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfNavigatorContentProvider.java -> weak comment: another name than folder would be more appropriate...

Line:321, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfNavigatorContentProvider.java -> spaces around :

Line:343, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfNavigatorContentProvider.java -> view > output

Line:18, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/signal/TmfStartAnalysisSignal.java -> Should this say 'has started'?

Line:23, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/signal/TmfStartAnalysisSignal.java -> What is the purpose of the signal? It is broadcasted but never received.

Line:26, lttng/org.eclipse.linuxtools.tmf.core.tests/stubs/org/eclipse/linuxtools/tmf/tests/stubs/analysis/TestCtfAnalysis.java -> Could we have a more restrictive check so that it only applies to test traces (otherwise it pollutes all CTF traces in a development workspace)

Line:36, lttng/org.eclipse.linuxtools.tmf.core.tests/stubs/org/eclipse/linuxtools/tmf/tests/stubs/analysis/TestAnalysis.java -> Might need to override appliesToTraceType() to return true for test traces if the default is changed to false...

Line:9, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> new analysis module(s).
function(n)alities

Line:139, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> a few trailing spaces in the file...

Line:172, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> zombo.com

Line:78, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisElement.java -> Are outputs supposed to be registered to a module only when the analysis is completed? If so, then we should be getting the module instance that is specific to this element/trace. Otherwise you analyze one trace and its outputs shows up under all traces of the same class, or am I getting this wrong?

Line:152, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfNavigatorLabelProvider.java -> I think we need a null check on the return value of getBundle() otherwise loadIcon() will throw an exception

-------------------------------------
author: Annalise Jimenez
date: 2013-09-27 18:35:54.000000000

Patch Set 10:

(6 comments)

Some answers to Patrick's comments.

Line:29, lttng/org.eclipse.linuxtools.tmf.ui.tests/plugin.xml -> I just need any view, that copy-pasted one will do ;-)

Line:628, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfTraceElement.java -> Indeed, it would be good to hide the custom trace stuff.  This is not the only place where I had to add that kind of ifs (see experiment type).  But I'll leave this for another patch, as it would add yet another thing to this already big patch.

Line:321, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> That's one priority TODO.  Is that ok if I leave it for a later patch.  At least it works adequately for now and modules can start using the api.

Line:322, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> Indeed, what would you suggest here?  Would it be preferable to run this method in its own thread?  Then the IStatus wouldn't matter...

Line:26, lttng/org.eclipse.linuxtools.tmf.core.tests/stubs/org/eclipse/linuxtools/tmf/tests/stubs/analysis/TestCtfAnalysis.java -> Unfortunately no, there is no way to know if a trace is a test trace or not.  But what could be done is for test ctf traces, there could be a CtfTmfTraceStub class and traces would have that type, then the check could be more restrictive...

Line:78, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisElement.java -> Outputs are available for one (or more) analysis, the analysis -> outputs hierarchy is the same for all traces of a same type.

For now it just works, but later, analysis and outputs should have their own views instead of being seen in the project explorer view.  And view pinning can be made available etc.

-------------------------------------
author: Luciana Barry
date: 2013-09-27 21:20:20.000000000

Patch Set 10:

(6 comments)

Just replying to replies, haven't looked at new patch sets yet, sorry ;)

Line:628, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfTraceElement.java -> OK

Line:321, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> OK. But perhaps it would be safer to call cancel() on the module here instead of relying on setTrace() to do it?

Line:322, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> Perhaps the TmfAnalysisManager could take care of the Job handling that is currently done by execute() in the abstract analysis module? This would ensure consistent progress reporting no matter how the module implements its execution.

Line:26, lttng/org.eclipse.linuxtools.tmf.core.tests/stubs/org/eclipse/linuxtools/tmf/tests/stubs/analysis/TestCtfAnalysis.java -> Yes, that is what I had in mind

Line:57, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisElement.java -> Is it a mistake to assume that all outputs are views?

Line:78, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisElement.java -> For the only output I see in TestAnalysisUi, it is registered in the analysis module constructor. I would have expected that the output is registered by the module once the analysis is complete, and only then the child outputs appear under the module? But then it is too late, the child of a module are only computed once at construction.
Is this too restrictive? What if instead of views, the outputs are a set of files that may or may not be there depending on the result of the analysis? Then I guess we would have a UI command to execute an analysis, instead of having the opening of the (potential) output triggering the execution.

-------------------------------------
