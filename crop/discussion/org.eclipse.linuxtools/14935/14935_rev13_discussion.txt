DESCRIPTION

TMF: Introduce a framework to hook trace analysis modules/plugins

* Add a new extension point to define trace analysis modules.
* Add new interface IAnalysisModule and abstract class
  TmfAbstractAnalysisModule to implement the analysis itself.
* TmfAnalysisManager is the main class to obtain which analysis are available
  to a trace.
* IAnalysisOutput interface describe the different outputs the analysis can
  provide.  Objects of classes implementing this interface can register to an
  analysis module.
* The IAnalysisParameterProvider allows other parts of the system to set an
  analysis' parameters.
* Analysis are executed as Eclipse jobs.
* On the UI side, analysis and their provided outputs (if any) are now children
  of the trace and can be directly opened.
* Unit tests in tmf.core and tmf.ui provide stub analysis.

Change-Id: Ie0d0fa9b726555b6416829c1c49e44301297d11b
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-09-27 19:28:18.000000000

Uploaded patch set 13.

-------------------------------------
author: Brenden Conley
date: 2013-09-27 19:46:17.000000000

Patch Set 13:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3568/

-------------------------------------
author: Brenden Conley
date: 2013-09-27 20:23:22.000000000

Patch Set 13: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3568/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2013-10-02 19:38:51.000000000

Patch Set 13: Code-Review-1

(2 comments)

See new comments on patch set 8, plus the ones here. Almost there!

However, there are still some outstanding higher-level issues:
- Analyses should be long to the trace, instead of having only one "static" analysis to whom we say "ok this is your trace now. No wait, the user double-clicked elsewhere, *this* is your current trace". That feels very LTTV-ish, and not in a good way ;)
- We might take a look at the UI part. Does the user really care about the list of analyses? We could only display the available views under the trace, and build the required analyses on-demand. The user doesn't care how it's handled internally. Or maybe overhaul the project view altogether...

Second point is more long-term and could be fixed later after this first implementation is merged. But the first point is a bit more important... I'd prefer to get that fixed/discussed before we finally get it in.

Line:172, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> if you are synchronizing whole methods on the same object, you might as well use the class's monitor, by using the synchronized keyword in the method signature (public synchronized void ...)

This avoids extra sync objects (and saves one level of indentation!)

Line:27, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisParamProvider.java -> Field should remain private, you can add a protected getter is it's needed

-------------------------------------
author: Luciana Barry
date: 2013-10-02 20:16:37.000000000

Patch Set 13: Code-Review-1

(2 comments)

In addition to Alexandre's concerns, I also worry that analysis outputs are pre-determined per analysis type, and the outputs are used to trigger the analysis. It seems it should be the other way around.

It's not clear by what mechanism trace-specific information or results of an analysis are provided to the analysis output object.

Line:41, lttng/org.eclipse.linuxtools.tmf.core.tests/stubs/org/eclipse/linuxtools/tmf/tests/stubs/analysis/TestAnalysis.java -> This makes the test analysis appear under all non-experiment traces (even non-test ones).

Line:90, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfNavigatorContentProvider.java -> Now I'm sorry I made the initial comment... a project would be a TmfProjectElement... here it's just a generic element. How about 'elem'...

-------------------------------------
author: Annalise Jimenez
date: 2013-10-08 20:09:08.000000000

Patch Set 13:

Ok ok, I don't want any lttv-ish stuff in this code so I'll make the analyses belong to a trace now instead of later :p

As for Patrick's comment about who should lead the dance: analyses or outputs, I think this is also related to the UI part.  I don't have a definitive answer to this, just a few use cases to implement (xml analyses, critical path, etc).  I think we should postpone this discussion a few weeks, until those use cases are publicly available (on gerrit).  Things should be clearer by then (or not)

-------------------------------------
