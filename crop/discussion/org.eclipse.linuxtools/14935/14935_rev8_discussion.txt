DESCRIPTION

TMF: Introduce a framework to hook trace analysis modules/plugins

* Add a new extension point to define trace analysis modules.
* Add new interface IAnalysisModule and abstract class
  TmfAbstractAnalysisModule to implement the analysis itself.
* TmfAnalysisManager is the main class to obtain which analysis are available
  to a trace.
* IAnalysisOutput interface describe the different outputs the analysis can
  provide.  Objects of classes implementing this interface can register to an
  analysis module.
* The IAnalysisParameterProvider allows other parts of the system to set an
  analysis' parameters.
* Analysis are executed as Eclipse jobs.
* On the UI side, analysis and their provided outputs (if any) are now children
  of the trace and can be directly opened.
* Unit tests in tmf.core and tmf.ui provide stub analysis.

Change-Id: Ie0d0fa9b726555b6416829c1c49e44301297d11b
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-09-03 19:22:10.000000000

Uploaded patch set 8.

-------------------------------------
author: Brenden Conley
date: 2013-09-03 19:38:00.000000000

Patch Set 8:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/3349/

-------------------------------------
author: Brenden Conley
date: 2013-09-03 19:53:08.000000000

Patch Set 8: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/3349/ : SUCCESS

-------------------------------------
author: Ricky Reeves
date: 2013-09-12 12:52:36.000000000

Patch Set 8: Code-Review-1

(27 comments)

Mainly formal comments, and a couple things to fix

Line:25, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> A more detailed description on how it to be implemented would be useful since it is the main class of the analysis modules. See ITmfTrace for the trace type extension.

Line:174, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> Change first sentence to "Schedule the execution of the analysis"

What do you mean with "If trace is set"? Do you mean if trace is open? Please make it clear

Line:186, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> Use xxx@xxx.xxx IAnalysisOutput} to refer to the IAnalysisOutput interface in java doc. 

This is a general comment across all files: add xxx@xxx.xxx } annotations when and import references is done.

Line:194, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> xxx@xxx.xxx IAnalysisOutput}

Line:201, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> Add a note that this should not be called in the GUI (main) thread to avoid freezing the UI.

Line:209, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> Could we get away with just waitForCompletion(IProgressMonitor monitor);? The user always can provide a NullProgressMonitor.

Line:18, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/signal/TmfAnalysisCompletedSignal.java -> @author xxx@xxx.xxx is missing

Line:72, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/Messages.java -> This actually ends up into the generated java doc. So we should have proper java doc.

Line:26, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> white spaces

Line:82, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> ... associated with the analysis type

Line:137, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> Add example

Line:146, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> Add API info here

Line:155, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> Once we have a valid implementation in LTTng, mention it here. (not needed right now)

Line:10, lttng/org.eclipse.linuxtools.tmf.core/plugin.xml -> Maybe change name to "Trace Analysis Module"

Line:16, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/exceptions/TmfAnalysisException.java -> when an error occurs instead of when something occurs

Line:324, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfExperimentElement.java -> Does this mean that experiments can have analysis modules associated with?

Line:20, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisParamProvider.java xxx@xxx.xxx 3.0 is missing

Line:84, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> remove empty line

Line:338, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> One output could be added many times. Do we need to prevent that?

Line:380, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> This check is not sufficient because there could be traces with them same name in different tracing projects. You need to test signal.getTrace().equals(fTrace)

Line:38, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/messages.properties -> Do we need 3 different constants for "Error initializing trace"?

Line:43, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> can this be called from multiple threads? If yes then there is a concurrency issue. fAnalysisModules needs to be handle thread safe in this class.

Line:70, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> map instead of list.

Line:74, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> map instead of list

Line:88, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> map, not a list

Line:146, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> can this be called from multiple threads? If yes then there is a concurrency issue. fParameterProviders needs to be handle thread safe in this class.

Line:162, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> can this be called from multiple threads? If yes then there is a concurrency issue. fParameterProviders needs to be handle thread safe in this class.

-------------------------------------
author: Annalise Jimenez
date: 2013-09-12 17:37:42.000000000

Patch Set 8:

(2 comments)

Thanks Meredith Scott.  Here's feedback on some of your comments.  I'm working on the next patchset.

Line:324, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfExperimentElement.java -> Yes it does (I implemented it when I thought trace synchronization could fit in there, but it didn't).

It will have more sense when experiment types are available, so I think I'll just leave it out for now and wait for the experiment types for a proper implementation of experiment analysis (Mohamad's virtual machines analysis will probably use this)

Line:380, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> No I can't because if I reach this point (when fTraceName != null) the trace is null (or wrong).  Usually it is because the user clicked on an output under a trace that is not opened yet, so we schedule the analysis to be run on trace with name X, while trace X is being opened in another thread and we wait for the traceOpened signal on this trace to actually set the trace if it has the right name.

Of course, a trace with the same name opened in another project at approximately the same time (or just after if the right trace caused an error and this was never reached) would cause unwanted behavior.  That's a corner case we'll have to deal with (later?)

-------------------------------------
author: Braxton Mccarthy
date: 2013-09-13 21:20:24.000000000

Patch Set 8: Code-Review-1

(39 comments)

Line:129, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> You don't have to put runtime exceptions in method signatures. Unless there is a specific use case here?

Line:186, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> Good point. It also auto-updates if you rename the other class later on, which doesn't happen with text comments ;)

File Comment: lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/signal/TmfAnalysisCompletedSignal.java -> As we discussed, perhaps the signal should be more related to a user action (ProcessSelectedSignal, etc.). To indicate processing is finished, the CountdownLatch + waitUntilReady() approach might be cleaner, and more consistent with what the other modules in TMF do.

Line:23, lttng/org.eclipse.linuxtools.tmf.ui.tests/src/org/eclipse/linuxtools/tmf/ui/tests/project/model/AllTests.java -> alphabetical order plzthx!

Line:29, lttng/org.eclipse.linuxtools.tmf.ui.tests/plugin.xml -> why is it using SDView?

Line:35, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/analysis/TmfAnalysisViewOutput.java -> field could be final

Line:56, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/analysis/AnalysisManagerTest.java -> You could keep those paths as constants (MODULE1, MODULE2, etc.) since they are re-used

Line:94, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/analysis/AnalysisManagerTest.java -> this part could be in a xxx@xxx.xxx

Line:97, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/analysis/AnalysisManagerTest.java -> You will have to rebase this on the latest HEAD. now it's CtfTmfTestTrace (singular) and we refer to the traces by name not by index. You'll see it's much simpler ;)

Line:325, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> handle this exception? (add an error status)

Line:32, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisOutputElement.java -> field can be final

Line:29, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisHelpHandler.java -> Missing description

Line:35, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisHelpHandler.java -> field should be private (with getters/setters if needed)

Line:88, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisHelpHandler.java -> remove this empty line

Line:72, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/Messages.java -> what he said!

Line:9, lttng/org.eclipse.linuxtools.tmf.core/schema/org.eclipse.linuxtools.tmf.core.analysis.exsd -> do eet!

Line:61, lttng/org.eclipse.linuxtools.tmf.ui.tests/src/org/eclipse/linuxtools/tmf/ui/tests/project/model/ProjectModelAnalysisTest.java -> Should you check if there are some files you should still delete, in case this error happens?

Line:21, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/exceptions/TmfAnalysisException.java -> xxx@xxx.xxx

Line:28, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/exceptions/TmfAnalysisException.java -> you can remove this comment block

Line:36, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisType.java -> personal preference, but it's more compact if you use /** one-line javadoc */ when there's a bunch of them and they're short.

Line:89, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisType.java -> wrap after the =, not before the .

Line:108, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisType.java -> pretty sure it's not 2.0 ;)

You can completely omit xxx@xxx.xxx annotations in the luna branch atm (the errors are disabled). We'll fix them once we merge it to master.

Line:110, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisType.java -> make it synchronized, juuust in case

Line:125, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisType.java -> You can avoid this map lookup if you iterate on the entries instead of the keys:

  for (Map.Entry<String, IConfigurationElement> entry : fAnalysisTypeAttributes.entrySet()) {
    IConfigurationElement ce = entry.getValue();

Line:145, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisType.java -> Exception should be handled.

If it should absolutely positively never happen, you can throw some type of runtime exception. If it can maybe happen, it should be logged (Activator.log*)

Line:28, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisOutputHandler.java -> xxx@xxx.xxx

Line:37, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisOutputHandler.java -> this is very copy-paste-ish from OpenAnalysisHelpHandler. Could the common stuff be moved to the abstract class?

Line:20, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisParamProvider.java -> doesn't matter though, we don't check for it in this branch

Line:92, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/analysis/AnalysisModuleTest.java -> Does this work? I tried something similar in a test recently and I had to do:
  assertTrue(status.isOK());
or else it was false. YMMV

Line:62, lttng/org.eclipse.linuxtools.tmf.ui.tests/src/org/eclipse/linuxtools/tmf/ui/tests/project/model/ProjectModelOutputTest.java -> same here, are there some files that should be deleted?

Line:46, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> any reason why trace is not final here? If the user switches to a new trace, couldn't it just create a new module object? just wondering

Line:188, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> the .contains() should probably be in the synchronized block too

Line:281, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> it works, but why not just new Job("Running analysis " + getName()) ?

Line:449, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> here could be worth using a StringBuilder

Line:34, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> does this really need to be a "Class<? extends IAnalysisParameterProvider>>" ? Can't you just use "IAnalysisParameterProvider"? So instead of tracking the types that exist, you just keep one instance per type.

The only difference I see is you would have to add a .newInstance() method in that interface (similar to what we have in ITmfStateProvider already), but it would make the code everywhere else much simpler/cleaner

Line:43, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> I'm not sure I like the fact we're creating 2-3 Lists and Maps everytime the "get" is called. Wouldn't there be a way to keep the fAnalsysiModules map always up-to-date as analyzes register, so that the get can simply return the map directly (wrapped into a Collections.unmodifiableMap of course) ?

Line:174, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> should be externalized

Line:38, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisElement.java -> field could be final

Line:75, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisElement.java xxx@xxx.xxx not needed if it's the same as the whole class.

-------------------------------------
author: Annalise Jimenez
date: 2013-09-16 17:30:45.000000000

Patch Set 8:

(8 comments)

Some replies

Line:29, lttng/org.eclipse.linuxtools.tmf.ui.tests/plugin.xml -> I didn't want/need to create a new view for this.  I could use any view actually, I just randomly copy-pasted this one.

Line:61, lttng/org.eclipse.linuxtools.tmf.ui.tests/src/org/eclipse/linuxtools/tmf/ui/tests/project/model/ProjectModelAnalysisTest.java -> ProjectModelTestData will take care of this, no more exceptions thrown

Line:37, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisOutputHandler.java -> This is very copy-paste-ish for a lot of the handlers, if not all ;-)  
Only the element type of the selection and multiple or not differ for most handlers.  I was thinking it would be a good idea to have a TmfAbstractHandler for those checks and just a checkSelection method in subclasses maybe.
That would be for another patch. 
Hey! let's open a bug report!

Line:92, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/analysis/AnalysisModuleTest.java -> What exactly did you try?  It seems to work, the test passes and if I change status.OK_STATUS to status.CANCEL_STATUS for instance, it fails as expected, so I suppose it works fine...

Line:46, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> Not in this first version.  There is 1 analysis module of each type for the whole system and the trace is set before executing.  I am still unsure how to handle all that, who the module object should belong to, etc, so I implemented it the most obvious and less intrusive way: the module manager owns the analysis.

This is a prelude for an upcoming discussion ;-)

Line:281, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> It's preferable for eventual externalisation, right?

Line:34, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> everywhere else is actually only the getParameterProviders method in this class...  And keeping the class avoids having to instantiate it when it may not be used at all, more memory saved since these classes can be as big as they want...

Line:43, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAnalysisManager.java -> Indeed, that would be preferable.  I'll add a todo and look at it when I work with the actual use case of multiple executable modules (Florian's xml analysis)

-------------------------------------
author: Braxton Mccarthy
date: 2013-10-02 19:23:42.000000000

Patch Set 8:

(3 comments)

Gerrit decided to put those comments in the old patchset... the email will probably be more informative than the web UI here.

Line:110, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisType.java -> You don't need a new object, just mark the method public static synchronized

Line:46, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> indeed, we should be having this discussion ;) it has many implications

Line:449, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> StringBuilder comment still applies

-------------------------------------
