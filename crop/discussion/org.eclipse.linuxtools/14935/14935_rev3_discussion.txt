DESCRIPTION

TMF: Introduce a framework to hook trace analysis modules/plugins

* Add a new extension point to define trace analysis modules
* Add new interface IAnalysisModule and abstract class
  TmfAbstractAnalysisModule to implement the analysis itself
* TmfAnalysisManager is the main class to obtain which analysis are available
  to a trace.
* IAnalysisOutput interface describe the different outputs the analysis can
  provide.  Objects of classes implementing this interface can register to an
  analysis module.
* On the UI side, analysis and their provided outputs (if any) are now children
  of the trace and can be directly opened.
* Unit tests in tmf.core and tmf.ui provide stub analysis

Change-Id: Ie0d0fa9b726555b6416829c1c49e44301297d11b
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-08-05 19:52:40.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2013-08-05 19:52:45.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/3105/

-------------------------------------
author: Brenden Conley
date: 2013-08-05 20:06:06.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/3105/ : SUCCESS

-------------------------------------
author: Ivy Mitchell
date: 2013-08-06 20:57:50.000000000

Patch Set 3: Code-Review-1

Description	Resource	Path	Location	Type
Javadoc: Missing comment for public declaration	TestAnalysisUi.java	/org.eclipse.linuxtools.tmf.ui.tests/widgetStubs/org/eclipse/linuxtools/tmf/ui/tests/stubs/analysis	line 25	Java Problem
TmfAnalysisElement.instantiateAnalysis() has non-API return type IAnalysisModule	TmfAnalysisElement.java	/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model	line 151	API Usage Problem
Constructor for TmfAnalysisElement with non-API parameter type IAnalysisModule	TmfAnalysisElement.java	/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model	line 50	API Usage Problem
TmfAnalysisViewOutput.outputAnalysis(IAnalysisModule) has non-API parameter type IAnalysisModule	TmfAnalysisViewOutput.java	/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/analysis	line 61	API Usage Problem
TmfAnalysisViewOutput implements non-API interface IAnalysisOutput	TmfAnalysisViewOutput.java	/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/analysis	line 31	API Usage Problem
This plug-in does not export all of its packages	MANIFEST.MF	/org.eclipse.linuxtools.tmf.core/META-INF	line 14	Plug-in Problem
Constructor for TmfAnalysisOutputElement with non-API parameter type IAnalysisOutput	TmfAnalysisOutputElement.java	/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model	line 42	API Usage Problem


Thought this could help ;)

-------------------------------------
author: Ricky Reeves
date: 2013-08-07 14:28:39.000000000

Patch Set 3: Code-Review-1

(13 comments)

Some more comments

Line:26, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> I wonder if the analysis needs to have a running state so that it will be build only once. Also, I see it necessary to have a waitUntilCompleted() method, just like request and state system. Maybe it's also important to know that a analysis was scheduled. 

Imagine scenario, that user 1) opens the trace which triggers analysis A to be executed. Then the user double-clicks on a view of the analysis A while analysis A still being build from the open trace action. How, to handle this situation?

Line:157, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/IAnalysisModule.java -> what about returning an IStatus object instead of boolean. In an IStatus object you can detailed information incl. exception about the failure case.

Line:144, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> what about returning an IStatus object instead of boolean. In an IStatus object you can detailed information incl. exception about the failure case.

Do we actually need the method executeAnalysis? Can't we get away with just execute?

Line:171, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> You should externalize the string

Line:181, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> You should externalize the string

Line:193, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> You should externalize the string

Line:205, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/analysis/TmfAbstractAnalysisModule.java -> You should externalize the string

Line:297, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/trace/TmfTrace.java -> should it return an IStatus like buildStateSystem() to inform the user in case the analysis wasn't successful? Also module.execute also returns a status and should be forwarded to the caller of executeAnalysis.

Line:154, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisElement.java -> openTrace() creates a new ITmfTrace object. If the trace was already open there are 2 ITmfTrace objects for the same trace. For each open trace there should be only one object of the ITmfTrace class. We will run into problems with coalescing of requests (coalescing of requests only works per trace). Also, I don't not sure what the TmfTraceManager would work properly if it has to manage 2 trace objects of the same trace.

Line:160, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/project/model/TmfAnalysisElement.java -> log error/display error instead of printStackTrace()

Line:76, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAction.java -> Double-click and accelerator for TmfAnalysisOutputElement not working. Change to:
boolean executeCommand = ((element instanceof TmfTraceElement) || (element instanceof TmfAnalysisOutputElement));

Line:32, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisOutputHandler.java -> why package visibility? Shouldn't it be private?
Also rename fView

Line:33, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/internal/tmf/ui/project/handlers/OpenAnalysisHandler.java -> This opens the help of the analysis not the analysis itself. Rename it to OpenAnalysisHelpHandler

-------------------------------------
