DESCRIPTION

TMF: Port the LTTng Kernel state system to an analysis module

And update the views accordingly.

Change-Id: I90975b5772db24a784d99d2d0232f6f76a8e5e03
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-12-06 14:58:20.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-12-06 14:58:49.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/4479/

-------------------------------------
author: Ricky Reeves
date: 2013-12-06 15:11:44.000000000

Patch Set 2:

> Simple rebase to master. Is it normal I don't get any
> errors on xxx@xxx.xxx Now that it's in master, 
> shouldn't those errors be back and make my project look 
> like a christmas tree again?

The API check were disabled for lttng-luna branch. After each merge master->lttng-luna we would have to change the API warnings. Now, since lttng-luna has been merged to master, the API warnings will be enabled soon again.

-------------------------------------
author: Brenden Conley
date: 2013-12-06 15:45:48.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/4479/ : SUCCESS

-------------------------------------
author: Ricky Reeves
date: 2013-12-06 16:51:11.000000000

Patch Set 2: Verified+1 Code-Review+1 IP-Clean+1

-------------------------------------
author: Braxton Mccarthy
date: 2013-12-06 20:44:09.000000000

Patch Set 2:

You can rebase it on top of https://git.eclipse.org/r/#/c/19457/ to get the API errors again. Or if this gets in first, we can fix them afterwards, it's not THAT important since it won't fail the Hudson build.

-------------------------------------
author: Annalise Jimenez
date: 2013-12-06 20:50:06.000000000

Patch Set 2: Code-Review-1

Ok, I'll rebase and merge this after the hack-a-thon (don't want to mess with the coalescing stuff and make performances worst before then)

-------------------------------------
author: Ricky Reeves
date: 2013-12-10 02:22:01.000000000

Patch Set 2: -Code-Review

The LttngKernelAnalysisModule.java is part of lttng2.kernel.ui plugin. This implies that the kernel state system cannot be built using the analysis module without the UI. It should be possible to create the Kernel State System without the UI (in e.g. a headles mode). 

Any comments?

-------------------------------------
author: Annalise Jimenez
date: 2013-12-10 14:48:57.000000000

Patch Set 2:

Thanks Meredith Scott for the comment, I also wish for the analysis to be part of the .core plug-ins for headless mode. I thought the eventual command line actually was a headless mode, but I was told that even the command line would run with the ui plug-ins.

Two [relatively minor] things prevent the analysis modules from being in the core plugins:

1- The views: if we want to register a view output to an analysis, the analysis has to be in the .ui. What could be done about it is to add an element to the analysis extension point to be able to hook an output (by id) to an analysis (by id). That would allow to define the analysis in the .core plugin and add an extension element in the .ui plugin to add the view output. Then the analysis would not need to know anything about the outputs it provides (does not need, but could).

2- The tracetype: why is the tracetype and helper part of the tmf.ui? The lttng2 kernel analysis does not need it, but Xml analysis do and because of that, those analysis need to be in the .ui plugin. Could the tracetype concept be moved to the core plugin?

As for this patch... we are far yet from the possibility of a headless TMF.  Could this stay as is and when 1- is implemented, then this analysis (and probably others to come) could be moved back to the .core plugin. Or it can wait for 1-, there is no hurry to add this to master, except as an real live example of how to use the analysis framework.

-------------------------------------
author: Ricky Reeves
date: 2013-12-10 15:25:30.000000000

Patch Set 2:

> Thanks Meredith Scott for the comment, I also wish for the analysis 
> to be part of the .core plug-ins for headless mode. I 
> thought the eventual command line actually was a headless
> mode, but I was told that even the command line would run
> with the ui plug-ins.

Great that you have the same vision.

> 1- The views: if we want to register a view output to an 
> analysis, the analysis has to be in the .ui. What could 
> be done about it is to add an element to the analysis 
> extension point to be able to hook an output (by id) to 
> an analysis (by id). That would allow to define the 
> analysis in the .core plugin and add an extension element 
> in the .ui plugin to add the view output. Then the 
> analysis would not need to know anything about the 
> outputs it provides (does not need, but could).
Yes, we need to register the views as output. We have to see how we can register to an analysis from the UI plug-in while the having the analysis in core. (I know that didn't want want another extension point for the outputs. I still have the same opinion that we should avoid it if possible). 

> 2- The tracetype: why is the tracetype and helper part of
> the tmf.ui? The lttng2 kernel analysis does not need it,
> but Xml analysis do and because of that, those analysis 
> need to be in the .ui plugin. Could the tracetype concept 
> be moved to the core plugin?

This was an decision from early days of TMF. The reason back then was that for a trace type an events table, editor and icon has to be defined. These are UI elements. 

To have a headless mode we don't want load UI plug-ins. So, I think we need to move the definition to the core plug-in. However, we need to make it as seemless as possible for the user. Not necessarily straight-forward undertaken.

I'm not opposed to merge this in since it's real-life example. However, we should not forget about the headless mode and hopefully we can make it work for Luna. 

Let's have team discussion (meeting) about this.

-------------------------------------
author: Annalise Jimenez
date: 2013-12-10 16:21:27.000000000

Patch Set 2:

I don't understand what you guys have against extension points... Besides it wouldn't be an extension point but an extension to an existing extension point (if that makes a difference ;-)  I much prefer this method than having to register the views in the activator. But we could use listeners for this maybe.  Anyway, we'll have to talk about it.

Also, I'm glad to know the tracetype may move to core. As for EventsEditor and all, I think we face here the same problem as for the analysis extension: A core concept, with necessary elements in the UI. The solution to one should inspire the other.

-------------------------------------
