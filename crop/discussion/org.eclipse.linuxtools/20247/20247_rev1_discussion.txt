DESCRIPTION

tmf: Limit the TmfStateSystemAnalysisModule to 1 state system

The building of a state system is an independant process,
(for example, if we want to build two of them, but the history
file for one of them is already built, we still must not skip
building the other one) so it makes it easier to reuse code if
there is only 1 state system per analysis module.

For workloads requiring more than one state system, which are
quite rare anyway, we can re-use the concept of sub-analysis
(one "top" analysis that has two sub-analyses building one state
system each).
Cancelling the top analysis will correctly go cancel the other
ones, once again, re-using existing functionality.

Change-Id: I1fcf20384c00b47578309451691f59fd0f438053
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2014-01-03 20:01:55.000000000

Patch Set 1: Code-Review-1

I'm not sure about this. I agree to the 1 state system per analysis module concept. But the sub-analysis thing. My thought on this was that an analysis module could "hide" the sub-analysis... They don't need to be advertised, displayed, etc. But they exist and the getStateSystems() method would return the state systems from the sub-modules, but be linked to the main analysis.

If you do not do this, then all sub-analysis modules will need to be added to some plugin.xml file and available to the TmfAnalysisManager and appear under the trace at the same level as the others (unless we add the concept of "parent" to the analysis module) OR if they are not available in the analysis manager, then their state systems won't appear in views like the state system explorer.

-------------------------------------
author: Brenden Conley
date: 2014-01-03 20:16:58.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/4903/

-------------------------------------
author: Braxton Mccarthy
date: 2014-01-03 20:40:51.000000000

Patch Set 1:

> ...all sub-analysis modules will need to [...] appear
> under the trace at the same level as the others

Yes, that was the idea, although,

> (unless we add the concept of "parent" to the analysis module)

That's a very good idea! ;) We know internally there is one "master" analysis and 2+ sub ones, but we could expose that through an API, so it actually gets shown that way in the UI.

I didn't think about the plugin.xml however. Indeed the sub-analyses will have to go in there too... hrm. That makes it a little bit more involved.

But if we don't do this... then it really becomes a pain when building an analysis that does more than 1 state system. We basically have to reimplement the whole TmfStateSystemAnalysisModule, which becomes quite big with the following patch in this series.

I think we're due for another design discussion in the design -> coding -> redesign -> recode -> redesign -> recode etc. cycle ;)

-------------------------------------
author: Brenden Conley
date: 2014-01-03 21:00:22.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/4903/ : SUCCESS

-------------------------------------
