DESCRIPTION

Avoid multiple seek to the same location.

There is multiple instance of seeking to the same location twice.
To solve this issue the seek method check if the current location is the same.
Here is the explanation:
[CtfTmfContext.java]
    public void setLocation(ITmfLocation location) {
        curLocation = (CtfLocation) location;
        if (curLocation != null) {
            getIterator().seek(curLocation.getLocationInfo());
        }
    }
GetIterator  --> will force a seek to curLocation
.seek        --> force an other seek to curLocation
Here are the called method:
    private CtfIterator getIterator() {
        return CtfIteratorManager.getIterator(fTrace, this);
    }
    public static synchronized CtfIterator getIterator(final CtfTmfTrace trace,
            final CtfTmfContext ctx) {
        return map.get(trace).getIterator(ctx);
    }
    public CtfIterator getIterator(final CtfTmfContext context) {
            [...]
            if (context.getLocation() != null) {
                final CtfLocationInfo location = (CtfLocationInfo) context.getLocation().getLocationInfo();
                retVal.seek(location);   /// FORCE SEEK!!!!!!!!!!!!
            }
Change-Id: Ib5ad6d05eb47045660c7ab5076930a30e829c7a0
Signed-off-by: Jordon Obrien xxx@xxx.xxx
Reviewed-on: https://git.eclipse.org/r/18461
Reviewed-by: Bradyn Guerra xxx@xxx.xxx
Tested-by: Brenden Conley
Reviewed-by: Tessa Dickson xxx@xxx.xxx
Reviewed-by: Ivy Mitchell xxx@xxx.xxx
IP-Clean: Ivy Mitchell xxx@xxx.xxx
Tested-by: Ivy Mitchell xxx@xxx.xxx
Reviewed-by: Braxton Mccarthy xxx@xxx.xxx
Tested-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-11-23 08:37:19.000000000

Change has been successfully cherry-picked as 7b9585cd9b362ac22bb20b0f31d939e7529ac1e6

-------------------------------------
author: Jordon Obrien
date: 2013-11-23 14:06:16.000000000

Patch Set 8:

On a long term, the semantic of the getIterator could be modify to avoid the seeking. And every use of getIterator MUST seek.

Up to now, this is quite a mix of both semantic.

And, to add a comment on the benchmarking point,... benchmarking is not enough. In this case, it's a user perception of the reponsiness of the GUI. In this case, the bug double the scroll time. This won't (probably) be visible  in a benchmark reading the trace. GUI bug like that are harder to track.

-------------------------------------
