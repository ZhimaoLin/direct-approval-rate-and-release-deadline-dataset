DESCRIPTION

Remote unified profile launcher framework.

Changed the existing API to include support to the extension point
RemoteProxyManager that will be used by the remote unified
launchers.

Change-Id: I5067001a2cc053c766d204e6518978add6fea03b


COMMENTS

author: Brenden Conley
date: 2012-12-15 16:24:55.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/800/ 

-------------------------------------
author: Brenden Conley
date: 2012-12-15 16:37:46.000000000

Patch Set 1: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/800/ : SUCCESS

-------------------------------------
author: Nathanael Holden
date: 2012-12-17 18:00:55.000000000

Patch Set 1: I would prefer that you didn't submit this

(5 inline comments)

Thanks for the contribution. I'd just like to get some additional changes pushed so that we can simplify this one.

Line:42, profiling/org.eclipse.linuxtools.profiling.launch/src/org/eclipse/linuxtools/internal/profiling/launch/provider/remote/ProviderLaunchConfigurationTabGroup.java -> It seems like we should merge the remote createTabs() method into ProfileLaunchConfigurationTabGroup eliminating the need for this class, and perhaps the RemoteProxyProfileLaunchConfigurationTabGroup. This might take a bit of work to figure out the best way to determine if a launch is local/remote.

Line:36, profiling/org.eclipse.linuxtools.profiling.launch/src/org/eclipse/linuxtools/internal/profiling/launch/provider/launch/ProviderFramework.java -> I'd just like to apply https://git.eclipse.org/r/#/c/9269/ before this in order to simplify some of the changes this patch introduces.

Line:63, profiling/org.eclipse.linuxtools.profiling.launch/src/org/eclipse/linuxtools/profiling/launch/ProfileLaunchConfigurationTabGroup.java -> You're right about this. Now that we're moving to 2.0 we can actually move these methods all into ProviderFramework. Camilo has opened up a review here : https://git.eclipse.org/r/#/c/9269/ about that. Once it gets approved, I think rebasing this against it will make things simpler.

Line:113, profiling/org.eclipse.linuxtools.profiling.launch/src/org/eclipse/linuxtools/profiling/launch/ProfileLaunchConfigurationTabGroup.java -> I don't think this change is needed. isAssignableFrom is often used when the class to which we'll be casting is unknown at compile-time. In this case we know the class, and so a regular insanceof check should be fine.

Line:11, profiling/org.eclipse.linuxtools.profiling.launch/schema/RemoteProxyManager.exsd -> I don't think the provider framework should be duplicated like this. Ideally a remote plugin could have a provider extension point with a type of "$type_remote" (eg. timing_remote). From there the underlying code would still use the proxy manager framework to determine what remote framework to use.

-------------------------------------
author: Jabari Miller
date: 2013-01-23 18:32:03.000000000

Patch Set 1: Abandoned

The changes made in the Linuxtools master, not only in the code base but in the UI as well, made this patch too hard to implement properly and with little gain. It's easier to start it over, taking into account the current UI state and code.

-------------------------------------
