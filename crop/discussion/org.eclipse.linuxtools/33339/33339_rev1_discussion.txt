DESCRIPTION

tmf: Add cycles time format and delta format in time graph

Change-Id: Iaa0e750971bf7b06a6209f7528e8c293be816d9c
Signed-off-by: Luciana Barry xxx@xxx.xxx


COMMENTS

author: Luciana Barry
date: 2014-09-12 21:27:10.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2014-09-12 21:33:32.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8945/

-------------------------------------
author: Brenden Conley
date: 2014-09-12 22:05:58.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8945/ : FAILURE

-------------------------------------
author: Brenden Conley
date: 2014-09-12 22:57:16.000000000

Patch Set 1: -Verified

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8947/

-------------------------------------
author: Brenden Conley
date: 2014-09-12 23:43:43.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8947/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2014-09-15 18:31:01.000000000

Patch Set 1: Code-Review-1

(14 comments)

some comments

Line:227, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeGraphTooltipHandler.java -> The goal of using subclasses and molyporphism is especially to avoid having to do check like these. This class shouldn't have to know if the fTimeDataProvider is a "wrapper" or not, it should just call the same method, and the behavior is deferred to the implementing class.

Perhaps convertTime() could be part of the base ITimeDataProvider interface (ITimeDataProvider2 for now?), and the provider that do not do any conversion just do a no-op on it. (A bit like the identity time synchronization transform) And here we just call .converTime() in all cases.

Line:285, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeGraphTooltipHandler.java -> same as above here

Line:353, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/Utils.java -> could use switch/case here instead (only one check, and reminds us to update if we add elements to the enum).

Line:440, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/Utils.java -> too bad we can't use Java 8's Time API yet :( It does things exactly like this for you.

Line:15, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/ITimeDataProviderWrapper.java -> remove one empty line

Line:21, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/ITimeDataProviderWrapper.java -> Is this meant to be a temporary addition to be folded into ITimeDataProvider the next time we bump the API?

If so, it should be called ITimeDataProvider2 to indicate it clearly.

If not, it could be called IConvertibleTimeDataProvider (or ITimeDataProviderConverter, or whatever), which is more meaningful than -Wrapper?

Line:30, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/ITimeDataProviderWrapper.java -> no need for "public" in interfaces

Line:23, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeDataProviderCyclesWrapper.java -> remove this empty line

Line:25, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeDataProviderCyclesWrapper.java -> going with the comment from the previous file, this could be TimeDataProviderCyclesConverter for example.

Line:27, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeDataProviderCyclesWrapper.java -> can also be final

Line:51, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeDataProviderCyclesWrapper.java -> these numbers should be extracted to constants (NANOS_PER_SECOND or such). It's VERY easy to add or miss one zero ;)

Line:2079, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeGraphControl.java -> Doesn't matter much, but I would Ctrl+shift+F these parts, looking quickly it looks like the expressions are parameters to message.append(), while in fact they're part of the Object[] for NLS.bind()

    message.append(NLS.bind("T: {0}{1}     T1: {2}{3}", //$NON-NLS-1$
            new Object[] {
                    tf == TimeFormat.CALENDAR ? Utils.formatDate(time) + ' ' : "", //$NON-NLS-1$
                    Utils.formatTime(time, tf, res),
                    tf == TimeFormat.CALENDAR ? Utils.formatDate(Math.min(selectionBegin, selectionEnd)) + ' ' : "", //$NON-NLS-1$
                    Utils.formatTime(Math.min(selectionBegin, selectionEnd), tf, res)
            }));


(the } needs to be put on another line manually for it to work though, our current settings don't break existing lines.)

Line:252, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeGraphScale.java -> You could use a switch/case for these 3  tf == ... conditions. It would show more clearly that the cases RELATIVE and "default" are meant to fall-through (which I assume is what is wanted?) And we'd get a warning here to update if we ever  add something to TimeFormat.

Line:486, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeGraphScale.java -> You can compare enums with ==, it's more null-safe. Since it's xxx@xxx.xxx or anything ;)

-------------------------------------
author: Ivy Mitchell
date: 2014-09-15 18:59:46.000000000

Patch Set 1: Code-Review-1

(5 comments)

first egerrit review... it was slow

Line:118, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/TimeGraphViewer.java -> Make this a final static constant please

Line:349, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/Utils.java -> switcheroo?

Line:51, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeDataProviderCyclesWrapper.java -> replace magic number with private final static.

Line:62, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeDataProviderCyclesWrapper.java -> idem

Line:229, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeGraphScale.java -> switch case maybe?

-------------------------------------
author: Luciana Barry
date: 2014-09-15 20:41:43.000000000

Patch Set 1:

(1 comment)

Line:227, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeGraphTooltipHandler.java -> I didn't intend that every time data provider needs conversion, but if we decide to do that, it will have to be done at the next major API version.

-------------------------------------
author: Braxton Mccarthy
date: 2014-09-15 21:50:11.000000000

Patch Set 1:

(1 comment)

Line:227, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/widgets/timegraph/widgets/TimeGraphTooltipHandler.java -> Ok, fair enough. It is a bit like if we had a ITimeDataProvider2 instead, we'd still have an instanceof check here to decide which code path to use (assuming we would want to still support ITimeDataProvider1).

-------------------------------------
