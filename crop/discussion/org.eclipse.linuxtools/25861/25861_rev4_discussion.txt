DESCRIPTION

ctf: Lttng specific performance improvement

CTF based Lttng traces have 30-40% of their requests directed to the
same fields, this makes looking up these field _names_ faster.

Change-Id: I3cf32b10d22de04a1bd94ecadde37afa8e50b0a1
Signed-off-by: Ivy Mitchell xxx@xxx.xxx


COMMENTS

author: Ivy Mitchell
date: 2014-05-02 23:29:14.000000000

Uploaded patch set 4.

-------------------------------------
author: Ivy Mitchell
date: 2014-05-02 23:33:59.000000000

Patch Set 4:

On the same machine, this generates a 25% performance increase!

-------------------------------------
author: Brenden Conley
date: 2014-05-03 01:59:31.000000000

Patch Set 4:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/6834/

-------------------------------------
author: Brenden Conley
date: 2014-05-03 02:57:23.000000000

Patch Set 4: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/6834/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2014-06-17 20:43:04.000000000

Patch Set 4: Code-Review-1

(20 comments)

Doesn't apply cleanly on latest master.

I also get a major API breakage with this... not sure from where exactly, but that sounds bad!

Some comments because why not.

Line:85, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/types/Definition.java -> 3.1

Should the other constructor be deprecated? If not, what is the difference between both? The Javadoc should mention it.

Line:21, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/FieldsScope.java -> 3.1

Line:34, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/FieldsScope.java -> why are there 2 underscores in the name?

Line:50, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/FieldsScope.java -> That's 3 times I see the same method with small variants. Perhaps it'd be worth having a method in the parent class (or a new abstract class?)

Line:9, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/EventHeaderScope.java -> separate line

Line:10, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/EventHeaderScope.java -> add empty line after

Line:21, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/EventHeaderScope.java -> 3.1

Line:51, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/EventHeaderScope.java -> Maybe you can use a switch/case. One check instead of two.

Line:9, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/EventHeaderVScope.java -> on separate line

Line:10, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/EventHeaderVScope.java -> add empty line after

These 2 comments apply to the other files too.

Line:21, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/EventHeaderVScope.java -> 3.1

Line:50, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/EventHeaderVScope.java -> switch/case?

Line:20, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/PacketHeaderScope.java -> 3.1

Line:94, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/types/StructDefinition.java -> 3.1

Here too, explain how this constructor is different from the old one (or deprecate the old one)

Line:21, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/RootScope.java -> 3.1

Line:34, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/RootScope.java -> annotations are inherited. Doesn't hurt to have it, but you don't have to.

Line:39, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/RootScope.java -> Would switch/case work here?

Line:248, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/scope/LexicalScope.java -> add parentheses:

  return (fPath.isEmpty() ? fName : fPath + '.' + fName);

else it's easy to misread as "return fPath.isEmpty()"

Line:192, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/types/StructDeclaration.java -> 3.1

Line:194, lttng/org.eclipse.linuxtools.ctf.core/src/org/eclipse/linuxtools/ctf/core/event/types/StructDeclaration.java -> Don't put this for the whole method, extract a local variable and Supresswarning only on that.

-------------------------------------
