DESCRIPTION

tmf: Introduce ITmfEventTableColumns and its extension point

Instead of accidentally specifying the whole event table, trace types
can now only define the columns they want. This allows more (most)
trace types to use the default TmfEventsTable, which in turn allows more
trace types to be "aggregated" together in one table when put together
in the same experiment.

The previous "eventsTableType" extension remains there, 1) for
compatibility purpose, but also 2) for trace types that do very specific
things with their event table and need to override the default one
(ie, GdbTrace). Those trace types however will not be able to merge
their columns with other trace types when put together in the same
experiment.

Change-Id: Ie0c7fc9af62dc79aa3add8a605e02455e0df30c4
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2014-08-11 22:18:56.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2014-08-12 00:44:30.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8202/

-------------------------------------
author: Brenden Conley
date: 2014-08-12 01:01:13.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8202/ : FAILURE

-------------------------------------
author: Braxton Mccarthy
date: 2014-08-12 20:53:35.000000000

Patch Set 1:

Oh shnapps... the experiment can also define their own "event tabble" type... I was not aware of that!

Some more discussion will be required to see how we want to handle this (is it still needed now that we have columns, should experiments define columns themselves too, etc.)

-------------------------------------
author: Gerrit Code Review
date: 2014-08-20 19:24:47.000000000

The change could not be merged due to a path conflict.

Please rebase the change locally and upload the rebased commit for review.

-------------------------------------
