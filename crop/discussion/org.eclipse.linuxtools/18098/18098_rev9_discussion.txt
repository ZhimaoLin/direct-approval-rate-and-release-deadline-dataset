DESCRIPTION

TMF: Add base class and interface for state system analysis

Also update the state system explorer to show state systems from modules
instead.

Change-Id: Iab6424be1a469c541d3e9b199d7377c8a4e70299
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-11-17 18:49:54.000000000

Uploaded patch set 9.

-------------------------------------
author: Braxton Mccarthy
date: 2013-11-17 18:50:33.000000000

Patch Set 9:

Rebased on the Debug-testsuite, hopefully this will point out which test is hanging.

-------------------------------------
author: Braxton Mccarthy
date: 2013-11-17 18:52:15.000000000

Patch Set 9: Code-Review-1

(1 comment)

One comment before I forget.

Line:17, lttng/org.eclipse.linuxtools.tmf.core.tests/META-INF/MANIFEST.MF -> This is not required as a run-time dependency, it should merely be added in the build.properties. You can check in tmf.core/build.properties for the exact syntax.

-------------------------------------
author: Brenden Conley
date: 2013-11-17 18:57:43.000000000

Patch Set 9:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3991/

-------------------------------------
author: Brenden Conley
date: 2013-11-17 19:40:23.000000000

Patch Set 9: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3991/ : SUCCESS

-------------------------------------
author: Annalise Jimenez
date: 2013-11-17 21:06:21.000000000

Patch Set 9:

I randomly had a test hanging once by running the Junit test in Eclipse, but couldn't reproduce.  I guess some tests in this patch introduced something and then the order in which the tests are run may influence the outcome.  I'll check that tomorrow.  

Hypothesis: Could this happen when the code is running twice at the same time?  Like the 2 patches building simultaneously (it's +1 when one is run alone...).  And my jUnit test along with a maven build...

-------------------------------------
author: Braxton Mccarthy
date: 2013-11-17 23:23:25.000000000

Patch Set 9:

(1 comment)

Line:466, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/trace/TmfTraceTest.java -> I intermittently get test timeouts on testGetModulesByClass(), and when this happens, every single test afterwards will time out.

I have a feeling doing fTrace.openTrace() here has the potential to really mess up things. An individual test should not modify the class fields relevant to all other tests. This could use a different trace instance here.

-------------------------------------
author: Annalise Jimenez
date: 2013-11-18 00:54:49.000000000

Patch Set 9:

(1 comment)

Line:466, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/trace/TmfTraceTest.java -> Doesn't each test have its own version of the fTrace, since xxx@xxx.xxx disposes of it?  Unless some tests are run in parallel, with fTrace being static then I suppose it does mess up the field for other tests.  Guess I'll have to read about junit!

-------------------------------------
author: Braxton Mccarthy
date: 2013-11-18 02:59:52.000000000

Patch Set 9:

(1 comment)

Line:466, lttng/org.eclipse.linuxtools.tmf.core.tests/src/org/eclipse/linuxtools/tmf/core/tests/trace/TmfTraceTest.java -> You're right, @After should run after every single test. I thought this was xxx@xxx.xxx like we do in many other tests.

However, if we're not xxx@xxx.xxx fTrace doesn't need to be static. I don't think it would change THAT much though...

Tests don't normally run in parallel, although that's configurable with Maven (but we don't).


Ok here's an interesting exercise to try at home:
* add a syso("setting up") to the @Before and a syso("tearing down") xxx@xxx.xxx
* Run the tests, assuming they all pass. The console should print a nice series of setup/teardown/setup/teardown/etc. Ok? Ok.
* Now change the Timeout to something very short that will fail about half the tests (like 500 ms). Re-run again.
* I don't know if it's the same for everyone, but in that case I get some double "setup" messages, followed by two "tear down" later (but not necessarily immediately after). It happens for tests that get timed out, but NOT all of them.

So JUnit is confirmed for being crazy... although that's only a problem if tests fail, which ideally never happens.

-------------------------------------
