DESCRIPTION

tmf: TmfStateSystemOperations tweaks

Some tweaks to the new State System Operations class:
- Made it a full static class, with static methods only.
- Throw relevant exceptions back to the user (blame where blame is due!)
- Handle other exceptions accordingly.
- Use switch/case blocks, so we get warnings here if we ever add
  new state value types.

Change-Id: Ifd409b8a4f38c5b0d1b64afc1985b0717973d549
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2013-09-30 19:02:19.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3575/

-------------------------------------
author: Brenden Conley
date: 2013-09-30 19:33:22.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3575/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-09-30 21:00:54.000000000

Patch Set 1: Code-Review-1

(5 comments)

Line:82, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> NULL should never happen because the private methods always check isNull before putting the interval in the list.

Line:84, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> In the case of STRING or other, we should throw the exception to the user (who is trying to do a math operation on a non-numerical state attribute). We could either create and throw a new StateValueTypeException manually, or simply just try to unbox it as a number and let it fail (like before with the if-else except that we don't swallow the exception).

Line:183, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> Instead of catching we should let it be thrown by the method.

Line:200, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> Instead of catching we should let it be thrown by the method.

Line:240, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> Should we also rethrow the exception up the stack? In this particular case, the exception occurs if the queried attribute has a sub-attribute matching the mipmap feature name ("max","min","avg") but that sub-attribute was not built by the mipmap state provider.

-------------------------------------
author: Braxton Mccarthy
date: 2013-09-30 21:52:26.000000000

Patch Set 1:

(4 comments)

Thanks for the quick comments, I'll probably look at this tomorrow.

Line:82, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> True dat, but the compiler has no way of knowing it here, so it'd complain about a missing case (which is nice that it does, that way it will warn us if we ever add new types to ITmfStateValue).

Line:84, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> Good point, this exception could be communicated back to the user too.

Line:183, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> Yep, if we end up having the methods throw the exceptions, we can let this one "slide"

Line:240, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/statesystem/TmfStateSystemOperations.java -> This one was a particular case, it's not the user's "fault" that the state system it was given was weird/corrupted. I'll see with the next patch how this can be arranged.

-------------------------------------
