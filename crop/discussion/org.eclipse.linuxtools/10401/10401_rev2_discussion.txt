DESCRIPTION

TMF: Add support for StructDefinition fields to ctfadaptor

CTF supports recursive field definitions. So does TMF now.
* Added the CTFStructField class
* Updated the unit tests for this new class

Change-Id: I5e476da2a73f172ff946a1fff386e6fb48dff1bc
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-02-18 14:32:59.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-02-18 14:33:23.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1385/ 

-------------------------------------
author: Brenden Conley
date: 2013-02-18 14:53:10.000000000

Patch Set 2: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1385/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2013-02-18 20:11:33.000000000

Patch Set 2: (1 inline comment)



Line:413, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/ctfadaptor/CtfTmfEventField.java -> > The return type must be an Object, the toString() function is called on it so it had to converted to a List or else the string doesn't look good


Hmm, good point. But the getValue() should return the same type that is passed to the constructor. And we pass a field[] so we can reuse the sub-fields attribute in the super class...

I think the easiest/cleanest way would be to override .toString() in here, and have it use Arrays.toString() to correctly print the array.

-------------------------------------
