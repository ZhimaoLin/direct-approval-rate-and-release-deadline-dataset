DESCRIPTION

Added support for PTP sync projects in the RDT proxy.

Change-Id: I0012577071a1714f476c5e7c48686d50685ed7b8


COMMENTS

author: Craig Arias
date: 2013-01-08 19:27:04.000000000

Uploaded patch set 7.

-------------------------------------
author: Brenden Conley
date: 2013-01-08 19:27:09.000000000

Patch Set 7:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/924/ 

-------------------------------------
author: Dayana Summers
date: 2013-01-08 19:28:31.000000000

Patch Set 7: Looks good to me, but someone else must approve

Ok for me. Waiting for Akurtakov or Arianna Johns to push it.

-------------------------------------
author: Brenden Conley
date: 2013-01-08 19:41:23.000000000

Patch Set 7: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/924/ : SUCCESS

-------------------------------------
author: Kaylin Maxwell
date: 2013-01-08 22:41:50.000000000

Patch Set 7: I would prefer that you didn't submit this

(6 inline comments)



Line:34, profiling/org.eclipse.linuxtools.profiling.launch/src/org/eclipse/linuxtools/profiling/launch/RemoteProxyManager.java -> I would prefer to have this implemented as a separate extension so that the logic is set by the suppliers.  For example, there could be a RemoteProxyNatureMapping extension that maps natures to scheme ids.  A call could be added here to transform the nature to scheme id or null if there aren't any contributors.  This way, this code doesn't have to continue to add special cases.  It is all done by the proxy suppliers.  Looking at the extensions each time wouldn't be too bad as there will only be a handful and you could look using the nature.  This makes this code cleaner.  At the moment, the code here isn't failing if the nature is found but the supplier isn't.  That would be the only advantage to checking here, but as mentioned I would prefer to keep this code generic.

The SYNC Nature  and RDTSCHEME constants should be only within the RDT code.

Line:127, profiling/org.eclipse.linuxtools.profiling.launch/src/org/eclipse/linuxtools/profiling/launch/RemoteProxyManager.java -> The same logic would be required for getOS(IProject) as done for getFileProxy and getLauncher() regarding a synchronized project.

Line:60, profiling/org.eclipse.linuxtools.ssh.proxy/src/org/eclipse/linuxtools/internal/ssh/proxy/SSHFileProxy.java -> As per my comment in local proxy, I don't think this should return null.

Line:51, profiling/org.eclipse.linuxtools.profiling.launch/src/org/eclipse/linuxtools/internal/profiling/launch/LocalFileProxy.java -> This should probably return something since you are using it in OProfile and perhaps other profiling tools.

Line:30, profiling/org.eclipse.linuxtools.profiling.launch/src/org/eclipse/linuxtools/profiling/launch/IRemoteFileProxy.java -> I think the comment can be removed or you can just say get the base URI of the project/proxy (which may need to be calculated in the case of a locally synchronized project).

Line:83, oprofile/org.eclipse.linuxtools.oprofile.launch/src/org/eclipse/linuxtools/internal/oprofile/launch/launching/AbstractOprofileLaunchConfigurationDelegate.java -> This doesn't make sense considering that local and ssh proxies return null for getRemoteDir().  It might be clearer to add URI to the API name e.g. getRemoteBaseURI or getWorkingDirURI (since that is what you are using it for) or getBaseURI or etc...

-------------------------------------
