DESCRIPTION

Move handling of profile type plug-ins to the provider plug-in.

This commit alters how profile type provider plug-ins are handled. The
plug-in.xml files for each profiling type plug-in were kept, this was
done in order to keep the separate launch configurations, launchers and
preference pages as before. However, all functionality is now handled by
the Provider* classes, all of which implement the IExecutableExtension
interface, which is used to acquire attributes specified in a particular
extension point configuration. Because of this change the profiling type
plug-ins are no longer needed.

Change-Id: I37dfcaa70e8af5f22dfd6120d5a5c3293944d5e3


COMMENTS

author: Brenden Conley
date: 2012-09-26 20:50:38.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/235/ 

-------------------------------------
author: Brenden Conley
date: 2012-09-26 21:03:32.000000000

Patch Set 1: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/235/ : SUCCESS

-------------------------------------
author: Nathanael Holden
date: 2012-09-27 18:05:14.000000000

Patch Set 1: Verified; I would prefer that you didn't submit this; IP review completed

(11 inline comments)

I've tested things out and they work as expected. Just some small minor fixes, and a few clarifications about this change. Thanks for doing this!

Line:10, /COMMIT_MSG -> period here.

Line:13, /COMMIT_MSG -> I guess this should be 'some of which' since the ProviderLaunchDelegate and the ProviderOptionsTab don't need direct access. The delegate doesn't need it, and the options tab gets it from another class.

Line:40, profiling/org.eclipse.linuxtools.profiling.provider/src/org/eclipse/linuxtools/internal/profiling/provider/launch/ProviderLaunchShortcut.java -> This should cast to Map<String,String>.

Line:13, profiling/org.eclipse.linuxtools.profiling.provider/META-INF/MANIFEST.MF -> Is this import needed ? I've removed it without any issues building.

Line:108, profiling/org.eclipse.linuxtools.profiling.provider/plugin.xml -> I think this is a duplicate of the top-level main preference page.

Line:22, profiling/org.eclipse.linuxtools.profiling.provider/src/org/eclipse/linuxtools/internal/profiling/provider/ProviderLaunchConfigurationTabGroup.java -> Please format here : space between 'IExecutableExtension' and '{'. Also, there should only be one space between the class and 'implements'.

Line:32, profiling/org.eclipse.linuxtools.profiling.provider/src/org/eclipse/linuxtools/internal/profiling/provider/ProviderLaunchConfigurationTabGroup.java -> even though data is a HashTable, it's best to cast it as a Map since that's all that we require.

Line:52, profiling/org.eclipse.linuxtools.profiling.provider/src/org/eclipse/linuxtools/internal/profiling/provider/ProviderLaunchConfigurationTabGroup.java -> I think this is the right thing to do. The tab group (which is instantiated through the extension point framework) already has access to the extension point data, so when it constructs the ProviderOptionsTab, it should pass that information along. With the exception of this piece of the code, all other instantiations of the Provider* classes are done through the extension point framework, and so type/name attributes will exist.

Line:39, profiling/org.eclipse.linuxtools.profiling.provider/src/org/eclipse/linuxtools/internal/profiling/provider/ProviderOptionsTab.java -> Is the ProviderOptionsTab ever instantiated through the extension point framework ? (I don't think it's even reference in the framework) It's accessed only by the ProviderLaunchConfigurationTabGroup which instantiates it, and passes the relevant info (name/type). I think it might be possible to have it not implement IExecutableExtension.

Line:66, profiling/org.eclipse.linuxtools.profiling.provider/src/org/eclipse/linuxtools/internal/profiling/provider/ProviderOptionsTab.java -> space between and ')' and '{'

Line:23, profiling/org.eclipse.linuxtools.profiling.provider/src/org/eclipse/linuxtools/internal/profiling/provider/launch/ProviderLaunchConfigurationDelegate.java -> This is more of a note to self, but I'm assuming this doesn't need to extend IExecutableExtension because by this point either the launch short cut, or the tab group has the relevant information, and this delegate only needs to look inside the configuration for the id.

-------------------------------------
