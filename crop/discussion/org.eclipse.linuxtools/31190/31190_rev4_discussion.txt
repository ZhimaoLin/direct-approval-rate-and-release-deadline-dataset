DESCRIPTION

tmf: make TmfConstantTransform serializable

Change-Id: I64c2748c747b94701e0de753d0140093c850fa5c
Signed-off-by: Ivy Mitchell xxx@xxx.xxx


COMMENTS

author: Ivy Mitchell
date: 2014-08-08 01:59:07.000000000

Uploaded patch set 4.

-------------------------------------
author: Brenden Conley
date: 2014-08-08 01:59:13.000000000

Patch Set 4:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8156/

-------------------------------------
author: Ivy Mitchell
date: 2014-08-08 02:08:20.000000000

Topic set to Offsetting

-------------------------------------
author: Brenden Conley
date: 2014-08-08 02:41:29.000000000

Patch Set 4: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/8156/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2014-08-08 12:23:26.000000000

Patch Set 4: Code-Review-1

(4 comments)

Line:33, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/synchronization/TmfConstantTransform.java -> why not a long?

Line:39, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/synchronization/TmfConstantTransform.java -> fOffset = 0?

Line:49, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/synchronization/TmfConstantTransform.java -> fOffset = offset?

Line:59, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/synchronization/TmfConstantTransform.java -> is this an infinite loop?
fOffset = new ...; ?

-------------------------------------
author: Luciana Barry
date: 2014-08-08 15:01:17.000000000

Patch Set 4:

(1 comment)

Line:64, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/synchronization/TmfConstantTransform.java -> After discussion, this would mean that you can't offset a timestamp with more precision than its scale, which might be something desired. The alternative is that all transformed timestamps will be in nanoseconds, so large timestamps will overflow, and there should be no assumption by the caller on the scale of the returned timestamp.

-------------------------------------
