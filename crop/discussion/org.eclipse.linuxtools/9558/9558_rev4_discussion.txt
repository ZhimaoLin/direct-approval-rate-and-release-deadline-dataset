DESCRIPTION

tmf: Make TmfEvent immutable

Since custom text parsers make heavy use of field setters,
this required changing CustomEvent to implement the interface
instead, and re-adding the setters and such. This means
CustomEvent's remain mutable, but TmfEvent and its descendants
do not.

Change-Id: I33b9f3b4ace9f9464eb0a453140dffb17680ec9b
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2013-01-29 18:45:30.000000000

Patch Set 4:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1205/ 

-------------------------------------
author: Brenden Conley
date: 2013-01-29 18:55:32.000000000

Patch Set 4: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1205/ : SUCCESS

-------------------------------------
author: Ivy Mitchell
date: 2013-01-29 20:19:58.000000000

Patch Set 4: Verified; Looks good to me, but someone else must approve; IP review completed

Looks like a welcome change, should improve memory usage theoretically. I would like patrick or Meredith Scott to approve too.

-------------------------------------
author: Luciana Barry
date: 2013-01-29 22:38:09.000000000

Patch Set 4: (2 inline comments)



Line:43, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/event/TmfEvent.java -> If fRank is to be final, you also have to modify all known implementations of ITmfEventParser.parseEvent so that the context's rank is used in the constructor of the event.

Line:177, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/event/TmfEvent.java -> Is it really necessary to make the fields private and remove the protected setters? Only the subclass itself can use the setters, not any user of the subclassed event.
There is no guarantee that all implementations of ITmfEvent are immutable anyways, and the framework does not require TmfEvent to be used. So removing the clone from ITmfEvent is a leap of faith in itself, one that we might decide to take even without making TmfEvent immutable.

-------------------------------------
author: Braxton Mccarthy
date: 2013-01-29 23:11:23.000000000

Patch Set 4: (2 inline comments)

Woo, thanks for the review!

Line:43, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/event/TmfEvent.java -> The only implementation that seemed to use the setRank() after the constructor was the CustomEvent, and that was taken care of ;)

A good point that was brought up though is, should the event really know its rank? Or should this information be stored in the context/iterator?

Line:177, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/tmf/core/event/TmfEvent.java -> If the fields are final, the setters won't work anyway. We could make the fields themselves protected, but then subclasses wouldn't be able to modify them either (that's the idea). They can only set them at the constructor, via super(blah, blah, blah). I have another patch in the pipeline that does that with CtfTmfEvent.

Having ITmfEvent extend Cloneable forces all implementation to be cloneable. The reverse is not true: any subclass can decide implement Cloneable, and then only this branch can be mutable. (It's also very possible to be mutable and support copies without using Cloneable).

-------------------------------------
author: Braxton Mccarthy
date: 2013-01-30 22:29:16.000000000

Patch Set 4: Abandoned

Obsolete with new version

-------------------------------------
