DESCRIPTION

Convert Eclipse projects to Java 8 where needed.

Also remove a few small errors/warnings that were created
as a result of this change.

Change-Id: I5cffd7ee2bb3fd8e4e493791d5a7f22c4943b4c8
Signed-off-by: Landon Wilkins xxx@xxx.xxx


COMMENTS

author: Landon Wilkins
date: 2014-07-22 20:18:08.000000000

Uploaded patch set 1.

-------------------------------------
author: Braxton Mccarthy
date: 2014-07-22 20:25:16.000000000

Patch Set 1:

Hi Andrew,

While I would LOVE to use Java 8, wouldn't this require all of our users to have JRE 8 to be able to even run the plugins? I don't think this is a requirement we're ready to impose, yet...

Could you explain why the conversion to 8 is "needed" for these plugins?

Thanks!

-------------------------------------
author: Brenden Conley
date: 2014-07-22 20:37:08.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/7875/

-------------------------------------
author: Landon Wilkins
date: 2014-07-22 20:43:29.000000000

Patch Set 1:

For me, Eclipse complains that every time a @Nullable xxx@xxx.xxx annotation is used, the parent project compliance and JRE must be 1.8. This also prevents me from running child Eclipses, unless I change the JRE or close any projects that have this problem.

I'm talking to Alex to find a way to resolve this without changing the JRE. He's also against this patch and told me that these annotations should work even with Java 6. (With the way these errors were affecting me, I thought the annotations were Java 8 features.)

-------------------------------------
author: Brenden Conley
date: 2014-07-22 20:43:29.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/7875/ : FAILURE

-------------------------------------
author: Braxton Mccarthy
date: 2014-07-22 20:51:54.000000000

Patch Set 1:

Ah I see. Yes we had a similar problem with the null annotations at some point, where it would complain that it wanted Java 8 no matter what.

Turned out to be because the annotations in org.eclipse.jdt.annotation 2.0 are defined using Java 8 "type annotations". Whereas the ones in 1.0/1.1 were using "old-school" annotations. So we had to tweak our target definition to make sure we 
use the org.eclipse.jdt.annotation package from Kepler, to get 1.1

It's questionable why they kept the same package/annotation name for such a drastic change, but until we completely migrate to Java 8 we'll have to make sure the org.eclipse.jdt.annotation 1.1 is being used.

Are you using the top-level linuxtools target definition? I think we fixed that one to include only 1.1, I will double-check.

-------------------------------------
author: Landon Wilkins
date: 2014-07-22 21:02:44.000000000

Abandoned

It turns out that the error I was having is actually a Luna-specific issue:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=434033

I can apply an appropriate fix for this problem in a different patch, which won't require a change of Java versions.

-------------------------------------
author: Landon Wilkins
date: 2014-07-22 21:24:41.000000000

Patch Set 1:

By the way, I closed this patch *before* I saw your last comment, Alexandre. :P What you described is exactly the problem I'm having.

I'm double-checking the target definitions myself, as well.

-------------------------------------
author: Landon Wilkins
date: 2014-07-22 22:09:20.000000000

Patch Set 1:

Okay, I can confirm that the target defintion does indeed reference v1.1.0 of jdt.annotations, and using it as my Eclipse's target platform bypasses the issue. Thanks for the help, and sorry for the confusion!

-------------------------------------
