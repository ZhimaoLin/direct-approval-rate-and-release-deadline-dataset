DESCRIPTION

Fix for empty views that extend TmfView after restart (Bug 409345)

All views in Tmf/LTTng are affected by this problem:

- Extract signal handling of TmfTraceOpenedSignal,
TmfTraceSelectedSignal and TmfTraceClosedSignal into TmfView base
class. All view that extend TmfView are updated for that.
- The TmfUml2SDSyncLoader handles now the TmfTraceOpenedSignal
- TmfTrace is now registered as VIP listener for signals

Change-Id: Id0275bb44f72e4a05be8b91699958975c7b108f9
Signed-off-by: Ricky Reeves <Meredith xxx@xxx.xxx

COMMENTS

author: Ricky Reeves
date: 2013-05-30 19:44:17.000000000

Uploaded patch set 5.

-------------------------------------
author: Brenden Conley
date: 2013-05-30 19:44:23.000000000

Patch Set 5:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/2559/ 

-------------------------------------
author: Brenden Conley
date: 2013-05-30 19:58:15.000000000

Patch Set 5: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/2559/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-05-30 21:18:01.000000000

Patch Set 5: (4 inline comments)



Line:436, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/controlflow/ControlFlowView.java -> shouldn't we be overriding closeTrace() instead?

Line:363, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/resources/ResourcesView.java -> shouldn't we be overriding closeTrace() instead?

Line:117, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/statistics/TmfStatisticsView.java -> not sure why it can't all be done in loadTrace()?

Line:591, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/CallStackView.java -> shouldn't we be overriding closeTrace() instead?

-------------------------------------
author: Braxton Mccarthy
date: 2013-05-30 21:52:35.000000000

Patch Set 5: (1 inline comment)

As Patrick points out, it becomes confusing if a view should override either loadTrace() or traceClosed().

How about:
- Making TmfView.loadTrace() and closeTrace() abstract, so views don't forget to implement them (I noticed that TmfView is already abstract)
- Making the signal handlers in TmfView final, since class-specific behavior should go in loadTrace/closeTrace already.

Thoughts?

Line:396, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/statesystem/TmfStateSystemExplorer.java -> fTrace is not put to null here, not sure if it's important

-------------------------------------
