DESCRIPTION

Tmf: Trace synchronization using network events

* Event matching infrastructure allow to create dependencies between 2 events.
* Network events (TCP packets) are matched for LTTng 2.0 traces, using one of
  two techniques: fgiraldeau's dynamic probe addon module, or an experimental
  branch with additional data on net_* tracepoints of lttng-modules.
* Traces in an experiment are synchronized using the Fully Incremental Convex
  Hull algorithm.
* A trace's timestamps can be modified using Timestamp Transforms classes.
  TmfTimestampTransformLinear takes a slope and/or an offset.
* Once synchronized, the trace is copied, without its supplementary files
  so the state system is regenerated with synchronized time.
* A new synchronization view shows statistics about the synchronization.
* The synchronization information is kept at the experiment level to be able
  to view synchronization's statistics after first sync.
* Synchronization formula for a trace is saved in supplementary files.
* Unit tests for trace synchronization.

Change-Id: I1971fcd856254fc5654c609d6146904cd3dfd25c
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Annalise Jimenez
date: 2013-08-15 16:27:23.000000000

Uploaded patch set 8.

-------------------------------------
author: Braxton Mccarthy
date: 2013-08-16 18:38:00.000000000

Patch Set 8: Code-Review-1

(1 comment)

Basically, the test files should be integrated with CtfTestTraces.java. Maybe it's getting confusing with just an incrementing number, maybe we should have a map where you pass the name of the test trace or something...

Line:32, lttng/org.eclipse.linuxtools.lttng2.kernel.core.tests/src/org/eclipse/linuxtools/lttng2/kernel/core/tests/event/matchandsync/MatchAndSyncTestFiles.java -> These should be added to the array in CtfTestTraces. Then you can call CtfTestTraces.getTestTrace() to retrieve it. This will make sure there is a dependency between this test plugin and the CTF test plugin. I had a failure at first building with Maven because it tried to run these tests before the CTF tests (which download the traces that everybody else uses).

After that you can call assumeTrue(CtfTmfTestTraces.tracesExist()); in your setup classes. This will make sure the traces are present before running the tests. If they are not found, it will skip the test (and not fail them). This is important because we have a requirement to be able to do offline builds, where downloading external stuff is not available.

Also don't forget to update the size of the array in CtfTmfTestTraces (line 37). We need a better way to do that....

-------------------------------------
author: Ricky Reeves
date: 2013-08-19 11:33:44.000000000

Patch Set 8: Verified-1

New test case org.eclipse.linuxtools.lttng2.kernel.core.tests.event.matchandsync.ExperimentSyncTest fails when running it with maven.

Running org.eclipse.linuxtools.lttng2.kernel.core.tests.event.matchandsync.AllTests
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4.247 sec <<< FAILURE!

Results :

Failed tests: testExperimentSync(org.eclipse.linuxtools.lttng2.kernel.core.tests.event.matchandsync.ExperimentSyncTest): expected:<...ampLinear [ alpha = [0.9999413783703139011056845831168394, beta = 79796507913179.3334766012468829817]1 ]> but was:<...ampLinear [ alpha = [1.000000001637620270360329778822053, beta = -2229151790.20679983311606207474401]1 ]>

-------------------------------------
