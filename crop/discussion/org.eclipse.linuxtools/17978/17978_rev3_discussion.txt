DESCRIPTION

tmf: Add function name mapping to the Callstack View

Initial version of the "function name mapper" for the Callstack View.
It currently only supports a text file listing addresses followed by
names, like the output of "nm [binary] > out.txt".

The next steps will be:
- Add support for reading the binary directly, by tapping into the
  relevant CDT components.
- Add a separate dialog that shows the currently imported file name(s).
- Add support for dynamically-loaded libraries. This will require some
  work on the tracer side.

Change-Id: Id622cce487965b8c770fc40218685ec7605924ff
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-11-13 21:56:32.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2013-11-13 22:21:43.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3916/

-------------------------------------
author: Brenden Conley
date: 2013-11-13 22:51:59.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3916/ : SUCCESS

-------------------------------------
author: Kaeden Tapia
date: 2013-11-14 02:38:31.000000000

Patch Set 3: Code-Review-1

(5 comments)

Some inline comments. Also, I still think that toolbar button using text is weird but I have nothing better to suggest at this point.

Line:1181, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/CallStackView.java -> getViewSite().getShell()

Line:1208, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/CallStackView.java -> I think this should be externalized, it is user visible. Also, since the user doesn't know about the class name, the view should be referred by it's name. I also personally prefer using verbs like "Updating Call Stack view function mapping".

Line:44, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/FunctionNameMapper.java -> I think you can use a FileReader instead of having a FileInputStream and then an InputStreamReader.

Line:59, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/FunctionNameMapper.java -> I think you could consolidate both reader.close() in a finally block.

Line:67, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/FunctionNameMapper.java -> map.isEmpty?

-------------------------------------
author: Braxton Mccarthy
date: 2013-11-14 03:13:26.000000000

Patch Set 3:

(5 comments)

Line:1181, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/CallStackView.java -> Thanks, this is what I was looking for! Now we don't need to pass the Composite down from the createPartControl.

Line:1208, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/CallStackView.java -> Good point, it initially was a Thread, so I didn't bother externalizing it, but now with a Job it is indeed user-visible.

Line:44, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/FunctionNameMapper.java -> Done

Line:59, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/FunctionNameMapper.java -> Done

Line:67, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/FunctionNameMapper.java -> Done

-------------------------------------
