DESCRIPTION

tmf: Add function name mapping to the Callstack View

Initial version of the "function name mapper" for the Callstack View.
It currently only supports a text file listing addresses followed by
names, like the output of "nm [binary] > out.txt".

The next steps will be:
- Add support for reading the binary directly, by tapping into the
  relevant CDT components.
- Add a separate dialog that shows the currently imported file name(s).
- Add support for dynamically-loaded libraries. This will require some
  work on the tracer side.

Change-Id: Id622cce487965b8c770fc40218685ec7605924ff
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-11-05 18:53:36.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-11-05 18:53:41.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3832/

-------------------------------------
author: Brenden Conley
date: 2013-11-05 19:32:18.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3832/ : SUCCESS

-------------------------------------
author: Kaeden Tapia
date: 2013-11-13 00:04:32.000000000

Patch Set 2:

(1 comment)

Line:1188, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/CallStackView.java -> buildThreadList is a long running operation that can block the UI thread for a while. There is already a class BuildThread that does that but it might be simpler to just call loadTrace. 

If mapFromNmTextFile could be moved there that would be nice too because the file could be quite big. Then maybe the filePath could be a member var and if not null it will initialize the mapping in the BuildThread.run

-------------------------------------
author: Braxton Mccarthy
date: 2013-11-13 21:59:01.000000000

Patch Set 2:

(1 comment)

Line:1188, lttng/org.eclipse.linuxtools.tmf.ui/src/org/eclipse/linuxtools/tmf/ui/views/callstack/CallStackView.java -> Good point. It's easy to test by selecting an unrelated, big, binary file as the mapping file. It should be run in a separate thread.

I ended up creating a new Job just for this, since loadTrace() doesn't do anything once the trace is already loaded.

-------------------------------------
