DESCRIPTION

lttng: add cpu usage view per process

This feature requires a kernel trace with LTTng with the
scheduler sched_switch event enabled.

Big thanks to Liana Berg for a great job cleaning this up.

Change-Id: I94526bbe32eb123f234551c0d343078e6d2c9e4c
Signed-off-by: Ivy Mitchell xxx@xxx.xxx


COMMENTS

author: Ivy Mitchell
date: 2013-10-18 13:14:11.000000000

Uploaded patch set 10.

-------------------------------------
author: Brenden Conley
date: 2013-10-18 13:14:17.000000000

Patch Set 10:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3714/

-------------------------------------
author: Luciana Barry
date: 2013-10-24 21:19:44.000000000

Patch Set 10: Verified-1 Code-Review-1

(33 comments)

Line:44, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> Please describe in comments the key and value (and first/second for the Pair) of your map.

Line:100, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> use the NANOSECOND constant for -9

Line:104, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> Why the -1 ?

Line:119, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> Why the -1 ?

Line:166, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> remove the comment

Line:63, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> Humor in class description might be confusing to serious user.

Line:67, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> Some comments from verification since I'm not sure where in the code it applies:
- When zooming I see the Y scale going above 100% (e.g. over 10000%). When zooming in and there is no data the scale is -1% to 1%.
- It happened that every X scale tick had a label, then it kept overwriting the label making it unusable (20 20 20 20 20 2012-xxx)
- Normally there is one label every so many ticks with no overlap, but then you can't really tell to which tick the label applies.
- When zoomed in, sometimes there is a huge spike at a sched_switch, with other bars almost empty (maybe just scaled-out?)
- Zoomed in, with a CPU that goes from idle, to a single process, then back to idle in the current time range, and CPU view shows nothing.

Line:72, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> This should match the view id from plugin.xml (which does not have 'internal').

Line:101, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> Maybe we can save space and omit this title, it is the name of the view tab.

Line:107, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> The new and preferred way to do this is to use TmfTraceManager method getActiveTrace().

Line:122, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> A dispose() method should be implemented to cancel the possibly running updateRangeThread.

Line:169, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> may need to be synchronized to protect updateRangeThread

Line:189, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> may need to be synchronized to protect updateRangeThread

Line:207, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> we're looking

Line:214, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> does this need to be public?

Line:226, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> I have a feeling there is a +1 missing here that is the reason why there was a -1 when building the state system...

Line:254, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> may need to be synchronized to protect updateRangeThread

Line:258, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> It should use the current trace timerange from the TmfTraceManager.

Line:322, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> Should this be NLS'ed?

Line:374, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> Should be NLS'ed? Suggest to use NLS.bind()

Line:387, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> This leaks Color objects. You could use LocalResourceManager createColor/destroyColor or dispose them directly, every time they are no longer needed (dispose of the view, ViewClear, in the series culling above...).

Line:402, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> This should be max'ed with 1 otherwise could have infinite while loop below?

Line:425, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> This apparently is intended to remove the micro and nanoseconds. When zoomed in, these are useful otherwise every tick has the same milliseconds. Furthermore, if micro and nanoseconds are not shown according to the user-chosen Time Format properties, this will remove characters that could be milliseconds or seconds, and even cause StringIndexOutOfBoundsException (it has occurred in testing). The view should also handle the TimeStampFormatUpdate signal and refresh itself.

Line:489, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> One of the pid quarks can be for an 'unknown' thread (for events that occur before the first sched_switch). That pid is set to -1, and it has no exec_name subattribute. This causes an AttributeNotFoundException in the error log.

Line:491, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> It would be better coding to check isNull() on the state value.

Line:493, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> In Control Flow view we only show the last execName, after going through the execName intervals. Maybe you only need to use the end time name?
But start and end are the state system time limits, right? When a process starts and ends inside the trace duration, the execName attribute will be null at the trace limits, is this a problem here?

Line:539, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> use state value isNull()

Line:618, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> You can sometimes have a thread that does not have this subattribute, for example if the tid was found by the lttng_statedump_process_state but there was no sched_switch to it during the trace. This causes an AttributeNotFoundException in the error log.

Line:628, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> just a naming thing, but shouldn't left (end) be right, and right (start) be left ?

Line:649, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> the X and Y axis should also be reset

Line:732, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> seems useless, we are about to exit the thread anyways

Line:40, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/LttngCpuUsageStateProvider.java -> This class is never used?

Line:126, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/lttng2/kernel/core/trace/LttngKernelTrace.java -> works, but could make code for both state systems look the same?

-------------------------------------
author: Kaeden Tapia
date: 2013-11-18 06:16:08.000000000

Patch Set 10: Code-Review-1

(4 comments)

Line:2, lttng/org.eclipse.linuxtools.lttng.target/lttng-e3.8.target -> sequence number needs to be bumped or 4.4 isn't happy... at least for now.
https://bugs.eclipse.org/bugs/show_bug.cgi?id=420322

Line:2, lttng/org.eclipse.linuxtools.lttng.target/lttng-eStaging.target -> bump sequence number

Line:2, lttng/org.eclipse.linuxtools.lttng.target/lttng-e4.3.target -> bump sequence number

Line:2, lttng/org.eclipse.linuxtools.lttng.target/lttng-e4.2.target -> bump sequence number

-------------------------------------
