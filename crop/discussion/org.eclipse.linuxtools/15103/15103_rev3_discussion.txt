DESCRIPTION

lttng: add cpu usage per process

This feature requires a kernel trace with LTTng with the
scheduler sched_switch event enabled.

Big thanks to Liana Berg for a great job cleaning this up.

Change-Id: I94526bbe32eb123f234551c0d343078e6d2c9e4c
Signed-off-by: Ivy Mitchell xxx@xxx.xxx


COMMENTS

author: Ivy Mitchell
date: 2013-10-01 21:16:26.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2013-10-01 22:10:27.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3592/

-------------------------------------
author: Brenden Conley
date: 2013-10-01 22:40:55.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3592/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2013-10-08 19:37:09.000000000

Patch Set 3: Code-Review-1

(29 comments)

Also, add the SWTChart dependency to the Staging target too.

Line:7, /COMMIT_MSG -> This makes it sound like "this patch increases the CPU usage" ;)

"Add CPU usage views" would be more representative.

Line:5, lttng/org.eclipse.linuxtools.lttng.target/lttng-e3.8.target -> Thanks for adding this. But please put it in alphabetical order, so after org.junit

Line:4, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> Do you really have copyright on this? If you were employed by Ericsson at that time, you don't :P

Line:67, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> remove this line

Line:276, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> you can make this a nice one-liner using elvis notation (and final even)

Line:405, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> define as List

Line:472, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> define as List

Line:510, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> Seems like a lazy way to deal with this. At least put a comment why it happened, and why it should be ignored.

StateSystemDisposedException would mean the Eclipse is shutting down, so we can safely ignore it, but the others it's not obvious.

Line:562, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> idem

Line:633, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/CpuUsageView.java -> idem.

Like the StateSystemDisposed one, can happen when shutting, we don't want to pollute the log with it.

Line:43, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/LttngCpuUsageStateProvider.java -> maybe append those names with _VALUE, to differentiate them from the integers.

Line:94, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/LttngCpuUsageStateProvider.java -> This information already exists in the LttngKernelStateProvider. Which is guaranteed to be built for LttngKernel traces.

Does this class add anything new? If not, then it could be removed completely.

Line:123, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/LttngCpuUsageStateProvider.java -> Don't externalize these messages.

Line:130, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/LttngCpuUsageStateProvider.java -> change return type to LttngCpuUsageStateProvider.

Also, as with the previous file, override getTrace() to return a CtfTmfTrace.

Line:1, lttng/org.eclipse.linuxtools.lttng2.kernel.ui/src/org/eclipse/linuxtools/internal/lttng2/kernel/ui/views/cpu/messages.properties -> Don't need to externalize a thread name

Line:54, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> This name (the 3rd parameter) is just used for debugging purposes (like the thread name), it shouldn't be externalized.

Line:73, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> This *shouldn't* happen, but it'd be safer to do a null check before .getValue(), and an instanceof check on the result, in case:
* The field doesn't exist
* The field doesn't have the correct value

Line:113, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> It's not really a hack, it's required if you want to use updateOngoingState  ;)

Line:122, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> We don't externalize what gets put in the error log, just messages that show up in the user's face.

Line:134, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> getFirst() returns an Integer here, so you should use .equals()

Line:141, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> If this exception happens, you will exit the for loop. Is this wanted? Would it be possible that some attributes don't exist, because some events were not present in the trace, for example?

Line:142, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> Don't need to externalize

Line:149, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> Change return type to CumulativeCpuUsageProvider

Line:150, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/CumulativeCpuUsageProvider.java -> Might be better to just override getTrace() to have it return a CtfTmfTrace. Yes that method will do a cast, but any other object referring to CumulativeCpuUsageProvider.getTrace() will get a CtfTmfTrace directly.

File Comment: lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/stateprovider/Messages.java -> Not sure this will be needed anymore

Line:6, lttng/org.eclipse.linuxtools.lttng.target/lttng-e4.2.target -> put it at the end

Line:108, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/lttng2/kernel/core/trace/LttngKernelTrace.java -> I know this is not something you added, but it shouldn't be there... that's a terrible way of saying "I can't handle null values correctly"

Line:148, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/lttng2/kernel/core/trace/LttngKernelTrace.java -> You could consolidate those in one try/catch block. Also check if LttngCpuUsageStateProvider is really needed.

Line:44, lttng/org.eclipse.linuxtools.lttng2.kernel.core/src/org/eclipse/linuxtools/internal/lttng2/kernel/core/Attributes.java -> I would keep this specific to the provider it's used in. It doesn't go in the same attribute tree as the rest of those.

-------------------------------------
