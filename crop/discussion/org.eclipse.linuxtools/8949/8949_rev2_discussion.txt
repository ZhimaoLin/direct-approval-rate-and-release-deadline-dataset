DESCRIPTION

Merging org.eclipse.linuxtools.profiling.launch.ui into org.eclipse.linuxtools.profiling.launch plugin

Change-Id: I04efbf3134cfcd265b40ca40f4caf443f266f10a


COMMENTS

author: Callum Holloway
date: 2012-11-30 13:41:57.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2012-11-30 13:42:03.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/692/ 

-------------------------------------
author: Brenden Conley
date: 2012-11-30 14:04:34.000000000

Patch Set 2: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/692/ : SUCCESS

-------------------------------------
author: Kaylin Maxwell
date: 2012-11-30 18:08:41.000000000

Patch Set 2:

Can you explain why you are doing this?  In general, it is generally recommended practice to have a UI plugin which has all the UI elements and a non-UI core plug-in.

-------------------------------------
author: Callum Holloway
date: 2012-12-03 12:01:32.000000000

Patch Set 2:

As I said in the comment above, there's a dependency to the ui plugin, which is not correct. Any attempt of adding a dependency from o.e.l.p.launch.ui to o.e.l.p.launch would result in a circular dependency. There's a launch configuration tab in the o.e.l.p.launch plugin that depends on a widget that's in the o.e.l.p.launch.ui plugin. Since everything in the o.e.l.p.launch.ui plugin is related to the widget, I thought moving it to the launch plugin would be a good solution. I could alternatively move the launch tab to the ui plugin, but I have verified that launch tabs aren't typically stored in ui plugins. 

IMO the problem is that the o.e.l.p.launch.ui plugin is not exactly a ui plugin. The typical ui plugin contains Actions, Views, Perspectives etc, and this is not the case. Perhaps renaming the package (o.e.l.p.launch.widget for example) would be good, or even moving the widget and the launch tab to a new package (o.e.l.p.launch.tab for example), but this would probably be a major break in the API.

-------------------------------------
author: Kaylin Maxwell
date: 2012-12-04 22:15:07.000000000

Patch Set 2:

I agree that the current situation is a mess.  CDT as an example puts their launch configuration tabs in their org.eclipse.cdt.launch.ui plug-in.  I think that your suggestion of moving the tabs over makes sense.  Do you foresee any other issues with this?

-------------------------------------
author: Callum Holloway
date: 2012-12-05 19:47:49.000000000

Patch Set 2:

I've checked how it looks like in CDT, and all tabs are in org.eclipse.cdt.launch.ui package inside the org.eclipse.cdt.launch plugin. So I guess demoting org.eclipse.linuxtools.profiling.launch.ui plugin to a package in org.eclipse.linuxtools.profiling and moving the tab to this package would result in a similar organization as CDT uses.

-------------------------------------
author: Kaylin Maxwell
date: 2012-12-05 20:22:16.000000000

Patch Set 2:

Sorry, you are right.  I didn't notice that when I looked up the tabs and their packages.  Since the goal is to ultimately have the code in the CDT, this is the correct thing to do.  I will review your patch again.

-------------------------------------
author: Kaylin Maxwell
date: 2012-12-05 20:39:04.000000000

Patch Set 2:

Everything is fine except I believe you need to modify the RemoteResourceSelectorProxy schema file you have renamed into o.e.l.profiling.launch because it still refers to o.e.l.profiling.launch.ui as it's plugin-id.  While it may be possible that it all holds together because references and schema have matching ids, it would certainly be confusing to future users as there won't be a ui plug-in.  With the change, any references to the extension elsewhere would likewise need to be changed to refer to the new proper plug-in id.

-------------------------------------
