DESCRIPTION

Tmf: Add the concept of module source to the Analysis API

This allows to other ways to define analysis module than having to describe
them in the plugin.xml file.  For example, an XML file can be the source of an
analysis module.

Change-Id: Ia2c7142704aa6b2a326bba9d2bf0734954427b7e
Signed-off-by: Aryana Jones xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2013-11-05 16:01:22.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3830/

-------------------------------------
author: Brenden Conley
date: 2013-11-05 16:38:57.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3830/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2013-12-04 19:53:27.000000000

Patch Set 1:

(6 comments)

Some higher-level questions.

Also it seems the terms "analysis helpers" and "analysis modules" are sometimes used interchangeably. We should converge on one.

It reminds me a bit the early days of the state system, every component had 2-3 different names. It was a mess! ;)

Line:9, /COMMIT_MSG -> allows for other ways

modules

Line:86, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/Activator.java -> Isn't there a cases where sources could become available *after* this plugin was loaded? Like if another plugin provides sources, but is loaded after tmf.core, how would they register to the analysis manager?

Line:33, lttng/org.eclipse.linuxtools.tmf.core.tests/stubs/org/eclipse/linuxtools/tmf/tests/stubs/analysis/AnalysisModuleTestHelper.java -> you don't HAVE to add xxx@xxx.xxx for the inner classes/enums if it's the same as the author in the top-level class.

Line:31, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisModuleSources.java -> For utility classes, if you want to make them like "static" classes, you can:

- Mark the class final
- Add a private default (empty) constructor, to make sure the class cannot instantiated.

Line:72, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisModuleSourceCE.java -> their corresponding config elements, or helpers?

Line:33, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/analysis/TmfAnalysisModuleSourceCE.java -> CE stands for ConfigurationElement I assume? I'd prefer if it was not abbreviated (or ConfigElement)

-------------------------------------
author: Annalise Jimenez
date: 2013-12-05 14:32:15.000000000

Patch Set 1:

(1 comment)

helpers and modules are not the same thing:

Helpers contain just the description of the module: name, class, ways to know which trace type they apply to. It does not need a trace. The UI elements most often use the helper.

Modules are instanciated from the helper once a trace is opened and they can be executed.

That said, it might be possible that in some places 'helper' and 'module' are not used accurately and that is an honest mistake.

Line:86, lttng/org.eclipse.linuxtools.tmf.core/src/org/eclipse/linuxtools/internal/tmf/core/Activator.java -> Sure, the plugins loaded after this one will not have their source picked up by the source initialization, so to make sure it's there they would call TmfAnalysisManager.registreModuleSource(theSource)

-------------------------------------
