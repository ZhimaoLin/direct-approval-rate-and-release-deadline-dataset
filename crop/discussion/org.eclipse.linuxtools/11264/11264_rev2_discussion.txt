DESCRIPTION

tmf: Generalize the support for call sites and model URIs

The support for source code and model element look-up had been
specific to CTF. This commit generalizes the implementation so
that other trace extensions can use it.

Change-Id: Iff663e85e22a69f48258a5057de15b3e10e76863
Signed-off-by: Ricky Reeves xxx@xxx.xxx


COMMENTS

author: Ricky Reeves
date: 2013-03-19 18:45:52.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-03-19 18:45:58.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/linuxtools/1724/ 

-------------------------------------
author: Brenden Conley
date: 2013-03-19 18:58:06.000000000

Patch Set 2: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/linuxtools/1724/ : SUCCESS

-------------------------------------
author: Braxton Mccarthy
date: 2013-03-19 20:22:21.000000000

Patch Set 2:

This seems like a good approach. My only concerns at this point:

* Why does ITmfSourceLookup have both the notions of callsite and model URI? An event cannot supply one without supplying the other? Would it be better to have those in two separate interfaces?

Next you're gonna say: "That event can just return null then." To which I'd ask, why don't we just cram those methods in ITmfEvent then?

* Related to the previous point, the tmf.core.event package is starting to bloat again... Maybe it'd be worth moving all lookup-related interfaces and methods to a core.event.lookup package or similar?

-------------------------------------
author: Ricky Reeves
date: 2013-03-19 21:42:44.000000000

Patch Set 2:

Hi Alex, it's funny initially I had 2 interfaces. But I didn't want that we have Interfaces for each special attributes. Technically, both are a similar concepts. Based on your comment in the meeting to avoid too many interfaces for special attributes I went with the one interface approach. So, I should have went with my initial thought. Anyways, I'm going to change it to 2 interfaces because events will only implement what they need. I hope this is ok.

Having a own package makes sense.

-------------------------------------
