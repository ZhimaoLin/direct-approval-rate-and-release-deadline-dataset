DESCRIPTION

tmf: use trace range updated as trigger for building of analysis

The TmfTraceRangeUpdateSignal is used to inform relevant components
(e.g. TmfTrace, HistogramView, HistoryBuilder) about a new time range
of the trace that can be analyzed.

In the case of opening a non-streamed trace all relevant components
will start their analysis for the trace.

In the case of streaming all relevant components will restart their
analysis for the new received trace range.

This update will useful for the upcoming support of LTTng streaming.

Change-Id: I3b1efac8f57e5ea7c690dbfc6b767e480c4f0f23
Signed-off-by: Ricky Reeves <Meredith xxx@xxx.xxx


COMMENTS

author: Ricky Reeves
date: 2014-01-17 13:09:37.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2014-01-17 13:09:43.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5085/

-------------------------------------
author: Brenden Conley
date: 2014-01-17 13:53:55.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/5085/ : SUCCESS

-------------------------------------
author: Annalise Jimenez
date: 2014-01-17 14:59:47.000000000

Patch Set 3: Code-Review-1

I'm not sure about this.

Maybe the analysis itself should handle the trace range updated signal instead. They will know what to do about it.

And I see 2 problems with this patch:

1- the executeAnalysis method is a bit ill named, it should be initializeAnalysis. And right now (it's a bug I think), if it's called twice for a trace, it will recreate the analysis and remove inelegantly the old ones. The method as it is should be split in 2: initializeAnalyses (to instantiate analyses that apply to the trace) and executeAnalyses (to start automatic analyses and those scheduled to run).

2- If what you mean to do in the traceRangeUpdated method is to re-schedule the analysis, then as it is right now, it will have no effect. If it is already running, it won't start over and if it is completed, it won't run again.

So while that signal may be the key for streaming, there's a bit of thinking to do on where to put it. And if the trace happens to be the right place, then 1 and 2 should be dealt with before.

-------------------------------------
author: Ricky Reeves
date: 2014-01-17 20:54:10.000000000

Patch Set 3:

Hi Genevieve

I know streaming is not working right now and I also know that the analysis module won't resume. This will have to be done later on during streaming implementation.

This patch is not needed if we change the coalescing scheme to a time based solution. It is needed when we use the notifyPendingRequest()-solution It seems that nobody is really in favour. I'm still not 100% off that solution, because it gives the least latency in comparison to the time based solution. We need the coalescing to work for better performance.

Your suggestion to handle the TmfTraceRangeUpdated signal in the analysis module and have an intializeModule() when opening a trace could be a way to go. However id doesn't solve the coalescing issue since the analysis are executed in their on jobs.

I keep it the patch alive for now in case we need it.

-------------------------------------
