DESCRIPTION

tmf: Tweaks to CallStackStateProvider

- Add a considerEvent() method to put all checks in. This avoids
  running checks more than once per event.
- Make the abstract methods protected instead, they should not be called
  by external components.
- Add a check when popping state values if func_exit names are available.
  This makes sure the value matches the current function we are in. If it
  doesn't, log a warning in the error log. This will most definitely happen
  if there are lost events in the trace.

Change-Id: I1f2014486768c9317cbddb9556faf3e061f130b0
Signed-off-by: Braxton Mccarthy xxx@xxx.xxx


COMMENTS

author: Braxton Mccarthy
date: 2013-09-17 18:48:58.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2013-09-17 18:49:04.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3499/

-------------------------------------
author: Brenden Conley
date: 2013-09-17 19:17:07.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/linuxtools/job/linuxtools-gerrit/3499/ : SUCCESS

-------------------------------------
author: Luciana Barry
date: 2013-09-17 19:28:46.000000000

Patch Set 3: Code-Review+1 IP-Clean+1

OK, but food for thought:

- If the tracing starts too late at a moment when the stack is not empty, there can be warnings if those stack levels are popped during the trace. Do we consider this 'lost events' at the beginning of the trace?

- If the 'lost events' are because the trace ends too soon and there are still remaining stack levels at the end time, there is no warning however.

- If we pop too far (let's say because of real lost events this time) but the trace does not support function exit names, there will be no warning logged.

-------------------------------------
author: Braxton Mccarthy
date: 2013-09-17 22:18:19.000000000

Patch Set 3: Code-Review+2

Thanks for ze reviews!

> If the tracing starts too late at a moment when the stack is not empty,
> there can be warnings if those stack levels are popped during the trace.
> Do we consider this 'lost events' at the beginning of the trace?

No, we have no way of knowing. We will get some errors for the "missing pushes", but after that it should be fine for the rest of the trace.

But with UST traces, typically, one controls when they start the application and the tracer, unlike with kernel traces where the kernel is always "running". So this case is a tiny bit less common.

> If the 'lost events' are because the trace ends too soon and there are
> still remaining stack levels at the end time, there is no warning however.

The state system will end with some attributes in the stack, but that shouldn't be a problem.

> If we pop too far (let's say because of real lost events this time) but the
> trace does not support function exit names, there will be no warning logged.

I thought I handled this, since "UNDEFINED" wont equals() "no function"?

-------------------------------------
