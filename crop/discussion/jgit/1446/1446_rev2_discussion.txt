DESCRIPTION

[DRAFT] Read Index files in format "3".

Index files containing "extended" information can be read.
Extended flags are processed and available via
DirCacheEntry.isSkipWorkTree() and DirCacheEntry.isIntentToAdd()
"resolve-undo" information is completely ignored.

[For this draft, Javadocs have not yet been adjusted, Strings
have not been extracted to JGitText.]

Change-Id: Ie6e9c6784c9f265ca3c013c6dc0e6bd29d3b7233


COMMENTS

author: Saniya Hill
date: 2010-08-30 13:40:55.000000000

Uploaded patch set 2.

-------------------------------------
author: Yoselin Hanna
date: 2010-08-31 00:45:21.000000000

Patch Set 2: I would prefer that you didn't submit this

(24 inline comments)



Line:116, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> This collides with the UPDATE_NEEDED flag below.  As far as I can tel they sit in the same bit slot.  Perhaps a change before this one to correct our definition of UPDATE_NEEDED would be a good idea.

Line:117, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> I'm not sure these end-of-line comments provide us anything of value.

Line:138, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Style-nit: Unnecessary reformatting.  This line used to indent with tabs, now its using spaces.

Line:144, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Seems we use this only once.  Wouldn't it be easier to just do if (isExtended()) below?

Aside: And oh, the guy who came up with this format should be taken out back and shot.  Conditionally adding 2 bytes to an index record only based on a bit buried deep inside of the record?  Stupid.  Records are *still* padded out to an 8 byte alignment.  That padding wastes more than the 2 bytes would.  For many records, I'd bet we could fit the 2 additional bytes into the padding.  *sigh*

Line:426, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> The bit is either set or not, so != 0 is a faster test here.

Line:435, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> The bit is either set or not, so != 0 is a faster test here.

Line:616, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> I'm not sure we should expose this as a public member yet.  I doubt callers really need it, so lets start with it as package private.

Line:617, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Please do similar to what we do with ASSUME_VALID and UPDATE_NEEDED by checking the specific byte that this flag appears in and avoiding the decode to uint16.

Line:634, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> I would prefer:

  if (isExtended())
   return NB.decodeUInt16(info, infoOffset + P_FLAGS2) << 16;
  else
    return 0;

Line:948, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> I assume we'll drop this new variant in the when you add write support?

Line:249, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> I assume this flag won't be in the final version of the patch when we have writing support?

Line:306, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Please try to avoid reformatting lines you haven't modified.

Line:363, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Unnecessary reformatting.

Line:367, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Unnecessary reformatting.

Line:376, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Please use our MutableInteger class instead.

Line:378, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> The whole line is still shorter without the local temporary variable, and then we don't even need the curly brackets.  So basically, uh, use the older layout for this line of code.  :-)

Line:402, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Unnecessary reformatting.

Line:412, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Its OK to ignore an extension whose name is fully upper-case.  That still holds true in version 3, doesn't it?  So we should be OK to just ignore the EXT_RESOLVE_UNDO entry for now, and add support for it later on.

Line:432, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Unnecessary reformatting.

Line:442, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Unnecessary reformatting.

Line:454, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Unnecessary reformatting.

Line:489, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Unnecessary reformatting.

Line:607, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Style-nit: Unnecessary reformatting.

Line:15, /COMMIT_MSG -> A new unit test for version 3 formatted index files would also be nice.

-------------------------------------
author: Saniya Hill
date: 2010-08-31 12:12:17.000000000

Patch Set 2: (23 inline comments)



Line:116, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:117, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:138, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:144, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:426, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Hm, "faster" ... :) OK.

Line:435, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:616, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:617, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:634, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:249, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> I've added writing support now and skipped this flag, however I'm not sure if this is OK regarding RESOLVE_UNDO.

Line:306, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:363, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:367, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:376, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:378, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:402, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:412, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Is RESOLVE_UNDO definitely a performance optimization?

Line:432, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:442, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:454, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:489, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:607, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Done

Line:15, /COMMIT_MSG -> Done

-------------------------------------
author: Yoselin Hanna
date: 2010-08-31 18:41:22.000000000

Patch Set 2: (2 inline comments)



Line:426, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Its faster to compare to 0 because the JVM has opcodes specifically for that.  Comparing to a constant value like 0x40000000 requires using additional instructions to load that large integer from the constant pool onto the stack, and then compare to that integer.

When you turn around and JIT this bytecode, most processors can perform a compare-to-zero-and-conditional-jump pretty efficiently, its a very common idiom.  Comparing to a larger value like 0x40000000 still requires pushing that value into a register from the instruction stream, then doing the compare.  So assuming everything JITs out nicely, comparing to 0 should still be a full clock cycle faster than not.

Of course in all of this I'm assuming the compiler isn't smart enough to realize that the mask involved in the preceding & operator contains only a single bit set, and that therefore the result of the & operation is either going to be 0 or != 0, and that therefore it can optimize out the equality test to be a compare with zero instead of compare with the constant.  It may be that the compiler and-or-JIT is smart enough to figure that out, in which case my rule is pointless.  (FWIW, I just checked, the Sun javac can't do this optimization even when compiling with -O.)

Anyway, even ignoring all of that, our coding style when comparing a single bit is to use != 0, not the constant itself a second time.  We only use the constant when the & mask contains more than one bit and we need to test that a specific bit pattern remains, e.g. the way we test in FileMode.

:-)

Line:412, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCache.java -> Its not a performance optimization, but its categorized as one.  The reason being that they didn't want to completely break every existing Git implementation from being able to read a newer style index.  I don't claim to understand what they did, I'm just saying what it is.  The "standards" say any extension named with 4 capitals is an optional extension that can be safely skipped.  All other extensions must be rejected without further processing.  'REUC' is in the former category.

-------------------------------------
