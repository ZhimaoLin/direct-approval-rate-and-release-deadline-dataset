DESCRIPTION

Simple dumb HTTP server for Git

This is a simple HTTP server that provides the minimum server side
support required for dumb (non-git aware) transport clients.

We produce the info/refs and objects/info/packs file on the fly
from the local repository state, but otherwise serve data as raw
files from the on-disk structure.

In the future we could better optimize the FileSender class and the
servlets that use it to take advantage of direct file to network
APIs in more advanced servlet containers like Jetty.

Our glue package borrows the idea of a micro embedded DSL from
Google Guice and uses it to configure a collection of Filters
and HttpServlets, all of which are matched against requests using
regular expressions.  If a subgroup exists in the pattern, it is
extracted and used for the path info component of the request.

Change-Id: Ia0f1a425d07d035e344ae54faf8aeb04763e7487
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Yoselin Hanna
date: 2010-01-07 02:06:11.000000000

Uploaded patch set 9.

-------------------------------------
author: Yoselin Hanna
date: 2010-01-07 02:06:57.000000000

Patch Set 9:  Looks good to me, but someone else must approve; IP review completed



-------------------------------------
author: Blake Oneal
date: 2010-01-07 13:04:18.000000000

Patch Set 9: No score

I've gone through the code with a few minor comments. It would be good to test this somewhat - do we have standalone tests to serve this for verification purposes? If not, I'd like to play around a bit with the server myself to put it through its paces to check it out.

-------------------------------------
author: Douglas Trujillo
date: 2010-01-08 09:00:02.000000000

Patch Set 9: No score; No score



-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 15:26:29.000000000

MISMATCHED INLINE COMMENT
Line:1, org.eclipse.jgit.http.server/.gitignore -> Right now none of the projects have a .project file.  My intent is to merge smart-http as soon as folks will let me.  If someone follows with a patch to reintroduce the .project files as has been discussed on egit-dev, then they would need to add it here as well as in the other project directories.  So really I'm just following the current code convention and not trying to start a new one.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 15:26:29.000000000

MISMATCHED INLINE COMMENT
Line:1, org.eclipse.jgit.http.server/.gitignore -> We want to check in the Eclipse settings to make it easier/possible for people to develop this

-------------------------------------
author: Blake Oneal
date: 2010-03-10 15:26:29.000000000

MISMATCHED INLINE COMMENT
Line:1, org.eclipse.jgit.http.server/.gitignore -> Fair enough.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:138, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/resolver/FileResolver.java -> Probably because it wouldn't line wrap nicely.  :-)

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:138, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/resolver/FileResolver.java -> Why not do 

return isExportAll() || new File(...).exists()

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:138, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/resolver/FileResolver.java -> When we start changing code style just to satisfy the formatter, I think we're doing something wrong. Having an if/return true is somewhat ugly if the next bit is an else/boolean as well. The use of a return x || b is used in a number of places in the code (e.g. for nullable entries) and the like.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:148, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/resolver/FileResolver.java -> Yea, a regexp might perform better here by reducing the number of times we walk the string.  But would the regexp be easier to read and maintain?  Probably not.

I actually can't think of how to write the regexp for this method.  Its pretty hideous.

This method is only called once per incoming HTTP request, and in servers like Gerrit Code Review, its actually not even going to be used.  (Gerrit will override it with its own database lookup.)  

Its really not worth trying to optimize this in exchange for reduced readability.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:148, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/resolver/FileResolver.java -> There's a lot of walking of the name here. Would a regexp be more performant?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:148, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/resolver/FileResolver.java -> Can we change the ordering so that we do the startsWith first, then the contains, then the new File construction? At least that way, we'd fail faster, though in a successful case we'd still drop through all of them.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:78, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/NoCacheFilter.java -> Line wrapping.  The nocache string when inlined causes the line to wrap, which looks worse to me than using a local variable to hold the constant.  Either way the Eclipse source code formatter wants two use two lines for this rsp.setHeader call.  Any decent compiler will produce the same bytecode either way.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:78, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/NoCacheFilter.java -> Why in-line the two strings above and not this one?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:78, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/NoCacheFilter.java -> I really don't like doing things just because otherwise they flow onto different lines. Is that really so much of a problem?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:217, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GitServlet.java -> Yea, it has.  I actually copied this bit out of our Config class's getBoolean method.

I guess I should pull this into our StringUtil class.  I'll do it as a follow-up commit to this series, it looks like its probably not worth rebasing and re-reviewing everything just to correct this copy-and-paste braindamage I suffered from yesterday.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:217, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GitServlet.java -> Hasn't this bit of code been done elsewhere as well? Worth moving into some utility class to reuse, in case you ever want to e.g. add y or n to the list?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:217, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GitServlet.java -> Agreed.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:69, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/resolver/RepositoryResolver.java -> Yikes, I think you are right, we need to change this to ServiceNotAuthorizedException.

-------------------------------------
author: Douglas Trujillo
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:69, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/resolver/RepositoryResolver.java -> Shouldn't that be a ServiceNotAuthorizedException then ?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:259, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/glue/UrlPipeline.java -> Yes, we're recursively calling ourselves as we walk through the array of filters.

There really isn't a nice way to use some sort of idiom like:

  while (filter()) {
  }

because each filter in the chain gets to decide on its own whether or not we are allowed to call the next filter, or even call the servlet.  If the filter doesn't call our this.doFilter we can't continue down the chain.  If it does call us again, we have to keep going.

The only other alternative pattern would be to construct a new FilterChain instance on each filter invocation, e.g.:

  private class DoFilter implements FilterChain {
    private final int next;

    DoFilter(int idx) {
      next = idx;
    }

    public void doFilter(ServletRequest req, ServletResponse rsp) {
      if (next < filters.length)
        filters[next].doFilter(req, rsp, new DoFilter(next + 1));
      else
        servlet.service(req,rsp);
    }
  }

But this has the penalty of causing an object allocation per filter invocation and still has the same structure.

I actually looked around a bit before implementing this code.  Both Jetty and Guice Servlet implement this same style of coding for filter dispatch, to reduce the number of temporary objects they have to create during request dispatching.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:259, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/glue/UrlPipeline.java -> The act of calling doFilter seems to call the next one in the series. Does that mean we get called back before ultimately deciding on whether to do the next one or not? Wouldn't it be better to have a filter method which returned a true/false to say whether it's worth calling the next one or not, and explicitly having a while(filter()) call somewhere to process them all, rather than a mutating state?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:259, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/glue/UrlPipeline.java -> OK, what tests do we have so that we know it works as expected?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:107, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Probably not worth making x-gzip constant.  We reference it in only one location.

But, we probably don't actually have to support it.  The only clients that really matter are the JRE's internal client, and libcurl.  I think both use "gzip" and not "x-gzip".

But, there isn't any real harm in supporting it either.  We know how to unfold what is commonly called "x-gzip", as that's just an alias for "gzip".  Code's written.  We might as well just honor it.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:107, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Worth making this an ENCODING_GZIP_LEGACY constant somewhere? Do we even need to support it?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:107, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> If we're not going to do a constant in place, we should probably put the // NON -NLS thing to indicate it's not supposed to be translated.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:118, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> It depends on what you are talking about as to what the encoding decision is.

Git generally prefers UTF-8, whenever possible, because it plays nicely in C as a char*, and because it can contain any Unicode character.  Commit messages and tag messages for example are UTF-8 unless somehow otherwise specified.

For some data, Git hasn't yet specified a particular encoding, but its actually just being difficult and refusing to, because the data is derived from file names and is using the readdir() return as-is without checking the platform's LC settings.

Within JGit I think I only use this function to return the objects/info/pack file.  That file's format is actually strictly defined as being a limited subset of US-ASCII (e.g. the character "Z" cannot appear in that file, nor can a horizontal tab, let alone a smart quote or a Cyrillic character).

Calling it UTF-8 when its really US-ASCII is fine, UTF-8 is slightly more widely recognized as a character encoding these days.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:118, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> (for my edification) Has Git decided on UTF-8 for the encoding, now? Or is this just for JGit?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:118, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Thanks

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:140, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Doh!  I have no good reason for why this wasn't just inlined into the getBytes and setCharacterEncoding calls that use it.  Though I can try to argue that by putting it into the local its harder to screw up the two calls that need the same encoding.  :-)

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:140, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Why not in-line 'enc'?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:140, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Can we in-line in a future commit?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:142, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> No, we don't have a constant.  But we have 3 references to text/plain in the http server code package.  *sigh*

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:142, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Surely we must have a constant for text/plain somewhere ...

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:142, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Can we make it a constant, but probably not as a rebase as with other comments?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:197, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> The objects are all pretty small.  We're only deflating plain text streams that we've created in-memory.  E.g. taking a 16 KiB text and chopping it down to 8 KiB.  Anything large like an actual file content or pack file is streamed as-is to the client without additional compression (because its already been compressed).

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:197, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> How large are the objects likely to be? Could this take up a huge amount of memory?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:197, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> OK

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:207, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> Why is this a bad spot to create a MessageDigest?  We want to compute the SHA-1 hash of the content array, the standard way we do that in JGit is to create a MessageDigest though this factory function, use it, and discard.  We usually don't pool MessageDigests because they tend to be fairly inexpensive.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:207, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> This seems like a bad place to have a method instantiating message digest objects ...

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:207, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ServletUtils.java -> I'm sorry, I wasn't clear.

I meant that having Constants.newMessageDigest() seems like the wrong place to put a 'newMessageDigest()' constructor, particularly if Constants is otherwise a class that just contains, well, constants.

I agree we need to instantiate a new message digest at this point. But I think the factory belongs somewhere else; maybe even a MessageDigets class that we instantiate here directly with new MessageDigest().

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:146, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ObjectFileServlet.java -> Actually, no.  The line is relying on the order of operations rules to actually truncate the milliseconds off the timestamp.  So if you really want parens you need to write:

  lastModified = (sender.getLastModified() / 1000) * 1000

But I don't bother because that's the natural order of operations as we are all taught in grade school, and as the language has defined it to be (because of our grade school teachings).

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:146, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ObjectFileServlet.java -> Worth putting the 1000 * 1000 in parens to make it clear?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:146, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/ObjectFileServlet.java -> Even better to put the brackets in then. If you're dividing a number by 1000, then multiplying it by 1000, you're just normalising it to 3dp, right? It doesn't come out as that is being the intent. Putting the parens in would help others understand that directly.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:111, org.eclipse.jgit/src/org/eclipse/jgit/util/HttpSupport.java -> ENCODING_GZIP_LEGACY?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:73, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/TextFileServlet.java -> Constant for text/plain, as elsewhere?

-------------------------------------
