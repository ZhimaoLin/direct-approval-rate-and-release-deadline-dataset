DESCRIPTION

Simple dumb HTTP server for Git

This is a horribly simple HTTP server which provides only the
server side support required for dumb transport clients.  We
produce the info/refs and objects/info/packs file on the fly
from the local repository state, but otherwise serve data as
raw files from disk.

We could better optimize the Sender class and those that use
it to take advantage of direct file to network APIs in more
advanced servlet containers like Jetty.  This is left for a
future improvement to the code.

Change-Id: Ia0f1a425d07d035e344ae54faf8aeb04763e7487
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Yoselin Hanna
date: 2009-10-07 10:11:10.000000000

Uploaded patch set 3.

-------------------------------------
author: Blake Oneal
date: 2009-10-08 19:16:01.000000000

Patch Set 3: No score

Still reviewing, so leaving as 0 for the time being (about to lose internet connection, don't want to lose comments so far)

-------------------------------------
author: Yoselin Hanna
date: 2009-10-09 01:04:10.000000000

Patch Set 3:

Dang, forgot to publish my drafts on patch set 3.  :-)

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:69, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> The red blob marks a whitespace error, in this case trailing whitespace since it is on the end of a line.  (Same display as git diff gives you when coloring is turned on.)

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:69, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> What does the red blob in Gerrit signify after the * on this line? Trailing whitespace?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:87, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> Red blob?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:100, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> Red blob?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:105, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> These were copied from Gerrit Code Review, which in turn has copied them from internal Google documentation describing how to properly mark HTTP entities as not cacheable by browsers or proxies.

The date doesn't matter, just that it is behind the Date header sent by the HTTP server.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:105, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> The epoch is usually 1970, rather than 1980 - any particular reason for the change? Functionally equivalent, of course.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:107, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> I just went back and reread our internal documentation, we now recommend that the header be:

  Cache-Control: no-cache, no-store, max-age=0, must-revalidate

which is fairly aggressive in not caching content.  I'm fairly inclined to trust our internal documentation here, we are quite good at keeping this information current and valid across our entire product line.  And we have a rather large user base on the web.

I'm not an HTTP 1.1 expert, but it seems to me that sending multiple Cache-Control lines isn't what the standard recommends and may inadvertently break a user agent or proxy that recognizes a proper Cache-Control line.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:107, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> Seen proxies before that didn't parse multiple entries on a Cache-Control line. Do we need both, or can we just use no-cache ?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:116, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> Red Blob?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:122, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> See the no-cache case above.

Our internal docs actually suggest:

  Cache-Control: public, max-age=31536000

instead of the reverse above, so we might want to change this.  But IIRC public is needed to let proper HTTP 1.1 proxies know its OK to cache this content for all users of the proxy, not just the original requester.

If a proxy isn't able to honor this, its a busted proxy and is going to be doomed to fetching content it could have served from cache.  That's less of an issue than above with the no-cache case where a busted proxy might serve a cached result when it wasn't supposed to.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:122, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> Seen proxies before that didn't parse multiple entries on a Cache-Control line. Do we need both, or can we just use max-age?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:139, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> Red blob?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:183, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> Good point, I'll add raw.length + 32 to the constructor.  Sadly we wind up with a copy anyway at the end because we cast back to a byte[] and will need to compact, but at least we save a handful of doubling expansions during compression.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:183, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/RepositoryServlet.java -> Worth initializing to raw.length+32, to save in-line expansion when writing out the byte array?

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:57, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GetRefServlet.java -> Do Servlets have to be public in order to be instantiated from a web.xml?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:57, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GetRefServlet.java -> Yes, servlets have to be public to be loaded from web.xml.

These servlets are not meant to load from web.xml, but instead are loaded by the RepositoryRouter filter.  Applications would map RepositoryRouter into their namespace by some means, one of which can be by adding the filter in their web.xml.  Another possibility is to directly create the RepositoryRouter filter in their own Filter, delegating where necessary.  This is the approach any Guice based web application (like Gerrit Code Review) would prefer to use.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:60, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GetRefServlet.java -> Hmm, good point, we do repeat UTF-8 encoding in a lot of places.  We already have a constant that says UTF-8, but I wanted to document it here explicitly that we were using UTF-8 for the output of this servlet.  Its unlikely to ever change.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:60, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GetRefServlet.java -> I'm pretty sure this constant turns up a few times - can we pull it out to a shared location?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:63, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/InfoPacksServlet.java -> Yes, I missed that obvious refactoring on the doGet/doHead.

Actually, looking at the servlet spec, doHead by default calls doGet with a null output stream.  Since are already computing the response content and discarding it, its cleaner to just use the default doHead implementation.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:63, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/InfoPacksServlet.java -> This seems to be a recurring pattern. Should we pull up into an abstract parent and then let subclasses merely handle serve(req,res,true/false)?

-------------------------------------
