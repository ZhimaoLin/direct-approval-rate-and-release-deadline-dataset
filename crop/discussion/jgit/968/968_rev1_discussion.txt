DESCRIPTION

Redo PackWriter object reuse output

Output of selected reuses is refactored to use a new ObjectReuseAsIs
interface that extends the ObjectReader.  This interface allows the
reader to control how it performs the reuse into the output stream,
but also allows it to throw an exception to request the writer to
find a different candidate representation.

The PackFile reuse code was overhauled, cleaning up the APIs so they
aren't exposed in the object loader, but instead are now a single
method on the PackFile itself.  The reuse algorithm was changed to do
a data verification pass, followed by the copy pass to the output.
This permits us to work around a corrupt object in a pack file by
seeking another copy of that object when this one is bad.

The reuse code was also optimized for the common case, where the
in-pack representation is under 16 KiB.  In these smaller cases
data is sent to the pack writer more directly, avoiding some copying.

Change-Id: I6350c2b444118305e8446ce1dfd049259832bcca
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Juliet Cantu
date: 2010-07-02 22:37:29.000000000

Patch Set 1: Looks good to me, but someone else must approve; IP review completed

(1 inline comment)



Line:119, org.eclipse.jgit/src/org/eclipse/jgit/lib/PackFile.java -> However when that happens, is a short list typical or not? What is the experience, single bit errors corrupt single objects or truncated files with lots of problems?

-------------------------------------
author: Yoselin Hanna
date: 2010-07-02 22:43:37.000000000

Patch Set 1: (1 inline comment)



Line:119, org.eclipse.jgit/src/org/eclipse/jgit/lib/PackFile.java -> Experience is this will be a short list.  Single bit errors in the middle of a pack stream for one object.  Not the whole file being damaged, or truncated.  Of course a single bit error in the wrong object can ruin an entire tree of things that depend on it as a delta base.  :-(

-------------------------------------
author: Yoselin Hanna
date: 2010-07-27 16:11:49.000000000

Change has been successfully pushed.

-------------------------------------
