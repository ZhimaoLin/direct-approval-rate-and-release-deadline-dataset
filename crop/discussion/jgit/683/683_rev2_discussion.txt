DESCRIPTION

Add compatibility with gitignore specifications

I tried to meet the requirements. Let me know if there's
anything that needs changing :)

Please see my talk page for some documentation of the covered
cases (documentation is not comprehensive right now)

http://wiki.eclipse.org/User_talk:Charley.wang.gmail.com

Todo:
- Implement more intelligent node parsing.
- Better cache than just a HashMap. Suggestion was to move
  this into RepositoryMapping in EGit.
- The rule for matching e.g. "/src/ne?" to "/src/new/file.c"
  is slow.

Bug: 303925
Change-Id: Iebd7e5bb534accca4bf00d25bbc1f561d7cad11b


COMMENTS

author: Reese Nunez
date: 2010-05-11 14:38:14.000000000

Uploaded patch set 2.

-------------------------------------
author: Reese Nunez
date: 2010-05-11 14:38:50.000000000

Patch Set 2: No score

First patch set is the changes only, second patch set includes some test cases.

-------------------------------------
author: Douglas Trujillo
date: 2010-05-12 23:16:00.000000000

Patch Set 2: I would prefer that you didn't submit this; Unclean IP, do not check in

good work ! but still some way to go

This change needs a CQ hence marked unclean IP

the test IgnoreCacheTest.testExclude fails
junit.framework.AssertionFailedError: expected:<3> but was:<0>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:198)
	at junit.framework.Assert.assertEquals(Assert.java:204)
	at org.eclipse.jgit.ignore.IgnoreCacheTest.testExclude(IgnoreCacheTest.java:149)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

the test IgnoreCacheTest.testPriorities fails
junit.framework.AssertionFailedError: Excludes file was not initialized
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at junit.framework.Assert.assertNotNull(Assert.java:217)
	at org.eclipse.jgit.ignore.IgnoreCacheTest.testPriorities(IgnoreCacheTest.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

Test coverage could be improved:
- IgnoreRule: get methods
- IgnoreNode: parse methods, isIgnored, wasMatched
- SimpleIgnoreCache: fullyInitialize, readIgnoreRules,
     addIgnoreNode when (ignoreMap.get(directory) != null)
     getParent when return value isn't empty string

Line:49, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreMatcherTest.java -> style nit: one blank line is sufficient

Line:58, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreMatcherTest.java -> style: one blank line only

Line:195, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreMatcherTest.java -> style: unnecessary blank line

Line:201, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreMatcherTest.java -> style: unnecessary blank line

Line:51, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreRule.java -> style: we don't xxx@xxx.xxx tags

JavaDoc missing for public class

Line:108, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreRule.java -> FindBugs says for better performance you should better use Character.valueOf(char) instead of new Character(char).

see pattern DM_NUMBER_CTOR in
http://findbugs.sourceforge.net/bugDescriptions.html

Line:116, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreRule.java -> you should also explain the meaning of "!"

Line:223, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreRule.java -> can we enforce that apply has been called before and throw an exception if this wasn't done ?

Line:227, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreRule.java -> Better name for this method ? getResult sounds quite generic.

Line:228, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreRule.java -> this looks funny, maybe a better name than "negation" would help readability

Line:53, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> style: extra blank line, you have a lot of extra blank lines in this class

Line:57, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> style: we don't xxx@xxx.xxx tags

Line:71, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> typo: "." missing at the end of this sentence

Line:98, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> style: no curly braces for single line statement

Line:102, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> findbugs: reader should be closed in a finally block to prevent file descriptor leaks

Line:106, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> style: no braces around single line block

Line:139, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> missing description

Line:143, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> here you throw IOException, some lines below you catch it, this looks inconsistent ?

Line:148, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> findbugs: this may throw NPE if rules == null

Line:197, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> missing description

Line:200, org.eclipse.jgit/src/org/eclipse/jgit/ignore/IgnoreNode.java -> how can this throw IOException ?

Line:13, org.eclipse.jgit/META-INF/MANIFEST.MF -> package version is missing, add ";version=0.8.0"

Line:76, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> description missing

Line:106, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: no braces for single line

Line:123, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> missing description

Line:132, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: no braces for single line

Line:138, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: no braces for single line

Line:164, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: no braces for single line

Line:175, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: extra blank in front of first tab

can we raise an exception if used on base directory ?

Line:184, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: no braces for single line

Line:198, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: extra blank line

Line:205, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: no braces for single line

Line:211, org.eclipse.jgit/src/org/eclipse/jgit/ignore/SimpleIgnoreCache.java -> style: no braces for single line

Line:57, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreCacheTest.java -> style nit: we don't xxx@xxx.xxx tags

Line:62, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreCacheTest.java -> style nit: one blank line is enough here

Line:73, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreCacheTest.java -> I think that's no TODO, for a test case this is ok

Line:118, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreCacheTest.java -> style nit: unnecessary blank line

Line:132, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreCacheTest.java -> not a TODO

Line:175, org.eclipse.jgit.test/tst/org/eclipse/jgit/ignore/IgnoreCacheTest.java -> not a TODO

-------------------------------------
