DESCRIPTION

Add option to DirCacheCheckout to allow skipping conflicting files

A new property 'skipConflicts' allows to skip conflicting files during
checkout. Non-conflicting files will be checked out as usual and
getConflicts() lists the files which were skipped during checkout due
to conflicts.

Note that this option is only relevant if failOnConflict is false.

Signed-off-by: Brian Lynch xxx@xxx.xxx
Change-Id: Ice23f2c8a48d81f939e5a536e8f51ecd41b858fe

COMMENTS

author: Brian Lynch
date: 2016-06-23 12:20:58.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2016-06-23 12:21:05.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8551/

-------------------------------------
author: Brenden Conley
date: 2016-06-23 12:27:01.000000000

Patch Set 3: Verified-1

Build Failed 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8551/ : FAILURE

-------------------------------------
author: Zachary Orozco
date: 2016-06-27 11:10:39.000000000

Patch Set 3:

(3 comments)

An alternative idea to solve the problem could be: Let processEntry() inspect each path individually. Currently you introduce a dependency in that extend that the outcome for 'f/a' depends on the outcome of 'f'. Why not modify only doCheckout() to  handle better the complicated situations (e.g. conflict on 'f' and update on 'f/a').

Line:1003, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I am also not sure whether this implementation efficient. This is the standard case during a checkout and maybe that's too expensive.
Maybe you could make use of the guaranteed order in which we go through the index entries. If postOrderTraversal is false then we know that after f/ we will visit f/a, f/b....
When we enter the subtree f/ we could set a flag 'insideConflictingFolder' and we know that all pathes are underneath a folder which has conflicts.

Line:1010, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I am missing an else branch here. This method has to decide for every path how index and the workingtree for this path should look like. It calls conflict(),keep(),update(),remove() for each path. But if we reach this block and update==false then we simply don't take a decision. If index contained f/a and during checkout we detect a file/folder conflict on f then what should be stored in the index after the checkout? I propose to keep f/a in the index least to the resulting index. We would have to call keep() in the else branch to achieve this.

Line:1690, org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/DirCacheCheckoutTest.java -> A checkout does not only update the workingtree but also populates the index. Even the other way round: we first decide on what should go in the index and afterwards update also the working tree. Like in "git read-tree -u ...". I suggest to enhance the tests to have assertions on the index (see assertions on indexState() in other tests in class). And we should have assertions on git.status().call().isclean()

-------------------------------------
author: Brenden Conley
date: 2016-06-27 22:34:29.000000000

Patch Set 3: -Verified

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8570/

-------------------------------------
author: Brenden Conley
date: 2016-06-27 22:44:48.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8570/ : SUCCESS

-------------------------------------
author: Elise Key
date: 2017-08-29 13:15:39.000000000

Abandoned

Abandoning after 1 year or more of inactivity.

If this change is still needed, please restore it.

-------------------------------------
