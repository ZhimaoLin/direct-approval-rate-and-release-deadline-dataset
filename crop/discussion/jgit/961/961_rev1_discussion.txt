DESCRIPTION

Redo event listeners to be more generic

Replace the old crude event listener system with a much more generic
implementation, patterned after the event dispatch techniques used
in Google Web Toolkit 1.5 and later.

Each event delivers to an interface that defines a single method,
and the event itself is what performs the delivery in a type-safe
way through its own dispatch method.

Listeners are registered in a generic listener list, indexed by
the interface they implement and wish to receive an event for.
Delivery of events is performed by looping through all listeners
implementing the event's corresponding listener interface, and using
the event's own dispatch method to deliver the event.  This is the
classical "double dispatch" pattern for event delivery.

Listeners can be unregistered by invoking remove() on their
registration handle.  This change therefore requires application
code to track the handle if it wishes to remove the listener at a
later point in time.

Event delivery is now exposed as a generic public method on the
Repository class, making it easier for any type of message to
be sent out to any type of listener that has registered, without
needing to pre-arrange for type-safe fireFoo() methods.

New event types can be added in the future simply by defining a
new RepositoryEvent subclass and a corresponding RepositoryListener
interface that it dispatches to.  By always adding new events through
a new interface, we never need to worry about defining an Adapter
to provide default no-op implementations of new event methods.

Change-Id: I651417b3098b9afc93d91085e9f0b2265df8fc81
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Blake Oneal
date: 2010-07-02 08:52:12.000000000

Patch Set 1: Looks good to me, but someone else must approve

(1 inline comment)



Line:64, org.eclipse.jgit/src/org/eclipse/jgit/events/ListenerList.java -> This seems to be a utility method which doesn't otherwise belong in this class. Is the plan to evolve methods to add new ones here? Is there anywhere else we could put it (e.g. a static method on the event class?)

-------------------------------------
author: Juliet Cantu
date: 2010-07-02 22:17:06.000000000

Patch Set 1: Looks good to me, approved; IP review completed



-------------------------------------
author: Douglas Trujillo
date: 2010-07-02 22:35:28.000000000

Patch Set 1: (2 inline comments)

Some of these renames are probably only detected as renames since the two versions carry the same license header, right? This looks odd, but a generic diff can't see this oddity

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/events/IndexChangedListener.java -> I think the copyright should change here as in the previous class since your replace the complete class by an interface

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/events/RefsChangedListener.java -> again this should be your copyright, nothing seems to be left from the original code

-------------------------------------
author: Yoselin Hanna
date: 2010-07-02 22:39:39.000000000

Patch Set 1:

Yea, rename detection failed horribly on this change.  The files are really small, and the headers are really big, and the bulk of the header doesn't change since its common to every file.

Anyway, I left the copyright headers in because the files are derived from Robin's work. I took his work, copied it, pasted to the new file, and deleted the other method.  Its derived enough that I felt better leaving his notice than to strip it out.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-27 16:11:52.000000000

Change has been successfully pushed.

-------------------------------------
