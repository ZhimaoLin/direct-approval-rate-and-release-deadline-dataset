DESCRIPTION

Invalidate DfsObjDatabase pack list when refs are updated

Currently, there is a race where a user of a DfsRepository in a single
thread may get unexpected MissingObjectExceptions trying to look up an
object that appears as the current value of a ref:

1. Thread A scans packs before scanning refs, for example by reading
   an object by SHA-1.
2. Thread B flushes an object and updates a ref to point to that
   object.
3. Thread A looks up the ref updated in (2). Since it is scanning refs
   for the first time, it sees the new object SHA-1.
4. Thread A tries to read the object it found in (3), using the cached
   pack list it got from (1). The object appears missing.

Allow implementations to work around this by marking the object
database's current pack list as "dirty." A dirty pack list means that
DfsReader will rescan packs and try again if a requested object is
missing. Implementations should mark objects as dirty any time the ref
database reads or scans refs that might be newer than a previously
cached pack list.

Change-Id: I06c722b20c859ed1475628ec6a2f6d3d6d580700


COMMENTS

author: Santos Moore
date: 2016-07-14 17:47:18.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2016-07-14 17:47:26.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8698/

-------------------------------------
author: Brenden Conley
date: 2016-07-14 18:02:54.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8698/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2016-07-14 18:52:33.000000000

Patch Set 3: Code-Review-1

(3 comments)

Almost happy with this.

Line:172, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsReader.java -> <

Line:310, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsReader.java -> I think you need something more like:

  if (!pending.isEmpty() && packList.dirty())

Because as written right now you might as well just check packList.dirty() up front and rescan before running findAllImpl once.

Line:322, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsReader.java -> You need a check for packs.length == 0 here to just return early. Its a protection against an empty repository throwing ArrayIndexOutOfBoundsException when it was given a list of objects to find.

-------------------------------------
author: Santos Moore
date: 2016-07-14 19:58:19.000000000

Patch Set 3:

(4 comments)

Line:172, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsReader.java -> Done

Line:300, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsReader.java -> If it turns out a LinkedList is too messy on the heap, we could replace this with an ArrayList<T> and ArrayList<Boolean> indicating whether the object has been removed from the list. About the same memory usage and requires 3 iterations over N objects, but less garbage created.

That's premature optimization though.

Line:310, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsReader.java -> Done

Line:322, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsReader.java -> Done

-------------------------------------
author: Yoselin Hanna
date: 2016-07-14 22:07:28.000000000

Patch Set 3:

(1 comment)

Line:300, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsReader.java -> Yea I agree that is premature optimization. Lets avoid something that ugly unless data shows this is a horrible source of garbage that has to be fixed.

-------------------------------------
author: Gerrit Code Review
date: 2016-07-19 14:51:52.000000000

Change has been successfully merged into the git repository by Santos Moore

-------------------------------------
