DESCRIPTION

ReceivePack: Pass atomic setting from client to BatchRefUpdate

Change-Id: I0e4e6cef693e8138562f5ca345e0db61a8abef9c


COMMENTS

author: Eden Lin
date: 2016-05-04 21:04:49.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2016-05-04 21:05:00.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8319/

-------------------------------------
author: Brenden Conley
date: 2016-05-04 21:05:57.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8319/ : ABORTED

-------------------------------------
author: Brenden Conley
date: 2016-05-04 21:06:04.000000000

Patch Set 1: -Verified

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8321/

-------------------------------------
author: Santos Moore
date: 2016-05-04 21:11:34.000000000

Patch Set 1:

This will cause --atomic to fail when the server is backed by a RefDatabase implementation that is not capable of performing atomic transactions (BatchRefUpdate.java:326).

This is a behavior change. Prior to this change, passing --atomic would enable the arm's-length atomic-ish ff checking in ReceivePack, without providing atomicity in the underlying storage layer. I am not sure this is ok, as people running servers may have already been depending on that behavior.

-------------------------------------
author: Eden Lin
date: 2016-05-04 21:17:27.000000000

Patch Set 1:

> This will cause --atomic to fail when the server is backed by a
 > RefDatabase implementation that is not capable of performing atomic
 > transactions (BatchRefUpdate.java:326).
 > 
 > This is a behavior change. Prior to this change, passing --atomic
 > would enable the arm's-length atomic-ish ff checking in
 > ReceivePack, without providing atomicity in the underlying storage
 > layer. I am not sure this is ok, as people running servers may have
 > already been depending on that behavior.

The client doesn't allow --atomic in that case:

        if (server_supports("atomic"))
                atomic_supported = 1;
 [...]
        if (args->atomic && !atomic_supported)
                die(_("the receiving end does not support --atomic push"));

(https://kernel.googlesource.com/pub/scm/git/git/+/c8b8f22a/send-pack.c#362).

-------------------------------------
author: Brenden Conley
date: 2016-05-04 21:17:48.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8321/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2016-05-04 21:22:01.000000000

Patch Set 1: Code-Review+2

-------------------------------------
author: Santos Moore
date: 2016-05-04 21:24:10.000000000

Patch Set 1: Code-Review+2

> > This will cause --atomic to fail when the server is backed by a
 > > RefDatabase implementation that is not capable of performing
 > atomic
 > > transactions (BatchRefUpdate.java:326).
 > >
 > > This is a behavior change. Prior to this change, passing --atomic
 > > would enable the arm's-length atomic-ish ff checking in
 > > ReceivePack, without providing atomicity in the underlying
 > storage
 > > layer. I am not sure this is ok, as people running servers may
 > have
 > > already been depending on that behavior.
 > 
 > The client doesn't allow --atomic in that case:
 > 
 > if (server_supports("atomic"))
 > atomic_supported = 1;
 > [...]
 > if (args->atomic && !atomic_supported)
 > die(_("the receiving end does not support --atomic push"));
 > 
 > (https://kernel.googlesource.com/pub/scm/git/git/+/c8b8f22a/send-pack.c#362).

Ah, I forgot the part of BaseReceivePack where it only advertises the capability if the backend supports it.

-------------------------------------
author: Gerrit Code Review
date: 2016-05-04 21:42:58.000000000

Change has been successfully merged into the git repository by Eden Lin

-------------------------------------
