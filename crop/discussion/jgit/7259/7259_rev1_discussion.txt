DESCRIPTION

DirCacheCheckout: Fix handling of files removed in index

When a file is marked as removed in the index and neither contents nor
mode differ between "head" and "merge", the index should be kept. If
they differ, a checkout conflict should occur. This is described in
Git's git-read-tree.txt.

JGit used to replace the index state with "merge" in both of the above
cases.

A confusing effect of this was that when one removed a file and then did
a rebase, the file silently reappeared again.

The changes to dir/file conflict handling are a consequence of this
change, as the index handling change made tests in DirCacheCheckoutTest
break. I compared these cases to C Git and the new behavior there also
matches what C Git does.

Bug: 387390
Change-Id: I5beb781f12172a68f98c67d4c8029eb51ceae62d
Signed-off-by: Danika Greer xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2012-08-16 14:29:51.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2129/ 

-------------------------------------
author: Brenden Conley
date: 2012-08-16 14:36:55.000000000

Patch Set 1: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2129/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2012-08-31 13:11:28.000000000

Patch Set 1: I would prefer that you didn't submit this

(4 inline comments)

I think that's a bug. I am not sure about how you document the directory/folder conflict case 4

Line:711, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I think you found a severe typo in this javadoc comment. IIRC I wrote down this table first and then coded based on this table. And here, for case 3, it's wrong to say "use M". Your suggestion to "keep" or "fail" is correct. I am wondering how this has happened and checked jgit history and even the history of the native git documentation (maybe it was wrongly documented at that point in time) ... but I can't find a better explanation then "typo".

There is much more elaborated table which I used also during development which contains the right data for this case: https://docs.google.com/spreadsheet/ccc?key=0Ask8nTwp7sXedElIQWg3bGlINENuNGtlN0lQYVZVSFE&authkey=CJn1mC4
. But it seems I used the wrong javadoc comment for implementing.

Line:556, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I am not sure about case 4. Shouldn't it be "Conflict?". Try this:

 git init
 mkdir d
 touch d/b
 git add d/b
 git commit -m "adding d/b"
 git checkout -b side
 echo foo > d/b
 git commit -a -m "modifying d/b"
 git checkout master
 git rm d/b
 touch d
 git add d
 git checkout side

Line:9, /COMMIT_MSG -> Just a comment: Files are not marked as removed in the index. They just don't exist. If you say 'git rm --cached f.txt' then the entry for f.txt will simply be removed from the index and you have no trace anymore that it once existed in the index.

Line:467, org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/DirCacheCheckoutTest.java -> Why do you keep the result for case '4' to be 'Update'. In DirCacheCheckout you modfied the documentation to have "Keep" as result and in the tests you check that is is "Conflict". I think the sematicaly correct result for case 4 should be "Conflict". If you agree then please correct here and in the javadoc in DirCacheCheckout.

-------------------------------------
author: Juliet Cantu
date: 2012-08-31 14:07:06.000000000

Patch Set 1: (1 inline comment)



Line:711, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> The Git documentation was "clarified" at some point. I think this change does the right thing.

-------------------------------------
author: Danika Greer
date: 2012-09-01 11:34:02.000000000

Patch Set 1: (3 inline comments)



Line:556, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Yes, it should say conflict, corrected as part of addressing previous comment. Good catch.

Line:9, /COMMIT_MSG -> Done

Line:467, org.eclipse.jgit.test/tst/org/eclipse/jgit/lib/DirCacheCheckoutTest.java -> Right, I was confused by the code for D/F. Changed both comments.

-------------------------------------
