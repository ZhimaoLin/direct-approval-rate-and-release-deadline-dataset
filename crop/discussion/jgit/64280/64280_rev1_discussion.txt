DESCRIPTION

Add progress monitor to Merger

GitCommand and MergeCommand are also affected.
Monitoring progress of merges can be useful for users for large
repositories or complex merge processes that take some time.

Change-Id: I17b978b3fc91750dd88649638b90a46820a0877c
Signed-off-by: Maleah Marks xxx@xxx.xxx


COMMENTS

author: Maleah Marks
date: 2016-01-13 15:57:21.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2016-01-13 15:57:27.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7864/

-------------------------------------
author: Brenden Conley
date: 2016-01-13 16:05:10.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7864/ : SUCCESS

-------------------------------------
author: Maren Gonzales
date: 2016-01-15 18:29:37.000000000

Patch Set 1:

(2 comments)

Please also update the copyright headers.

Just one questions, otherwise it looks fine. Thanks!

Line:333, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> Wouldn't it be also making sense to use the monitor in other git commands, such as the RebaseCommand, which would have to forward it again when doing merges through git.merge() and so on?

I know this is just a first step (introducing and using it in merges), but I'm wondering how this could be introduced without a lot of modifications (e.g. in the methods in class Git) to forward it to called commands that may potentially be also long-running.

Line:9, /COMMIT_MSG -> I think this sentence is not very useful in the comment.

-------------------------------------
author: Zachary Orozco
date: 2016-01-18 08:43:38.000000000

Patch Set 1:

Before your this change there have already been 10 GitCommands (Clone,Diff,Fetch,GarbageCollect,Pull,Push,Rebase,Status,SubmoduleAdd,SubModuleUpdate) which supported a progressMonitor with a setProgressMonitor() method and a progressMonitor field. What you did was to introduce a setProgressMonitor method and a field in the common superclass. Now all commands have a setProgressMonitor() method, also those which don't support them (that's what I really dislike). And commands which supported it before have duplicate fields (one in GitCommand and one in the specific class). I would suggest either to introduce a subclass of GitCommand (MonitoringGitCommand or so) which introduces setProgressMonitor and the field. The 10 commands should subclass from there and their own fields and setters should be removed. Alternatively which could stick with letting every command which want to support progressmonitor do it on their own.

-------------------------------------
author: Maleah Marks
date: 2016-01-18 09:21:24.000000000

Patch Set 1:

Thanks for your feedback Christian.
I will introduce a MonitoringGitCommand that all commands that support monitoring will sub-class, thanks for suggesting that.

-------------------------------------
author: Maleah Marks
date: 2016-01-18 09:45:35.000000000

Patch Set 1:

After looking into it a bit more, it seems that removing the existing fields and methods to group them in a common super-class seems to break the API. So I think I'll revert to letting each command manage a progress monitor on their own, as was done before.
It seems more safe and to have less impact.

-------------------------------------
author: Gerrit Code Review
date: 2016-01-21 10:52:02.000000000

Change has been successfully merged into the git repository by Douglas Trujillo

-------------------------------------
