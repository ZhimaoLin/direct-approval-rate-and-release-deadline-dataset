DESCRIPTION

Ketch: Basic replication system

Change-Id: Ib378dab068961fc7de624cd96030266660b64fb4


COMMENTS

author: Yoselin Hanna
date: 2016-01-13 06:27:45.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2016-01-13 06:27:51.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7861/

-------------------------------------
author: Brenden Conley
date: 2016-01-13 06:35:37.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7861/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2016-01-13 07:44:54.000000000

Patch Set 2:

Is this WIP? If not it would be helpful if get some more docs what this is all about then just one sentence :-) I google it and checked the jgit mailing lists but couldn't find a hint what this is all about.

-------------------------------------
author: Beau Terry
date: 2016-01-13 16:55:08.000000000

Patch Set 2:

Shawns announcement found at https://dev.eclipse.org/mhonarc/lists/jgit-dev/msg03073.html

-------------------------------------
author: Blake Oneal
date: 2016-01-13 17:30:11.000000000

Patch Set 2:

(3 comments)

Line:185, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> Worth adding 'secs' here as well?

Line:191, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> Worth having 'mins' here as well?

Line:197, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> Worth having 'hrs' as well?

-------------------------------------
author: Blake Oneal
date: 2016-01-13 17:43:26.000000000

Patch Set 2:

(2 comments)

Line:243, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> This should probably be a configurable option, since some JVMs report number of sockets vs number of cores. Useful to have a default that can be overridden?

Line:254, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Is it worth creating these threads as daemon threads?

-------------------------------------
author: Yoselin Hanna
date: 2016-01-13 23:38:17.000000000

Patch Set 2:

(4 comments)

Line:243, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> So this is a default default default. :)

I expect real applications (e.g. Gerrit) to use their own configuration files to select how this ScheduledExecutorService should work, make the ScheduledExecutorService itself, and pass it to the constructor above that accepts a ScheduledExecutorService. Doing so would then completely bypass this code.

Line:254, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> I don't think you want them daemon. If they are currently replicating, you kind of want that to execute through. But again see above about this being a default default default; real servers should configure this thread pool using their own native configuration system and pass that executor into the constructor.

In fact some servers may subclass KetchSystem and override methods like newCommitter() to supply name/email values it finds more suitable, like customizing it to its site ("ketch@eclipse.org") or if it wants them per-server xxx@xxx.xxx

I'm leaving a number of configuration possibilities on the table for embedders/application builders.

`jgit daemon` itself may one day grow a flag that knows how to setup this thread pool itself. But its too early for that. I'm still thinking jgit daemon is just a simple excuse to play with the prototype and real applications are going to be things like Gerrit and GitBlit.

Line:185, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> Done, will push a respin later after I gather more feedback.

Line:197, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> Done

-------------------------------------
author: Beau Terry
date: 2016-01-14 00:02:48.000000000

Patch Set 2:

(2 comments)

How do you plan on testing and documenting the ketch?

Line:207, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Are more voters bad? (Scalability, etc)

Otherwise a check for the number being uneven should do fine?

Also do we want to see `1` as a special case, crippled multi master or not allow it (Why would anyone use it?)

Line:434, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> This seems to calculate >50% number for acceptance with the assumption voters.length is uneven.

Is that sufficient or would anyone want say a majority of more than 2/3 or 3/4? or n/2+1 +2 extra as backup, or any other formula which sounds reasonable?

-------------------------------------
author: Elise Key
date: 2016-01-14 05:56:24.000000000

Patch Set 2:

(3 comments)

Line:225, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> "opened repository"?

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> "description of"

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ElectionRound.java -> Author date is December 2015.  Should this also be 2015?

-------------------------------------
author: Ariel Sawyer
date: 2016-01-14 08:01:22.000000000

Patch Set 2: Code-Review-1

(56 comments)

First pass. I'll need to take a deeper look at the *Replica and StageBuilder stuff tomorrow. I'll so some thinking about tests too.

Line:54, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Snapshot.java -> s/Snapshot/LeaderSnapshot/

Line:117, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Snapshot.java -> s/Replica/ReplicaSnapshot/

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Add a description of the lifecycle of a Leader to the JavaDoc. Leaders are limited to a term. Should the object die when the term is up? Elsewhere I don't see new Leaders being created other than at startup, which made me think that maybe the Leader object stays the same but gets assigned to a new Replica.  If that is true then this should be called a LeaderDescription or something.

Line:109, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> A bit verbose. Try:
State of the repository's RefTree after applying all entries in xxx@xxx.xxx #queued}

Line:120, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> This seems a bit counter-intuitive. Please elaborate.

Line:124, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Add: "The log consists of a chained pairs of RefTree/LogId commits."

Line:130, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> s/.../, attempting to push a xxx@xxx.xxx Proposal} to other replicas./

Line:241, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> s/the proposed reference updates

Line:266, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> It looks like this loses the reference to the previous tree. What happens to it? Document where it is still being held.

Line:375, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> s/.../a quorum of replicas/

Line:492, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> I don't understand why this is necessary. Probably good to talk offline.

Line:86, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaPushRequest.java -> What is this lock doing? The list is being returned unprotected. Maybe just return an unmodifiable list that is created when setting it?

Line:152, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaPushRequest.java -> Why invoke afterPush() if !done? Maybe nothing got pushed.

Line:87, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> s/Any/A/  since it corresponds to a specific replica.

Explain that a replica can be either Ketch-aware or non-Ketch-aware, and the differences.

Line:98, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> In Raft a follower is any replica that is not a leader or a candidate, and all followers vote in leader elections. Or do you mean voting on consensus proposals? It is unclear.

Is this really:
enum Participation { NONE, FULL, FOLLOWER_ONLY }? How does NONE differ from FOLLOWER_ONLY?

Line:113, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> s/.../Delay before committing to a replica./

Line:115, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> s/commit/the commit/

Line:115, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> s/.../even if it can't be batched with the next proposal./

Line:118, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> , which generates less network bandwidth use, but provides looser consistency on the replica.

Line:118, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> s/commit/the commit/

Line:122, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> s/this remote/a replica/

Search isn't working well for me but make sure you use replica consistently.

Line:139, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> s/.../Replica can not be contacted./

Line:186, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> s/remote/replica/

Line:61, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ElectionRound.java -> s/.../A xxx@xxx.xxx Round} for a leaderless repository. Inserts a new "term" commit object that is used to guarantee election safety, preventing two replicas from thinking that they are the leader at the same time.

Line:110, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ElectionRound.java -> fix indentation

Line:59, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/LogId.java -> The sequential ordering of LogIds would be more safely maintained by making index private and adding a public nextId(LogId) method.

Also, this doesn't seem to map to Raft, where the Term and Index are global, crossing leader elections. Please give some context as to how this is used.

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ProposalRound.java -> A xxx@xxx.xxx Round} that ...

Line:81, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ProposalRound.java -> Seems like this should be final and set in the ctor.

Line:86, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ProposalRound.java -> This is assigned to a local variable, set to null, and then the local variable is passed around to all the other methods. Why not just pass it into the start() method and get rid of the member variable and setTree() method?

Line:96, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/LocalReplica.java -> Please expand this JavaDoc.

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Make this a constant in KetchConstants.

Line:93, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Add
Create a Ketch system with the provided executor service.

Line:206, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> s/remotes/replicas/ since the local replica is included in the list.

Line:210, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> More idiomatic to make this a static factory method.

Line:233, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Should probably be package private, since it is useful for subclasses.

Line:254, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> It is worth adding JavaDoc to this class indicating that it is useful as a testing configuration but a production server should set up its own executor service.

Line:94, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> This JavaDoc is the same as for getMaxRetry. Since it is trivial to understand, better to just use:
"Returns the minimum retry before retrying a failure."

Line:143, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> nit: make Pattern.compile(<this string>) a private member of this class, and just call matcher(valStr) on that, getting rid of the matcher method below.

Line:72, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> s/Proposal/A proposal/
<p>
Pushing to a Ketch leader results in the leader making a proposal. The proposal includes the list of reference updates. The leader attempts to propagate the proposal to a quorum of followers/replicas by pushing the proposal to a "staging" area under the xxx@xxx.xxx refs/txn} namespace. If the proposal succeeds then the proposed mutation is durable and the leader can publish the mutation.

Line:73, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Please talk about threading constraints in the JavaDoc.

Line:80, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Is this a widely-used term? Just using "validated" or dropping it might be less distracting.

Line:80, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> s/entered/has entered/

Line:124, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Make an unmodifiable copy here?

Line:159, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> s/reference update/proposal/g

Line:177, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> s/log/commit log of the RefTree/

Line:259, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> I still prefer "NOT_COMPLETED" here. If they were all not attempted, then why a separate status for the first one? :-/

Line:273, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> nit: xxx@xxx.xxx true}/

Line:379, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Is this used?

Line:69, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> Before a proposal or before a commit?

Line:74, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> s/unique objects/references/

Line:75, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> What does this mean?

Line:107, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> oldTree and newTree?  What are oId/nId?

Line:119, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> oldTree and newTree

Line:150, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> s/replicas/a replica/.

Line:153, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> s/.../a remote replica/

Line:213, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> Use "Ketch Stage"

-------------------------------------
author: Yoselin Hanna
date: 2016-01-15 06:47:33.000000000

Patch Set 2:

(61 comments)

Line:54, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Snapshot.java -> Done

Line:117, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Snapshot.java -> Done, also moved to top level class to avoid weird name LeaderSnapshot.ReplicaSnapshot.

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> No, my intent is for this object instance to die when the leader is deposed and its term is over. I'll try to document that.

Line:109, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Done, thanks.

Line:120, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Done

Line:124, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> No, that is not what the log is.

Line:130, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Done

Line:207, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> I think >9 is kind of crazy for a system configuration. 1 is a special case for simple testing.

Line:225, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Done

Line:241, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Done

Line:266, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Its losing the reference on purpose. Its held in the ProposalRound.

Line:375, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Done

Line:434, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchLeader.java -> Its reasonable to use N/2+1 for a quorum here. Any future round will include at least one of those and therefore be able to carry the system forward. Requiring more than that just places unnecessary constraints on acceptance.

Line:86, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaPushRequest.java -> Its forcing visibility of any modifications to the result fields inside of the individual ReceiveCommands. Because all threads go through the same lock object we flush out the writes made by the pusher thread and make them visible to a leader thread that might be viewing the results.

However this is actually only necessary if the push is running async using multiple threads. Which doesn't happen in stock JGit. It might happen in $DAY_JOB's system with async RPCs. But we could do our own synchronization there. So I think I'm going to drop the locking, seems like its not required.

Line:152, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaPushRequest.java -> No, this is just a relic of a discarded prior approach. Removed the done field and simplified this. We always call replica.afterPush from setException and done below.

Line:87, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:98, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Yea, its confusing. Changed to FULL and FOLLOWER_ONLY.

The point of FOLLOWER_ONLY is additional replicas that can serve content but aren't counted for voting. It allows making a 5.1 system for example that is 6 replicas, 5 of which vote and 1 which just keeps current. If we didn't have FOLLOWER_ONLY we'd have to get 4/6 votes on every operation for a 6 replica system.

Line:113, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:115, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> I think you mean even if it *can* be. Done.

Line:115, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:118, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:118, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:122, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:139, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:186, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchReplica.java -> Done

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ElectionRound.java -> I hate year changes. The code was started in 2015. But I get yelled at for having a 2015 copyright date in a new file that is being reviewed in 2016. So I updated the dates to 2016 before uploading. And still get commented on. :-)

Copyright in the US is 95 years from first publication or 120 years from creation, whichever is shorter. So copyright either ends in 2016 + 95 = 2111 or 2015 + 120 = 2135. Note it doesn't matter here because the earlier date of 2111 wins. And either way 95 years from now is a pretty long time.

Next year I just won't bother writing anything interesting during the months of November and December.

Line:61, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ElectionRound.java -> Done

Line:110, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ElectionRound.java -> Done

Line:59, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/LogId.java -> I had plans to use this index value during leader steady state when its trying to determine if a replica is just behind the leader and needs to advance forward. Using LogId with index meant I didn't have to run a RevWalk each time. But that code isn't completely done yet.

There is one use inside of KetchReplica.removeStaged().

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ProposalRound.java -> Done

Line:81, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ProposalRound.java -> Done

Line:86, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ProposalRound.java -> Because it turned out to be a mess to do much else. I'll try to rework this to initialize in the ctor.

Line:96, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/LocalReplica.java -> Done

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Done

Line:93, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Done

Line:206, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Done

Line:210, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Done, but many other of these config type things in JGit use the pattern here so I've left the fromConfig() instance method.

Line:233, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> package private is useless for subclasses, they can't be in the package. And a real system shouldn't even get replica configuration per repository. Its going to be something like a Gerrit Code Review server with all of its repositories mirrored identically to other peer Gerrit servers. So the replica configuration is going to be statically defined by some other configuration system that is not per-repository. So Gerrit will subclass and override createReplicas and not even look at the config keys.

Line:254, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/KetchSystem.java -> Done

Line:94, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> Done

Line:143, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> Done

Line:191, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ReplicaConfig.java -> Done

Line:72, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Done.

However after pasting that into Eclipse

 Peter
 picked a
 pickled
 pepper and so starts every line of the
 paragraph.

I reworded your text a bit to get away from this formatting as it drove me crazy.

Line:73, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Done

Line:80, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Done

Line:80, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Done

Line:124, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Sure, but we almost never defensively copy inside of JGit internals. That way leads to slow performance when you are shuffling around things 8 or 10 copies deep and N is large.

Line:159, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Done

Line:177, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Done

Line:259, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> There's no NOT_COMPLETED in the enum, and we can't easily add NOT_COMPLETED. Its public API. Its going to be a horrible breaking change given how ReceiveCommand.Result enum is used to add a new state like that.

Line:273, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Done

Line:379, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/Proposal.java -> Yes above in toString().

Line:69, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> during proposal, fixed.

Line:74, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> No, objects. Documentation is correct.

Line:75, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> Consider a chain of commits A <- B <- C. You can get to A by following the parent pointers from C. If a new branch points at A and another points at C we have 2 unique objects, A and C in the set to stage.

The naive stage algorithm would create 2 stage refs, one for A and one for C.

A smarter one can rely on the connectivity by only creating 1 stage for for C. A is automatically implied as being stage by virtue of C being staged.

Line:107, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> Hah, I meant oldTree newTree, fixed.

Line:119, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> Done

Line:150, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> Done

Line:153, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> Done

Line:213, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/StageBuilder.java -> Done

-------------------------------------
author: Elise Key
date: 2016-01-18 02:00:08.000000000

Patch Set 2:

(1 comment)

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/internal/ketch/ElectionRound.java -> > Next year I just won't bother writing anything interesting during the months of November and December.

Or I'll just stop commenting on copyright years during the months of January and February ;)

-------------------------------------
author: Gerrit Code Review
date: 2016-01-21 04:15:10.000000000

Change has been successfully merged into the git repository by Yoselin Hanna

-------------------------------------
