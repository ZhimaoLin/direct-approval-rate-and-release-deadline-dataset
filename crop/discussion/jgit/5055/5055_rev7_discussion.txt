DESCRIPTION

Allow to pack a given set of refs

Enhance the RefDirectory class to expose a method which writes a set of
refs (loose, packed or loose-packed) into a new packed-refs file. All
loose (and loose-packed) refs which are afterwards included in the new
pack file are deleted from the filesystem. This method will try to lock
every given ref in order to prevent that it is updated/deleted during
the runtime of this method. Before the method returns all files are
unlocked. Refs which can't be locked are ignored.

Let the garbage collector make use of this functionality to do a repack
of all non-symbolic refs.

Change-Id: I18583d98719aac901c9494f60f33ebe0b29632a3
Signed-off-by: Zachary Orozco xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2012-02-17 14:59:17.000000000

Uploaded patch set 7.

-------------------------------------
author: Yoselin Hanna
date: 2012-02-17 15:20:47.000000000

Patch Set 7: I would prefer that you didn't submit this

(8 inline comments)



Line:611, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Why RefDirectoryUpdate? Why not just Ref objects?

IMHO the caller should be passing you String or Ref. If you need a RefDirectoryUpdate internally, that should be an implementation detail that you handle after you lock the packed-refs file.

Line:614, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> You should be using your own Repository object, not the object of whatever the RefDirectoryUpdate might have been associated with.

Line:624, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Don't init to null. Move the new RevWalk call from line 626 up to here so its:

  RevWalk rw = new RevWalk(getRepository());
  try {

  } finally {
    rw.release();
  }

The way you have it coded right now you will NPE in the finally block if the RevWalk constructor throws an exception. This isn't good.

Line:633, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> It may be cleaner to avoid nesting by using instead:

  if (ref.isSymbolic())
    continue;  // Skip, cannot pack symbolic references

Line:643, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Yes you do. The cached Ref object needs to know its storage is packed so it can be handled correctly in future updates.

Line:702, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Why this test?

If the reference is peeled already and it has a peeled object id, the thing was a tag before, and is still a tag now. You should be able to say something like:

  if (f.getStorage().isPacked() && f.isPeeled())
    return f;
  if (!f.isPeeled())
    f = peel(f);
  if (f.getPeeledObjectId() != null)
    return new ObjectIdRef.PeeledTag(...);
  else
    return new ObjectIdRef.PeeledNonTag(...);
 
 and avoid the entire use of RevWalk yourself.

Line:318, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java -> FYI, merge conflict markers are stuck here.

Line:333, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java -> externalize this string for translation

-------------------------------------
author: Zachary Orozco
date: 2012-02-19 23:55:50.000000000

Patch Set 7: (8 inline comments)



Line:611, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> I initially wanted RefUpdates because I knew I have to lock each ref. And maybe the user already has locked RefUpdates in hand. But: I now believe that this is very unlikely and a String-based interface is easier. I'll change that.
Side topic: I was thinking of a Ref based interface but I think that's not right. If we let the user specify Refs this implies that the user also specifies the targets of the refs. I think most users of pack() are not interested in specifying the target of the refs. And I would have to document how I behave on refs which have been updated after the user has created his Ref instances. So: String based is easier!

Line:614, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Done

Line:624, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Done

Line:633, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Done

Line:643, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Now I don't understand my TODO anymore. I do set the Storage to PACKED in peeledPackedRef(). Which cached Ref still exists which has a wrong Storage? I'll remove the TODO.

Line:702, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/RefDirectory.java -> Done

Line:318, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java -> uuuh, sorry. Always run a git log -p directly before you submit - I should not forget it.

Line:333, org.eclipse.jgit/src/org/eclipse/jgit/storage/file/GC.java -> Done

-------------------------------------
