DESCRIPTION

Port push certificates

Push certificates ("git push --signed") have been part of
git-core since version 2.2.0 (released Nov 26 2014). We also
want to support that feature.

This is not complete and is lacking the actual functionality
to validate the signature for now.

Change-Id: I249869cadb2d55aef016371b9311b8583591b9cf
Signed-off-by: Beau Terry xxx@xxx.xxx


COMMENTS

author: Beau Terry
date: 2015-02-24 01:15:49.000000000

Uploaded patch set 16.

-------------------------------------
author: Brenden Conley
date: 2015-02-24 01:15:56.000000000

Patch Set 16:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6054/

-------------------------------------
author: Brenden Conley
date: 2015-02-24 01:23:05.000000000

Patch Set 16: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6054/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2015-02-24 03:25:36.000000000

Patch Set 16: Code-Review+2

-------------------------------------
author: Yoselin Hanna
date: 2015-02-24 03:25:48.000000000

Change has been successfully merged into the git repository.

-------------------------------------
author: Santos Moore
date: 2015-06-10 00:51:19.000000000

Patch Set 16:

(1 comment)

Line:111, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificate.java -> This is weird. I guess you're saying it's a single string so you can just feed it verbatim into the signature verifier and you don't have to know additional details about the structure of the certificate, you can just blindly verify it.

But frankly I don't buy that argument. A caller who wants to verify a cert needs lots of extra information that is not documented in this class.

For one thing, you still have to know the order in which fields need to be fed to the verifier.

For another, the certificate version header is not recorded anywhere. The current parser implementation only supports version 0.1 so you could manually reconstruct the header, but why should the caller have to do that?

IMHO this class should either:

* expose actual structured data, not this semi-structured stuff, and have a single toPayload/toText method to recreate the canonical payload for the verifier
* not bother with structured data at all and just expose two strings, the payload and the signature.

My vote would be for the former.

-------------------------------------
author: Beau Terry
date: 2015-06-10 16:18:12.000000000

Patch Set 16:

(1 comment)

Line:111, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificate.java -> Looking at the Code again, this is not as well thought as I remember.

A third way of doing this would be to have both the payload (totally unprocessed just passed along to the verifier) and collection of structured data to be used by others.

The problem with the first approach I could imagine is verification of a different payload than actually sent (by having subtle bugs in the parsing/recreation method), which would be fixed if we were to use the second method. However we want to also have the structured data, so why not both?

-------------------------------------
author: Santos Moore
date: 2015-06-10 16:58:49.000000000

Patch Set 16:

(1 comment)

Line:111, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificate.java -> I have an implementation (with tests) that stores only structured data in PushCertificate and recreates the payload on demand. Holding onto the raw data to avoid recreating it should be strictly an optimization, and can be implemented without changing the interface I'm writing.

-------------------------------------
