DESCRIPTION

Performance enhancment: avoid synthetic accessors

I ran JProfiler on the pack bitmap index code. I observed that ~64% of the
time spent in PackWriterBitmapPreparer.selectCommits() was spent in
BitmapIndexImpl$CompressedBitmapBuilder.contains(), and that method showed
multiple hotspots in .access$N synthetic functions for inner classes.

By removing the "private" visibility modifiers in inner classes, the time in
CompressedBitmapBuilder.contains() went from ~64% to ~24%. Over five runs,
the total time for "selecting bitmaps" for the msm-3.10 Linux repository went
from 441.0 to 429.2 seconds. That isn't huge, but it is a fairly cheap win.

Interestingly, the use of "private" on inner class members not accessed
directly by the outer class caused the Eclipse compiler to generete synthetic
accessors. An article in JavaWorld indicated that this is not true for javac,
but I did not directly verify that. To remove the inefficiency for
ECJ-generated code, I removed "private" specifiers on all inner class members.

Change-Id: Idfbdecd63f12936f74637a2d57e117ec095c8a37
Signed-off-by: Ariel Sawyer xxx@xxx.xxx


COMMENTS

author: Ariel Sawyer
date: 2015-10-26 22:19:48.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2015-10-26 22:19:54.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7298/

-------------------------------------
author: Brenden Conley
date: 2015-10-26 22:27:34.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7298/ : SUCCESS

-------------------------------------
