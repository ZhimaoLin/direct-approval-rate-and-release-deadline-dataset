DESCRIPTION

Bitmap builder: avoid synthetic accessors

I ran JProfiler on the pack bitmap index code. I observed that ~64% of the
time spent in PackWriterBitmapPreparer.selectCommits() was spent in
BitmapIndexImpl$CompressedBitmapBuilder.contains(), and that method showed
multiple hotspots in .access$N synthetic functions for inner classes.

By removing the "private" visibility modifiers in inner classes, the time in
CompressedBitmapBuilder.contains() went from ~64% to ~24%. Over five runs,
the total time for "selecting bitmaps" for the msm-3.10 Linux repository went
from 441.0 to 429.2 seconds. That isn't huge, but it is a fairly cheap win.

Interestingly, the use of "private" on inner class members not accessed
directly by the outer class caused the Eclipse compiler to generete synthetic
accessors. An article in JavaWorld indicated that this is not true for javac,
but I did not directly verify that. To remove the inefficiency for
ECJ-generated code, I removed "private" specifiers on all inner class members.

Change-Id: Idfbdecd63f12936f74637a2d57e117ec095c8a37
Signed-off-by: Ariel Sawyer xxx@xxx.xxx


COMMENTS

author: Ariel Sawyer
date: 2015-10-26 22:23:24.000000000

Uploaded patch set 3: Commit message was updated.

-------------------------------------
author: Brenden Conley
date: 2015-10-26 22:27:34.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7299/

-------------------------------------
author: Brenden Conley
date: 2015-10-26 22:35:00.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7299/ : SUCCESS

-------------------------------------
author: Jayvion Booth
date: 2015-10-27 06:25:45.000000000

Patch Set 3:

Terry, can you please point to the JavaWord article you've mentioned in the commit message?

-------------------------------------
author: Ariel Sawyer
date: 2015-10-27 15:26:18.000000000

Patch Set 3: Code-Review-1

http://www.javaworld.com/article/2073578/java-s-synthetic-methods.html

The third code snippet shows private members of a nested class that are only referenced by nested class methods. The corresponding `javap` invocation shows no synthetic method creation.

At your prompting I tried verifying this for myself. I found that the Eclipse compiler and javac are actually generating the same synthetic methods in the same situations. I was looking at a more complicated case, PackWriterBitmapPreparer.CommitSelectionHelper, where the private members are used when returning a new iterator object. For that case, both Eclipse and javac are adding synthetic accessors. But for a more simple POJO class with getters on private members, neither Eclipse nor javac adds synthetic members.

I'll update the change description and revert the removal of 'private' specifiers where appropriate.

-------------------------------------
author: Jayvion Booth
date: 2015-10-27 15:44:16.000000000

Patch Set 3:

> http://www.javaworld.com/article/2073578/java-s-synthetic-methods.html
 > 
 > The third code snippet shows private members of a nested class that
 > are only referenced by nested class methods. The corresponding
 > `javap` invocation shows no synthetic method creation.

If you are using Eclipse, you could use Bytecode Outline plugin to check if there are syntetic methods generated by compiler.

 > At your prompting I tried verifying this for myself. I found that
 > the Eclipse compiler and javac are actually generating the same
 > synthetic methods in the same situations. 

This was the reason for my question, since if they would generate it differently, this could be a bug in either javac or ecj.

-------------------------------------
