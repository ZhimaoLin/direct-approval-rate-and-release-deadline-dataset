DESCRIPTION

Add BranchCommand

Adds a command to mimic 'git-branch' in the JGit API.

TODO: clean up exceptions
TODO: do another pass of the API

Change-Id: I55cf6e5cb55a45be7b2ebb8701ab7bf163a9c5a5
Signed-off-by: Malia Sampson xxx@xxx.xxx


COMMENTS

author: Malia Sampson
date: 2010-09-02 02:52:41.000000000

Patch Set 1: I would prefer that you didn't submit this

This is a first pass of what a BranchCommand API would look like... looking for feedback...

-------------------------------------
author: Yoselin Hanna
date: 2010-09-06 15:57:09.000000000

Patch Set 1: I would prefer that you didn't submit this

(23 inline comments)



Line:98, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> This doesn't make sense.  We don't care about HEAD, unless HEAD is the branch being renamed.

Line:111, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Do not assign null here.  The compiler should (correctly) error and refuse to compile the class if the try block below does not assign a value before return.

Line:132, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> You need to document that oldBranchName == null causes the current branch to be renamed.  This is really obtuse and nobody is going to know to do that.

Line:137, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Missing checkCallable();

Line:148, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> You shouldn't need to resolve HEAD to delete a branch that isn't HEAD.

Line:150, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Yes.  You cannot delete the branch that HEAD has checked out right now.  The caller should instead detached HEAD, or checkout a different branch first.  This is probably a new top-level exception type for us, I can't think of an existing error type that makes sense to use.

Line:157, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> You also need to handle other types like LOCK_FAILURE, IO_FAILURE and REJECTED_CURRENT_BRANCH.

Yes, even though above you checked for what should be the REJECTED_CURRENT_BRANCH case, another thread might have changed HEAD in the meantime and JGit is going to check again during the delete invocation.  You need to handle that here.

Line:160, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> I don't think this is necessarily an error.  The caller asked us to remove it.  Its gone.  If they really demand that we error out on this, maybe we have an optional flag that they should set:

  setFailDeleteIfNotExisting()

Or we should expose a Result type to the caller that they can examine, with two different results:

  DELETED
  DID_NOT_EXIST

Most callers are just happy that the thing they asked to remove is in fact removed, and don't care how that happened.

Line:174, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Not an internal exception.

Line:178, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Not an internal exception.

Line:182, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Should support remote here too.

Line:185, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Need to handle LOCK_FAILURE, IO_FAILURE, REJECTED.

Line:206, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> I'm not sure suffixed is the right word for inserting a prefix.

Line:208, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> If remote is true, should we use R_REMOTES instead?

Line:211, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> This isn't an internal exception.  It should be a proper top-level API error that callers should check for and expect.  Don't we already have one for TagCommand?  There we throw InvalidTagNameException.  So we need InvalidBranchNameException.

Line:214, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Also not an internal exception.

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Yes

Line:225, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> You need to handle a lot more.  LOCK_FAILURE, IO_FAILURE.

Line:228, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> You need to lookup the Ref after you've updated or created it, because the Ref that is cached in the refUpdate is stale.

Line:263, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Missing checkCallable();

Line:282, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Missing checkCallable();

Line:301, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> You should overload this too:

  public BranchCommand setObjectId(AnyObjectId id) {
    checkCallable();
    this.id = id.name();
    return this;
  }

Line:320, org.eclipse.jgit/src/org/eclipse/jgit/api/BranchCommand.java -> Missing checkCallable();

-------------------------------------
author: Malia Sampson
date: 2010-10-07 16:33:42.000000000

Patch Set 1: Abandoned

Abandoning change at this is being worked on by SAP now.

-------------------------------------
