DESCRIPTION

Don't remove pack from pack list if accessing it throws IOException

If the IOException is caused by a transient problem that's maybe the
better strategy to avoid the problem reported on the Gerrit list [1].
It looks like in the reported case the pack was removed from the pack
list causing MissingObjectExceptions which disappear when the server is
restarted.

[1] https://groups.google.com/forum/#!topic/repo-discuss/Qdmbl-YZ4NU

Change-Id: I331626110d54b190e46cddc2c40f29ddeb9613cd
Signed-off-by: Douglas Trujillo xxx@xxx.xxx

COMMENTS

author: Douglas Trujillo
date: 2015-01-16 08:39:04.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2015-01-16 08:39:10.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/5912/

-------------------------------------
author: Brenden Conley
date: 2015-01-16 08:47:08.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/5912/ : SUCCESS

-------------------------------------
author: Dillon Cross
date: 2015-01-16 13:58:10.000000000

Patch Set 2: Code-Review+1

-------------------------------------
author: Zachary Orozco
date: 2015-01-16 14:42:31.000000000

Patch Set 2: Code-Review+1

-------------------------------------
author: Santos Moore
date: 2015-01-20 18:58:05.000000000

Patch Set 2: Code-Review-1

Some IOExceptions are transient; some aren't. In particular, PackInvalidException (which is an IOException) may be thrown when a pack is present but contains unrecoverably corrupt data.

Removing the pack from the list is an attempt to recover from such a corruption. If we no longer do that, how do we recover a corrupt repository? Will the corrupt pack get dropped on GC?

Would it make sense to single out a few subclasses of IOException as indicating known-permanent corruption, and treating all others as potentially transient?

-------------------------------------
