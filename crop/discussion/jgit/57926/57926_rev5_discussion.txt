DESCRIPTION

Do not decrement repository usage counter if it is already at zero

If close() was executed more times as incrementOpen(), next pairs of
calls to incrementOpen() and close() will not close repository as
expected, leaving repository "closed" state undefined (below zero).

To prevent this, do not further decrement usage counter if it is already
at zero.

Bug: 479253
Change-Id: I66aadc971fb4b5c429326fe20754ba7ec784b7fb
Signed-off-by: Jayvion Booth xxx@xxx.xxx

COMMENTS

author: Jayvion Booth
date: 2015-10-22 08:11:29.000000000

Uploaded patch set 5.

-------------------------------------
author: Brenden Conley
date: 2015-10-22 08:11:36.000000000

Patch Set 5:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7289/

-------------------------------------
author: Brenden Conley
date: 2015-10-22 08:19:31.000000000

Patch Set 5: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7289/ : SUCCESS

-------------------------------------
author: Alayna Houston
date: 2015-10-22 21:09:49.000000000

Patch Set 5:

That's what I meant when I wrote "hand-rolling a custom implementation of decrementAndGet". Personally, I find the synchronized version easier to read and understand, and would thus opt for that one unless the synchronized blocks caused performance problems. But this is clearly not my call...

-------------------------------------
author: Jayvion Booth
date: 2015-10-28 08:22:58.000000000

Patch Set 6: Patch Set 5 was rebased

-------------------------------------
author: Douglas Trujillo
date: 2016-01-20 10:49:00.000000000

Patch Set 5:

> > Johnatan, could you please check the last comment? Thanks.
 > 
 > I still think this approach is sweeping the problem under the rug.
 > I can say from experience that a reference counter that allows
 > unbalanced increments and decrements is very very difficult to
 > debug.
 > 
 > That said, if this logged, threw an IllegalStateException, or had a
 > boolean that requires the caller to explicitly request the more
 > tolerant behavior then I'd be in favor of it.
 > 
 > I'll try looking more closely at the examples you mentioned this
 > weekend (e.g., if there are double-close scenarios, then the
 > relevant classes should be fixed to keep enough state to only close
 > once).

maybe you find another day to look at the examples ?

-------------------------------------
