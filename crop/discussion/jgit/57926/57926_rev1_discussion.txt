DESCRIPTION

Do not decrement repository usage counter if it is already at zero

If close() was executed more times as incrementOpen(), next pairs of
calls to incrementOpen() and close() will not close repository as
expected, leaving repository "closed" state undefined (below zero).

To prevent this, do not further decrement usage counter if it is already
at zero.

Bug: 479253
Change-Id: I66aadc971fb4b5c429326fe20754ba7ec784b7fb
Signed-off-by: Jayvion Booth xxx@xxx.xxx


COMMENTS

author: Jayvion Booth
date: 2015-10-11 18:59:15.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2015-10-11 19:06:56.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7236/

-------------------------------------
author: Brenden Conley
date: 2015-10-11 19:14:44.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7236/ : SUCCESS

-------------------------------------
author: Alayna Houston
date: 2015-10-12 10:40:09.000000000

Patch Set 1:

(1 comment)

Line:816, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> The class comment says this class was thread-safe. This doesn't look thread-safe to me. Testing for zero and decrementing should be atomic as a whole. With an AtomicInteger I see no way to do that except hand-rolling a custom implementation of decrementAndGet here.

-------------------------------------
