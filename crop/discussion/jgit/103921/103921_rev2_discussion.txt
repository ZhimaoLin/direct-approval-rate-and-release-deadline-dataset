DESCRIPTION

Add org.apache.commons.codec 1.9.0 to target platform

This is needed to run tests in org.eclipse.jgit.http.test from Eclipse.
The change 7ac1bfc8 which added this dependency to
org.eclipse.jgit.http.test was already merged.

Restrict dependency to org.apache.commons.codec to the
version range [1.6.0,2.0.0).

CQ: 14048
Change-Id: I461a5f6bfc114757061d68992f9bc7ab38622328
Signed-off-by: Douglas Trujillo xxx@xxx.xxx

COMMENTS

author: Douglas Trujillo
date: 2017-08-30 15:55:57.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2017-08-30 15:56:04.000000000

Patch Set 2:

Build Started https://ci.eclipse.org/jgit/job/jgit.gerrit/11233/

-------------------------------------
author: Brenden Conley
date: 2017-08-30 16:06:59.000000000

Patch Set 2: Verified+1

Build Successful 

https://ci.eclipse.org/jgit/job/jgit.gerrit/11233/ : SUCCESS

-------------------------------------
author: Alayna Houston
date: 2017-08-31 08:35:53.000000000

Patch Set 2:

> file a bug for jetty ?

Not sure it's jetty. Just did a fresh setup (Oxygen, fresh empty workspace, new jgit clone, import all jgit projects, set target platform jgit-4.7, install API baseline 4.8.0 and execution environment descriptions).

Then get an error-free workspace:

* remove the codec dependencies from http.test.
* add two API filters to get an error-free workspace for Constants.CONFIG_KEY_IN_CORE_LIMIT and Constants.CONFIG_MERGE_SECTION.

Clean all projects. Workspace then shows no errors.

Then run SmartClientSmartServerTest from Eclipse. Indeed it fails because it can't find the class org/apache/commons/codec/binary/Base64. But I had misremembered the details:

* It's the HttpClient that fails.
* It needs Base64 for the BASIC authentication.

Indeed Apache codec.binary is not in the target platform.

org.apache.httpcomponents.httpclient has in it's MANIFEST.MF:

Import-Package: org.apache.commons.codec.binary;version="1.6.0"

It's _not_ optional.

So why did that bundle even load and activate successfully??

Running the test via Maven all tests succeed. The maven build somehow does include apache codec:

 [INFO] Including org.apache.httpcomponents:httpclient:jar:4.3.6 in the shaded jar.
 [INFO] Including org.apache.httpcomponents:httpcore:jar:4.3.3 in the shaded jar.
 [INFO] Including commons-logging:commons-logging:jar:1.1.3 in the shaded jar.
 [INFO] Including commons-codec:commons-codec:jar:1.6 in the shaded jar.

Though I think shading is used only for the pgm...

So I don't fully understand why the maven run succeeds.

-------------------------------------
author: Douglas Trujillo
date: 2017-08-31 09:36:45.000000000

Patch Set 2:

> > file a bug for jetty ?
 > 
 > Not sure it's jetty. Just did a fresh setup (Oxygen, fresh empty
 > workspace, new jgit clone, import all jgit projects, set target
 > platform jgit-4.7, install API baseline 4.8.0 and execution
 > environment descriptions).
 > 
 > Then get an error-free workspace:
 > 
 > * remove the codec dependencies from http.test.
 > * add two API filters to get an error-free workspace for
 > Constants.CONFIG_KEY_IN_CORE_LIMIT and Constants.CONFIG_MERGE_SECTION.
 > 
 > Clean all projects. Workspace then shows no errors.
 > 
 > Then run SmartClientSmartServerTest from Eclipse. Indeed it fails
 > because it can't find the class org/apache/commons/codec/binary/Base64.
 > But I had misremembered the details:
 > 
 > * It's the HttpClient that fails.
 > * It needs Base64 for the BASIC authentication.
 > 
 > Indeed Apache codec.binary is not in the target platform.
 > 
 > org.apache.httpcomponents.httpclient has in it's MANIFEST.MF:
 > 
 > Import-Package: org.apache.commons.codec.binary;version="1.6.0"
 > 
 > It's _not_ optional.
 > 
 > So why did that bundle even load and activate successfully??
 > 
 > Running the test via Maven all tests succeed. The maven build
 > somehow does include apache codec:
 > 
 > [INFO] Including org.apache.httpcomponents:httpclient:jar:4.3.6 in
 > the shaded jar.
 > [INFO] Including org.apache.httpcomponents:httpcore:jar:4.3.3 in
 > the shaded jar.
 > [INFO] Including commons-logging:commons-logging:jar:1.1.3 in the
 > shaded jar.
 > [INFO] Including commons-codec:commons-codec:jar:1.6 in the shaded
 > jar.
 > 
 > Though I think shading is used only for the pgm...
 > 
 > So I don't fully understand why the maven run succeeds.

I think in Maven this works since Maven by default resolves transitive dependencies but in OSGi (used in Eclipse) dependencies are not transitive. We do not use Tycho for building JGit bundle but only for building features and p2 repository.

-------------------------------------
author: Alayna Houston
date: 2017-08-31 10:04:00.000000000

Patch Set 2:

Ok. But the other question remains: when run from Eclipse, why does the httpcomponents.httpclient bundle even activate and run when a required imported package is missing? That test should fail much earlier because of a missing dependency. Do JUnit tests not run on OSGi?

-------------------------------------
author: Douglas Trujillo
date: 2017-08-31 11:07:48.000000000

Patch Set 2:

> Ok. But the other question remains: when run from Eclipse, why does
 > the httpcomponents.httpclient bundle even activate and run when a
 > required imported package is missing? That test should fail much
 > earlier because of a missing dependency. Do JUnit tests not run on
 > OSGi?

they run on OSGi if you click "Run as > JUnit Plug-in test"  in JGit we usuall do "Run as > JUnit test"

-------------------------------------
