DESCRIPTION

IndexPack: Tighten up new and base object bookkeeping

The only current consumer of these collections is ReceivePack,
where it needs to test ObjectId equality between a RevObject and an
ObjectId.  There we were copying from a traditional HashSet<ObjectId>
into an ObjectIdSubclassMap<ObjectId>, as the latter can perform
hashing using ObjectId's native value support, bypassing RevObject's
override on hashCode() and equals().  Instead of doing that copy,
directly create ObjectIdSubclassMap instances inside of ReceivePack.

We also only need to record the objects that do not appear in the
incoming pack, and were therefore copied from the local repositiory
in order to complete delta resolution.  Instead of listing everything
that used an OBJ_REF_DELTA format, list only the objects that we
pulled from the destination repository via a normal ObjectLoader.

ReceivePack can now discard the IndexPack object, and all of its
other data, as soon as these collections are held by the check
connectivity method.  This frees up memory for the ObjectWalk's
own RevObject pool.

Change-Id: I22ef71b45c2045a0202e7fd550a770ee1f6f38a6
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Juliet Cantu
date: 2010-04-17 13:03:32.000000000

Patch Set 1: Looks good to me, but someone else must approve; No score



-------------------------------------
author: Juliet Cantu
date: 2010-04-18 18:47:19.000000000

Patch Set 1: I would prefer that you didn't submit this

changed my mind

Line:328, org.eclipse.jgit/src/org/eclipse/jgit/transport/IndexPack.java -> Shouldn't you assign this new instance to newObjectIds?

-------------------------------------
author: Yoselin Hanna
date: 2010-04-19 02:00:35.000000000

Patch Set 1: Looks good to me, but someone else must approve; IP review completed



Line:328, org.eclipse.jgit/src/org/eclipse/jgit/transport/IndexPack.java -> I didn't want to do that here, because needNewObjectIds() is based on whether or not this field is non-null.  Assigning the new empty collection into newObjectIds would change the behavior of this class.  That violates the "getter shouldn't change state" rule that most programmers assume in Java.

I'm creating a new collection here, because we don't have a singleton that provides an empty map, because we don't have a concept of an immutable map.  And I didn't want to override the mutator methods to create an immutable singleton, because that would cause the JIT to be forced to assume a lot of these mutation methods need to be virtual dispatches rather than static, potentially resulting in slower runtime code.

So it seemed shorter to just alloc the new empty collection on each request.  They are pretty small, and we only do one call per ReceivePack execution anyway, so the amount of garbage is pretty low.

-------------------------------------
author: Juliet Cantu
date: 2010-04-19 06:17:16.000000000

Patch Set 1: Looks good to me, approved



-------------------------------------
author: Gerrit Code Review
date: 2010-04-20 01:18:38.000000000

Change could not be merged because of a missing dependency.

The following changes must also be submitted:

* I7ee44a314fa19e6a8520472ce05de92c324ad43e
* I1e8bc87c2e9183733043622237a064e55957891f
* I5d5fdcf07e25ac9fc360e79a25dff491925e4101


-------------------------------------
author: Gerrit Code Review
date: 2010-04-20 01:19:06.000000000

Your change requires a recursive merge to resolve.

Please merge (or rebase) the change locally and upload the resolution for review.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-20 01:23:18.000000000

Change has been successfully merged into the git repository.

-------------------------------------
