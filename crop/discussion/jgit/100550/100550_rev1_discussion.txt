DESCRIPTION

Fix matching ignores and attributes pattern of form a/b/**.

In Git patterns of form a/b/** do not match path a/b while
in JGit they do by intention. The matched code was corrected
not to match such paths.

Change-Id: Iacbf496a43f01312e7d9052f29c3f9c33807c85d
Signed-off-by: Luis Lutz xxx@xxx.xxx


COMMENTS

author: Luis Lutz
date: 2017-07-03 12:23:58.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2017-07-03 12:24:03.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/10394/

-------------------------------------
author: Brenden Conley
date: 2017-07-03 12:39:06.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/10394/ : SUCCESS

-------------------------------------
author: Jayvion Booth
date: 2017-07-03 14:43:10.000000000

Patch Set 1: Code-Review-1

> In Git patterns of form a/b/** do not match path a/b 

I'm not sure if this is true.

With .gitignore like "a/b/**" and file "a/b/text.txt" git shows me "a/" as ignored but after removing that rule "a/b/**" git shows me "a/" as untracked, which is exact what we currently do in jgit.

-------------------------------------
author: Jayvion Booth
date: 2017-07-03 15:04:09.000000000

Patch Set 1: -Code-Review

I recall my last comment.

I agree, JGit seem to be wrong here, but I have no time for a review right now.

-------------------------------------
author: Luis Lutz
date: 2017-07-03 15:05:37.000000000

Patch Set 1:

Yes, this is because

  a/b/**  matches    a/b/text.txt

But it doesn't match a/b, you can check that if you create a/b file:

git init test
cd test
mkdir a
touch a/b
touch a/c
git add a/c
echo "a/b/**" > .gitignore
git status


For me it shows
==============
$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   a/c

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        .gitignore
        a/b
==============

i.e. a/b is not ignored and hence the pattern is not matched. There's one more way to check that:

$ echo "a/b/** attr=value" >> .gitattributes

$ git check-attr attr a/b
a/b: attr: unspecified

$ git check-attr attr a/b/
a/b/: attr: unspecified

$ git check-attr attr a/b/whatever
a/b/whatever: attr: value

$ git check-attr attr a/b/whatever/whatever
a/b/whatever/whatever: attr: value

-------------------------------------
