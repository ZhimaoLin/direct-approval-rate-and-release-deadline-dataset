DESCRIPTION

PushCertificate: implement hashCode/equals/toString

Change-Id: Ib588a3f47492cee5e5e6274a3b088678919a0fa0


COMMENTS

author: Santos Moore
date: 2015-07-01 18:50:34.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2015-07-01 18:58:49.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6822/

-------------------------------------
author: Eden Lin
date: 2015-07-01 19:01:09.000000000

Patch Set 2:

(1 comment)

Line:217, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificate.java -> Shouldn't this hash version, pusher, pushee, nonceStatus, and rawCommands, too, since equals compares those and the constructor doesn't validate that they match the signature?

-------------------------------------
author: Brenden Conley
date: 2015-07-01 19:06:02.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6822/ : SUCCESS

-------------------------------------
author: Santos Moore
date: 2015-07-01 19:28:41.000000000

Patch Set 2:

(1 comment)

Line:217, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificate.java -> Nothing wrong with hashing unequal instances to the same value. It's just equal instances must hash to the same value, which they do.

Assuming this comes from a correctly-functioning client, the signature is literally already a hash of the rest of the contents you just mentioned (except nonceStatus), so it didn't seem worth it to hash everything else.

I suppose there is theoretically a hash collision DoS attack where an attacker spams a server with the same invalid signature and different contents, knowing that they'll all be stored in the same HashMap. But that seems a little farfetched.

-------------------------------------
author: Eden Lin
date: 2015-07-01 19:31:00.000000000

Patch Set 2: Code-Review+2

Makes sense.

-------------------------------------
