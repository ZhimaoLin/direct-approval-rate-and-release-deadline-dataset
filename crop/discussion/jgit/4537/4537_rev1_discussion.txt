DESCRIPTION

A new RevQueue to speed up certain queries.

Change-Id: I13895056dec6a9089070c0602decbb69e55ca443


COMMENTS

author: Brenden Conley
date: 2011-11-03 17:18:04.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/958/ 

-------------------------------------
author: Brenden Conley
date: 2011-11-03 17:21:20.000000000

Patch Set 1: Build Successful

Build Successful 
 
https://hudson.eclipse.org/sandbox/job/jgit.gerrit/958/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2011-11-03 20:45:04.000000000

Patch Set 1: I would prefer that you didn't submit this; Unclean IP, do not check in

(6 inline comments)

Unclean IP due to missing copyright header. Marc said he would clean this up later if its a good direction to follow so this is obviously correctable. :-)

Line:9, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> How does this queue discard ancestors? It looks to me like it walks all commits in the queue in the next() method. Shouldn't it skip a commit if the reachability cardinality is the start size?

Line:47, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> How is this better than making a special subclass of RevWalk that overrides createCommit() to provide its own subclass of RevCommit that carries BitSet member? That would use less memory, and make the whole thing slightly less awkward for the caller to work with as they don't have to try to register the CommonCommitLimitedRevQueue against an existing RevWalk they created. But it does mean you cannot convert an existing graph held by an existing RevWalk to perform this operation, the application author would need to decide which type of RevWalk to create and what type of graph they want to maintain in memory.

Line:84, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> startCommits could contain the same commit more than once, since its a List. Maybe you want to convert it over to a Set first to ensure its unique, or handle that case here specially when the commitToReachability map already contains the commit in it?

Or if you use the RevCommit subclass approach, you can just test for the BitSet field being non-null and refuse to reassign it, instead setting the corresponding start bit.

Line:108, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> By the time you are dealing with a RevFlag object, it may just be worthwhile to use the normal RevFlag set and has methods instead of hand-coded bitmasking.

Line:152, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> This set is always empty. What is it for?

Line:160, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> What is the purpose of this interface/method? Its a bit unclear to me why you want it.

-------------------------------------
author: Juliet Cantu
date: 2011-11-03 21:31:13.000000000

Patch Set 1: I would prefer that you didn't submit this

(2 inline comments)



Line:7, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> We don't use author tags

Line:138, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> Odd indentation

-------------------------------------
author: Juliet Cantu
date: 2011-11-03 21:31:56.000000000

Patch Set 1: (1 inline comment)



Line:7, /COMMIT_MSG -> What queries will be sped up and how much?

-------------------------------------
author: Douglas Trujillo
date: 2011-11-04 13:44:06.000000000

Patch Set 1:

This change will also need a CQ as it's a contribution of more than 250 lines

-------------------------------------
author: Saniya Hill
date: 2011-11-04 20:17:00.000000000

Patch Set 1: (1 inline comment)

Maybe we should include functionality into the RevWalk itself (with current MergeBaseGenerator its more or less there already)? I've added a detailed comment for CommonCommitLimitedRevQueue.java, Line 47.

Line:47, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> I've done that and I think it's acceptable for most use cases that one has to decide whether to use plain RevWalk or MergeBaseWalk.

However now resulting code looks like it could be turned into a Generator as well: we could introduce RevWalk.stopOnMergeBase which would create a MergeBaseGenerator that will be put between PendingGenerator and sorting-dependent Generators in the Generator pipeline.

There will be two implementations of MergeBaseGenerator: the one which is already existing, working for a few start commits only and the new BitSet-based implementation. Depending on the implementation usual RevCommit or extended RevCommitWithBitSet will be created by RevWalk.

This approach will require that both MergeBaseGenerator implementations can be chained like the other generators. Why is this currently not possible for the already existing implementation: "Computing for merge bases is a special case and does not use the bulk of the generator pipeline."?

Another issue: RevWalk.stopOnMergeBase must definitely be called before the Walk is started. What would happen, if there have been normal RevCommits created by a previous run, then reset() is called, stopOnMergeBase is set, and the RevWalk is started again and requires now RevCommitWithBitSet?

-------------------------------------
author: Saniya Hill
date: 2011-11-14 18:59:24.000000000

Patch Set 1: (8 inline comments)



Line:7, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> Done

Line:9, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> Commits are discarded in .add() -- this is true as well for the new MergeBaseWalk.

Line:47, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> I have changed my mind on that:

(1) as the MergeBaseWalk uses its own RevCommit class (and this is reasonable for mentioned memory issues), it couldn't be combined with other RevWalk derivates. So there would be restrictions on when stopOnMergeBase may be used which are less obvious to the user than when having a separate MergeBaseWalk class.

(2) I didn't get the intention of MergeBaseGenerator right which actually only returns the merge base commit, but not all commits up to the merge base as MergeBaseWalk does. Still both problems are very similar and probably much code could be shared, but introducing some abstract class here serving both use cases would make the code even harder to understand.

(3) to address "reachability" issues as they are e.g. necessary for "git branch --contains" and "git branch --merge" a separate MergeBaseWalk is sufficient.

Line:84, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> Done

Line:108, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> Done

Line:138, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> Thanks to Eclipse's line wrapping; I'll fix indentation and code style issues, like single-{ for the final patch.

Line:152, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> Bug; fixed.

Line:160, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/CommonCommitLimitedRevQueue.java -> Not necessary anymore when using MergeBaseWalk.

-------------------------------------
