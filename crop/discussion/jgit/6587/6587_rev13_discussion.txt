DESCRIPTION

Add Publisher implementation

Adds the server-side Publisher implementation and protocol. The
Publisher hooks the post-receive update and generates packs to cover
all connected Sessions. Clients establish Sessions that store their
subscriptions and stream pointers for PublisherPushes. PublisherPacks
are generated on the fly by PublisherPushes and the
PublisherPackFactory. Each Pack is split into PublisherPackSlices.
All Packs are placed in a global linked-list for which each client
creates an iterator. The memory footprint of Packs is managed by the
PublisherMemoryPool, which loads the Slices in and out of memory as
necessary to reclaim memory.

Change-Id: I35cadea785160585fc76ed9280c7a16f3da9e724


COMMENTS

author: Karlee Dorsey
date: 2012-08-07 00:11:52.000000000

Uploaded patch set 13.

-------------------------------------
author: Warren Watkins
date: 2012-08-08 17:36:44.000000000

Patch Set 13: I would prefer that you didn't submit this

(60 inline comments)

Getting there, but I think we can simplify this further. I haven't really thought about the PublisherPack* classes yet.

Line:77, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> units

Line:85, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> this should be called clientRefState. Also, isn't it only used to generate the initial pack? If so, it shouldn't be stored in the class.

Line:121, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> i would probably call this "subscribeLoop"

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> you should clear in and out in a try finally around the code below, and close out.

Line:140, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> i think i would inline this function in subscribe:

  String line = in.readString();
  if (line.equals("advertisement"))
    doAdvertisement();
  else if (line.equals("subscribe"))
    doSubscribe();
  else
    throw new TransportException(MessageFormat.format(
      JGitText.get().expectedGot, "advertisement|subscribe", line));


the other option would be to return an enum or constant.

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> you shouldn't need a try finally for this. if open throws an exception, the repository should not be open and if you do open the repository the close will execute.

  Repository r = openRepository(line.substring("repositoryaccess ".length()));
  r.close();

Line:180, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> shouldn't this send an end()

Line:248, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> why is a PublisherClient being passed?

Line:251, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> why do you need to mark? i thought you kept a fixed size window?

Line:267, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> the event loop body should be moved into its own method

Line:274, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> do you need to send the pktLineOut.end() ? probably doesn't really matter.

Line:280, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> nit: it --> stream

Line:288, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> there should be a try finally after this assignment to r.close()

Line:297, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> i swear i've seen this code a bunch. don't you have a utility method for this?

Line:331, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> shouldn't you clear out restartToken and lastPackId at the start? The way you are using class variables is error prone.  Any thing that should be remembered across sessions should be stored in the Session, otherwise pass the information as arguments.  This will require you to create some helper types to hold data e.g. a Header class with two fields, restartToken and lastPackId. This does not apply to in and out, since they are used everywhere.

Line:364, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> shouldn't you check cmdList and stateList are not null?

Line:381, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> it is supported, but doesn't do anything, right?

Line:384, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> you need to check the length of parts

Line:402, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> out and consumeThread is not synchronized, so you can't do this. though calling consumeThread.interrupt() should be enough.

Actually this class should not need any synchronization.  Whomever is creating this class and managing it should know it needs to interrupt the thread in order to stop it.

Line:438, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> i'm not a big fan of having to subclass this in order to openRepository.

Line:71, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPack.java -> existingSpecs = new HashSet<SubscribeSpec>(specs);

Line:93, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPack.java -> don't you need to check that the entire collection is equal?otherwise you could send more data than they should get.

Line:78, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPackFactory.java -> nit: initialSliceInMemoryLimit

Line:57, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherReverseResolver.java -> do you plan on using this anywhere besides Publisher? Maybe you should just make this functionality built into the Publisher

Line:93, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherReverseResolver.java -> private?

Line:58, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> comment needs updating. it refers to iterators.

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> This is the wrong level of abstraction.  The refcount should be on the Node, when that count reaches 0 then the data should be released. You just need the data to implement the close() or release() or deallocate() method. You could make that an interface, however i think you should explicitly work with PublisherPush types here and not make this class generic. It will simplify the code.

Line:86, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> nit: name condition -> nextSet

Line:92, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> take the refcount as a parameter and add a release() or close() or deallocate() method (whatever you will call on the PublisherPush when the refcount is zero).

Line:146, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> presize the capacity

Line:180, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> i don't think this is needed.

Line:190, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> this seems wrong, hasNext calls next, but peek calls get.

i'm pretty sure you can delete hasNext() and peek()

Line:197, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> shouldn't need this if you are taking the capacity. next should do the work of maintaining the window.

Line:215, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> this works. maybe this should be called "attemptRollback" and just take the pushId here, since you know that type is PublisherPush.

Line:236, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> this is fine but i would change the mechanics of the class so it behaves as expected. it should be as follows:

  private Node<D> current;
  private final List<Node<D>> marked;
  private final List<Node<D>> prepended;

then the behavior for next() becomes:
  if prepended is not empty:
     pop the next prepended
   else 
     use the next node on current

   add the node to marked (trim excess)
   return the node

The behavior for attemptRollback() becomes:
   find the item in the marked list
   if not found
     return false
   otherwise
     push all the items from marked to the prepended list
     return true

Line:276, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> tail and windowCount no longer need to be volatile, since you synchronize on all access.

Line:296, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> nit: name newWindow

Line:301, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> You should be able to do something like this:

 Node<T> last;
 synchronize(PublisherStream.this) {
   last = tail; 
   windowCount--;
 }
 consume(last); // inclusive.

where consume would decrement the refcount until the last is reached.

Line:309, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> delete this method

Line:69, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> remove

Line:108, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> remove this

Line:125, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> So i see why you need the PublisherClient....  I think you should take a RepositoryFactory and a PublisherSession here, where RepositoryFactory has a method to open the repository.  It is likely the case that RepositoryFactory should be on the PublisherSession itself.

Line:138, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> maybe you want to create a wrapper object to generate the pack. that way specs that match will block on that lock, and everyone wont block while only one pack builds at a time.


 PublisherPackGenerator gen;
  synchronized (this) {
    for (PublisherPackGenerator p : packs) {
      if (p.match(specs)) {
        gen = p
        break;
      }
      gen = new PublisherPackGenerator(specs);
      packs.add(gen);
   }
 }

 return gen.get();
   

where the get() would look something like:
 
 PublisherPack p;
 private synchronized PublisherPack get() {
    if (p != null) {
      return p;
    }
   
    Repository r = client.openRepository(repositoryName);
    try {
      p = generate(r, commands, specs, pushId + "-" + packs.size());
      return p;
     } finally {
       r.close()
     }
  }

maybe you can use a ConcurrentHashMap to lookup the value item based on set equality of the specs, using putIfAbsent, but it is probably may be a waste of memory.

Line:153, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> remove the setReferences and decrement

Line:176, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> you can probably remove the equals and hashCode.

Line:76, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> Use a concurrentHasMap, then you can remove the synchronized on the public methods.

Line:152, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> you also have to synchronize on reads.

Line:201, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> remove this and call directly on the stream.

Line:209, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> I think PublisherStream.Window is clearer.

Line:218, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> nit: cancelDeleteTimer()

Line:221, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> should you set the deleteTimer = null?

Line:68, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> Instead of LIFETIME, i would use GRACE_PERIOD, since you only start after a client disconnects.

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> why not just have publisher implement the interface?

Line:73, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> pre-size with the commands.size()

Line:134, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> magic number

Line:151, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> should you remove the session when the delete timer returns false?

Line:191, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> might as well just inline this

Line:99, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherMemoryPool.java -> there are race conditions here that you may want to document i.e. two threads allocating at the same time

Line:109, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherMemoryPool.java -> need to handle this.

Line:57, org.eclipse.jgit/src/org/eclipse/jgit/transport/SubscribeSpec.java -> use the utility method

-------------------------------------
author: Karlee Dorsey
date: 2012-08-09 21:54:00.000000000

Patch Set 13: (60 inline comments)



Line:77, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:85, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Renamed. It is only used in generateInitialPacks, but that function needs to write both the command list and the ref state.

Line:121, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:140, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:180, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> This is only a single line so the client knows exactly when to stop consuming, so it doesn't need an end().

Line:248, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Because the client has the openRepository() method, which the pack factory needs to generate a new pack if needed.

Line:251, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> I only mark the packs that actually get sent to this client, not the ones that can't possibly be rolled back to.

Line:267, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:274, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Doesn't matter, if it got here then the client disconnected.

Line:280, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:288, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:297, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Huh, guess it's up to 4 places...added SubscribeSpec.stripWildcard(ref).

Line:331, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> PublisherClient instances have the same lifetime as the connection, so readHeaders()/subscribeLoop() will only be called once for this object. Class variables are being used to pass data between each function call, because these read... functions read multiple values. I'll switch everything to using classes to return values.

Line:364, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> If the client sends 2 [end] packets, then it would drop into this condition. I added a check for repo != null, which means cmdList and stateList are also != null.

Line:381, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> It should disconnect the client. It's supported by the protocol, but not by the implementation.

Line:384, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:402, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> Done

Line:438, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherClient.java -> It's the cleanest way to do this, I tried the generics way and that was way uglier. The repository resolver needs some opaque "connection" object to open repositories, so the PublisherClientFactory will implement this method and bind the connection with the function closure.

Line:71, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPack.java -> Done

Line:93, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPack.java -> Done

Line:78, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPackFactory.java -> Done

Line:57, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherReverseResolver.java -> This will get subclassed by other implementations to override getKey, since it now only returns keys for FileRepositories.

Line:93, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherReverseResolver.java -> protected, needs to be overriden

Line:58, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:86, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:92, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:146, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:180, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Made private

Line:190, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:197, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Items don't get added on every next() call.

Line:215, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:236, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Every next() call shouldn't mark().

Line:276, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:296, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:301, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:309, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherStream.java -> Done

Line:69, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> Done

Line:108, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> Done

Line:125, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> RepositoryFactory will be connection-scoped (it contains a reference to the connection object), so it should be part of PublisherClient. Should I make an interface RepositoryFactory and have PublisherClient implement that?

Line:138, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> Done

Line:153, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> Done

Line:176, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherPush.java -> Done

Line:76, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> Changed to a set, it didn't need to be a map, and it didn't need to be concurrent.

Line:152, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> Done

Line:201, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> Done

Line:209, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> Done

Line:218, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> Done

Line:221, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherSession.java -> Done

Line:68, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> Done

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> Done

Line:73, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> Done

Line:134, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> Done

Line:151, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> if the delete timer returns false, then the delete method has already run and removed the session and closed it

Line:191, org.eclipse.jgit/src/org/eclipse/jgit/transport/Publisher.java -> Done

Line:99, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherMemoryPool.java -> Or I can remove them by wrapping the for loop in synchronized {}, since we don't want two clients deallocating the same objects (even though store() is synchronized).

Line:109, org.eclipse.jgit/src/org/eclipse/jgit/transport/PublisherMemoryPool.java -> I went through and added a fatal PublisherException class.

Line:57, org.eclipse.jgit/src/org/eclipse/jgit/transport/SubscribeSpec.java -> Done

-------------------------------------
