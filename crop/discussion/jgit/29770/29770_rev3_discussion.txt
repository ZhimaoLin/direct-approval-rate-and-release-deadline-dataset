DESCRIPTION

Rebase: Add --preserve-merges support

With --preserve-merges C Git re-does merges using the rewritten merge
parents, discarding the old merge commit. For the common use-case of
pull with rebase this is unfortunate, as it loses the merge conflict
resolution (and other fixes in the merge), which may have taken quite
some time to get right in the first place.

To overcome this we use a two-fold approach:
If any of the (non-first) merge parents of a merge were rewritten, we
also redo the merge, to include the (potential) new changes in those
commits.
If only the first parent was rewritten, i.e. we are merging a branch
that is otherwise unaffected by the rebase, we instead cherry-pick the
merge commit at hand. This is done with the --mainline 1 and --no-commit
options to apply the changes introduced by the merge. Then we set up an
appropriate MERGE_HEAD and commit the result, thus effectively forging a
merge.

Apart from the approach taken to rebase merge commits, this
implementation closely follows C Git. As a result, both Git
implementations can continue rebases of each other.

Preserving merges works for both interactive and non-interactive rebase,
but as in C Git it is easy do get undesired outcomes with interactive
rebase.

CommitCommand supports committing merges during rebase now.

Bug: 439421
Change-Id: I4cf69b9d4ec6109d130ab8e3f42fcbdac25a13b2
Signed-off-by: Kaden Henson xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2014-07-15 23:01:05.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/5337/

-------------------------------------
author: Juliet Cantu
date: 2014-07-15 23:01:11.000000000

Patch Set 3: Code-Review+2

-------------------------------------
author: Brenden Conley
date: 2014-07-15 23:17:38.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/5337/ : SUCCESS

-------------------------------------
author: Juliet Cantu
date: 2014-07-15 23:58:29.000000000

Change has been successfully merged into the git repository.

-------------------------------------
author: Kaden Henson
date: 2014-07-16 21:13:26.000000000

Patch Set 3:

It just occured to me that we probably need a CQ for this, don't we?

-------------------------------------
author: Kaden Henson
date: 2014-07-16 21:20:26.000000000

Patch Set 3:

Regarding C Git: I searched the Git mailing list and found some proposals for this approach.

The first mention I came across is in [1]. It suggests completely doing away with the merge strategy and to instead always cherry-pick. On the thread there is discussion that this is not sufficient if other parents changed.
There was a rfc/patch in [2] implementing the cherry-pick-only solution. It has some discussion, but was not accepted.
There is also a sketch for a different "rerere-style" approach [3], trying to combine re-doing the merge and re-applying changes from the original merge.

I will think about the rerere approach and see how our current implementation works in the field before I suggest it on the Git mailing list.

[1] http://thread.gmane.org/gmane.comp.version-control.git/194434/focus=194680
[2] http://thread.gmane.org/gmane.comp.version-control.git/198125
[3] http://article.gmane.org/gmane.comp.version-control.git/198316

-------------------------------------
