DESCRIPTION

Steal work from delta threads to rebalance CPU load

If the configuration wants to run 4 threads the delta search work
is initially split somewhat evenly across the 4 threads. During
execution some threads will finish early due to the work not being
split fairly, as the initial partitions were based on object count
and not cost to inflate or size of DeltaIndex.

When a thread finishes early it now tries to take 50% of the work
remaining on a sibling thread, and executes that before exiting.
This repeats as each thread completes until a thread has only 1
object remaining.

Change-Id: I65e45422edd96778aba4b6e5a0fd489ea48e8ca3


COMMENTS

author: Brenden Conley
date: 2013-04-09 01:14:31.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3321/ 

-------------------------------------
author: Yoselin Hanna
date: 2013-04-09 01:18:07.000000000

Patch Set 1: (1 inline comment)



Line:168, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/DeltaWindow.java -> I am slightly annoyed we have to grab a lock on each iteration, but its the only way we can be certain two threads don't attempt to update the same ObjectToPack.

An alternative implementation would be to acquire a lock on each ObjectToPack before storing the result into it. That might be heavier than a lock on the end point. E.g. the end point lock we might be able to do in batches, like every other object or something.

-------------------------------------
author: Brenden Conley
date: 2013-04-09 01:19:32.000000000

Patch Set 1: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3321/ : SUCCESS

-------------------------------------
