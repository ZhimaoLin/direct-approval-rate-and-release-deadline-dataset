DESCRIPTION

Support for the pre-commit hook

Introduces support for the pre-commit hook into JGit, along with the
--no-verify commit command option to bypass it when
rebasing/cherry-picking.

Change-Id: If86df98577fa56c5c03d783579c895a38bee9d18
Signed-off-by: Gustavo Green xxx@xxx.xxx


COMMENTS

author: Gustavo Green
date: 2014-11-03 15:40:40.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2014-11-03 15:53:07.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/5652/

-------------------------------------
author: Brenden Conley
date: 2014-11-03 16:01:04.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/5652/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2014-11-04 10:12:42.000000000

Patch Set 3:

Have you thought about adding your hook support to a more generic place? All your hooks are implemented in the jgit/api package. But users of JGit are not forced to use this package. If components like gerrit or gitblit use jgit on a more low-level (but still public) level than they would have no hooks support. E.g. look at RepoCommand.java. They creating commits with CommitBuilder and ObjectInserter but they would have no hooks support. Maybe somewhere in ObjectInserter.insert(CommitBuilder) would be a good place. But we have to take care that we don't call hooks for commits which come in e.g. through transport.

-------------------------------------
author: Gustavo Green
date: 2014-11-04 10:49:26.000000000

Patch Set 3:

No, I have not considered it :). The right place for me was in the commands themselves, I didn't really think further ahead...

I don't think the hooks have their place in such low-levels though... Someone who wishes to use the ObjectInserter directly probably doesn't want external processes to kick-in... not to mention the hooks themselves expect to be run in a particular environment; most notably, in an environment where the repository isn't locked (.git/index.lock doesn't exist). A hook (for example, post-commit) could very well checkout another branch, copy create a copy of the commit there, then re-checkout the original branch. On the other hand, CommitBuilder shouldn't be used without having locked the repo beforehand IIUC.

Likewise, the pre-commit hook can "block" a commit entirely, which wouldn't be possible without some hickups if done too low-level : the CommitCommand, RebaseCommand, CherrypickCommand... or anything called by EGit might setup some preparation on the repository before calling the lower level ObjectInserter... but if the hook rejects the commit, all of this setup is not only useless but needs to be reverted.

I'll try and pull them down a few level if you think that's necessary, but I don't really know how to do it cleanly.

-------------------------------------
