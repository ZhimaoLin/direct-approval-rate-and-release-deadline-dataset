DESCRIPTION

IndexDiff: Remove always true not-subtree check

The TreeWalk is configured to be recursive, which means subtrees are
never presented to the application.  Therefore the working tree file
mode can never be a subtree/subdirectory at this point in the code.

Change-Id: Ie842ddc147957d09205c0d2ce87b25c566862fd9
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2010-12-08 08:22:27.000000000

Patch Set 1: (1 inline comment)



Line:196, org.eclipse.jgit/src/org/eclipse/jgit/lib/IndexDiff.java -> One question about this: If we are in a file/folder conflict situation (one Iterator has a file and another Iterator has a tree for the same path) what is returned in a recursive treewalk. Will walk.getFileMode(<indexOfIteratorWithTree>) return MISSING?

-------------------------------------
author: Yoselin Hanna
date: 2010-12-08 16:33:51.000000000

Patch Set 1: (1 inline comment)



Line:196, org.eclipse.jgit/src/org/eclipse/jgit/lib/IndexDiff.java -> If we are in a file/folder conflict, we shouldn't ever see the folder.  A recursive TreeWalk doesn't return folders, only files.

If "foo" is a file in the dirCache, and now a directory in the workingTree, and the workingTree also has "foo/bar", we should see during iteration:

 First Result:
    dirCacheIterator = "foo"
    workingTreeIterator = null

  Second Result
    dirCacheIterator = null
    workingTreeIterator = "foo/bar"

Now if you changed the type of TreeWalk to NameConflictTreeWalk then this may change a little.  In a recursive NameConflictTreeWalk we may very well wind up with a tree when there is also a file.

So I think this change is safe, because we should never be seeing a tree type on any of the iterators, as the recursive TreeWalk won't return them.

-------------------------------------
