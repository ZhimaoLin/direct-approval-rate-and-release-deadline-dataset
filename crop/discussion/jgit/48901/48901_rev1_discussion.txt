DESCRIPTION

Close 'out' consistently in ArchiveCommand.call

Whether the output stream specified with setOutputStream() is closed by
ArchiveCommand.call() is murky and inconsistent:

- on success, it is closed
- if an exception is encountered when writing the archive, it is closed
- if an exception is encountered when calling createArchiveStream to
  open the archive, we forget to close it

Close the output stream consistently to avoid leaks.

Now that the inner try-with-resources doesn't have its own finally
block, this allows us to merge the two try blocks.

It would be even better to never close the output stream.  That will
involve more API changes to avoid silently breaking callers, so it is
deferred to a later change.

Change-Id: I0185bdaa60ecee4a541eab5d8ff6c9c4dbe40bf1
Signed-off-by: Eden Lin xxx@xxx.xxx


COMMENTS

author: Eden Lin
date: 2015-05-28 19:12:43.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2015-05-28 19:12:50.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6571/

-------------------------------------
author: Brenden Conley
date: 2015-05-28 19:20:28.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6571/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2015-05-28 19:31:24.000000000

Patch Set 1: Code-Review+2

-------------------------------------
author: Yoselin Hanna
date: 2015-05-28 19:31:44.000000000

Change has been successfully merged into the git repository.

-------------------------------------
