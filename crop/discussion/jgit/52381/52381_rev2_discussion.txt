DESCRIPTION

Add a FirstParentRevFilter that mimics C git's --first-parent

Change-Id: I01e84eaa10f6a73ff39cc9b8037fd30d0113f803


COMMENTS

author: Santos Moore
date: 2015-07-22 21:42:11.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2015-07-22 21:42:17.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6961/

-------------------------------------
author: Brenden Conley
date: 2015-07-22 21:48:55.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6961/ : SUCCESS

-------------------------------------
author: Eden Lin
date: 2015-07-23 18:25:25.000000000

Patch Set 2:

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> What happens if a commit is both a start commit and second parent of another start commit?

-------------------------------------
author: Santos Moore
date: 2015-07-23 18:37:57.000000000

Patch Set 2:

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> Yeah :(

I think that point makes this approach impossible. When you markStart, it just adds it to the root set internal to the RevWalk. A consumer of the RevWalk has _no_ way to determine whether a commit was a start commit.

Some alternatives:

* Expose the root set as RevWalk.isStart(). As long as roots is an ArrayList this is O(n) in the number of start nodes (which might be ok).
* Reserve another flag START and have markStart set this.
* Make FirstParentRevFilter.newRevWalk that returns a subclassed RevWalk with one of the above behaviors.

I'm leaning towards #2, add a START flag, but this has the potential to break existing code that already uses the max number of flags.

-------------------------------------
author: Eden Lin
date: 2015-07-23 18:39:29.000000000

Patch Set 2: Code-Review-1

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> I don't think this will work. PendingGenerator (or a similar new generator) needs to be aware of the FirstParentRevFilter and avoid walking parents after the first.

-------------------------------------
author: Eden Lin
date: 2015-07-23 18:40:09.000000000

Patch Set 2:

See RevFilter.MERGE_BASE for an example of how that works (it's kind of ugly).

-------------------------------------
author: Santos Moore
date: 2015-07-23 20:47:03.000000000

Patch Set 2:

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> Assuming we can correctly identify start nodes, why would the coloring approach not work? I think the recursive definition "reachable traversing only first-parent links from a commit that was previously emitted" is correct; what am I missing?

The main downside of hard-coding this into the generator is that it means this RevFilter is not composable with other RevFilters. For MERGE_BASE, we have to explicitly check whether the RevFilter matches that exact instance. If we want to support OrFilter(FirstParentRevFilter, AuthorRevFilter), we can't do that equality check. This is probably fine for MERGE_BASE, which is extra-special, but not for this.

Avoiding walking second-parent links would, of course, be an optimization.

-------------------------------------
author: Eden Lin
date: 2015-07-28 22:16:26.000000000

Patch Set 2:

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> Sorry I missed your comments.

What happens if a commit is both a first parent of a start commit and second parent of another start commit and it is discovered via a second-parent path before the first-parent one?

That is, consider a history like this:


                  o -- o [start1]
                      /
     -----------------
    /
   o -- o --- o -- o -- o -- o -- o [start2]

-------------------------------------
author: Santos Moore
date: 2015-07-28 22:25:42.000000000

Patch Set 2:

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> The "discovered before" piece can only happen if there is significant clock skew.

More precisely, the root will be "discovered" via the second parent path from start1, but upon "discovery", it is just parsed enough to be pushed into the pqueue and considered later.

Assuming no clock skew, start2 and all its other ancestors, will be popped before the root. When processing the second immediate child of the root, we will color root with FIRST_PARENT, so when it's popped, it will have the right flag.

The root can only be popped before its children in the case of significant clock skew. I think the general rule here is we sacrifice correctness for performance in the clock skew case. You can opt for correctness by topo sorting. I wouldn't be surprised if C git has the same behavior.

-------------------------------------
author: Eden Lin
date: 2015-07-28 22:32:07.000000000

Patch Set 2:

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> C git just restricts the walk to the first parent when you pass --first-parent.

-------------------------------------
author: Santos Moore
date: 2015-07-28 22:33:44.000000000

Patch Set 2:

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> Sure but it has analogous correctness problems in the case of clock skew.

-------------------------------------
author: Eden Lin
date: 2015-07-28 22:48:37.000000000

Patch Set 2:

(1 comment)

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/filter/FirstParentRevFilter.java -> Both C git and JGit try to tolerate some minimal amount of clock skew. In JGit that is at https://eclipse.googlesource.com/jgit/jgit/+/master/org.eclipse.jgit/src/org/eclipse/jgit/revwalk/StartGenerator.java#171.

That's after include() has already been called and only gets triggered if there is at least one UNINTERESTING commit in the pending queue.

-------------------------------------
author: Eden Lin
date: 2015-07-28 22:49:06.000000000

Patch Set 2:

> Backing up a bit, I wouldn't necessarily mind tweaking the
 > generator to only consider first parent paths. I just think that
 > approach doesn't work well with the RevFilter abstraction, so we
 > would need some other way of passing that along to the RevWalk.
 > Maybe a straight up setFirstParent(true) method.

*nod* That's much nicer than my suggestion of using instanceof on the
RevFilter. :)

-------------------------------------
