DESCRIPTION

Fix InterruptTimer leak in BasePackConnection

When setting timeout on push, BasePackConnection creates a timer, which
will be terminated when push finishes. But, when using
SmartHttpPushConnection, it drops the first timer created in the
constructor and then creates another timer in doPush. If new threads are
created faster than the gc collects them this may stop the service if
it's hitting the max process limit. Hence terminate the timer if it
existed before BasePackConnection.init() creates a new timer.

Bug: 474947
Change-Id: I6746ffe4584ad919369afd5bdbba66fe736be314
Signed-off-by: Douglas Trujillo xxx@xxx.xxx

COMMENTS

author: Douglas Trujillo
date: 2015-10-06 21:35:59.000000000

Uploaded patch set 2: Patch Set 1 was rebased.

-------------------------------------
author: Brenden Conley
date: 2015-10-06 21:36:05.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7214/

-------------------------------------
author: Brenden Conley
date: 2015-10-06 21:44:19.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7214/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2015-12-16 04:29:15.000000000

Patch Set 2: Code-Review-1

(2 comments)

Line:150, org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackConnection.java -> I think we could just do this as:

  if (myTimer == null) {
    myTimer = ...
  }

That way we don't create and shutdown a thread for no reason. Instead we create just one thread. I don't see anything in the timeout code that requires throwing away the one made in the constructor.

Line:12, /COMMIT_MSG -> Oh that is so evil. Thanks for fixing it.

-------------------------------------
author: Gerrit Code Review
date: 2015-12-16 15:29:02.000000000

Change has been successfully merged into the git repository by Yoselin Hanna

-------------------------------------
