DESCRIPTION

RefDirectory: Add in-process fair lock for atomic updates

In a server scenario such as Gerrit Code Review, there may be many
atomic BatchRefUpdates contending for locks on both the packed-refs file
and some subset of loose refs. We already retry lock acquisition to
improve this situation slightly, but we can do better by using an
in-process lock. This way, instead of retrying and potentially exceeding
their timeout, different threads sharing the same Repository instance
can wait on a fair lock without having to touch the disk lock. Since a
server is probably already using RepositoryCache anyway, there is a high
likelihood of reusing the Repository instance.

Change-Id: If5dd1dc58f0ce62f26131fd5965a0e21a80e8bd3


COMMENTS

author: Santos Moore
date: 2017-07-28 15:04:06.000000000

Uploaded patch set 2: Commit message was updated.

-------------------------------------
author: Brenden Conley
date: 2017-07-28 15:04:12.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/10716/

-------------------------------------
author: Brenden Conley
date: 2017-07-28 15:23:13.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/10716/ : SUCCESS

-------------------------------------
author: Ariel Sawyer
date: 2017-07-28 15:39:45.000000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Santos Moore
date: 2017-07-28 16:06:01.000000000

Change has been successfully merged by Santos Moore

-------------------------------------
