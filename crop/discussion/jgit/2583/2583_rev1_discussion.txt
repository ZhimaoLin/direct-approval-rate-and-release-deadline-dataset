DESCRIPTION

Create generic connection class and change TransportGitSsh to use it.

The new RemoteCommandConnection class replaces
TransportGitSsh.Connection, which has been removed. Also added
RemoteCommandConnectionFactory class.  Callers can set this factory
with TransportGitSsh.setConnectionFactory.  (In
TransportGitSsh.newConnection, this factory is used before the
previous methods if it has been set.)

Minor changes were made to TransportGitSsh to use the new class, such
as easing some access restrictions. Some interface changes were made
as well. Both RemoteCommandConnection.exec and .connection now expect
the URI. (Note the parameter name change from "uri" to "uriLocal
inside JschConnection and ExtConnection to prevent clashing with
TransportGitSsh.uri.) More importantly, exec now expects the exact
command to be executed.  Previously, JschConnection and ExtConnection
had to call "commandFor" to complete the command. Now the commandFor
is executed by TransportGitSsh before calling exec.

We attempted to pull out JschConnection from TransportGitSsh but ran
into a dependency problem for the "sock" variable, which is the Jsch
session from TransportGitSsh. To fix this dependency would require
creating a session abstraction, such as an abstract
"RemoteCommandSession" class. But even if we added an abstract
interface for sock than the SftpObjectDB in sftp transport would
still be Jsch dependent, because it uses the ChannelSftp. Thus to
allow other ssh libraries SftpObjectDB has to be made an abstract
class the same way as this patch introduces the abstract
RemoteCommandConnection.

Bug: 336749


COMMENTS

author: Yoselin Hanna
date: 2011-02-23 21:51:31.000000000

Patch Set 1: I would prefer that you didn't submit this

(18 inline comments)



Line:65, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnectionFactory.java -> We would prefer newConnection() as the method name since a new object is being created.

Line:66, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnectionFactory.java -> Why the TransportGitSsh? Why not the URIish instead and then this can decide how to setup the connection given the remote host/port its going to?

Line:83, org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportGitSsh.java -> Style-nit: Instance fields should go below static methods, but before the construtor. We don't explicitly initialize to null. We don't prefix instance fields with "f".

Line:115, org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportGitSsh.java -> I would prefer something a bit more verbose like:

  xxx@xxx.xxx a new connection to the remote system. */

But this is private, we don't usually javadoc private methods.

Line:172, org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportGitSsh.java -> Style-nit: The class is private, so the constructor can be package (default) access rather than public.

Line:474, org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportGitSsh.java -> Style-nit: trailing whitespace.

Line:475, org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportGitSsh.java -> Document this parameter. Can it be null? If so what happens?

Line:477, org.eclipse.jgit/src/org/eclipse/jgit/transport/TransportGitSsh.java -> Style-nit: This should be above the package and private code, but below the constructor.

Line:60, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Style-nit: Unnecessary blank line in docs.

Line:63, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Style-nit: Fields do not start with "f". This probably should also be private.

Line:66, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Please document this constructor properly since its public and API users are expected to subclass this type.

Line:69, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Why do we even need the transport object here? It doesn't appear to be needed or used.

Line:81, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Document in exec and connect that exec is called, then connect. It doesn't make sense that this is the behavior, but it is.

Line:86, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Style-nit: Trailing white space.

Line:94, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Javadoc.

Line:100, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Javadoc.

Line:106, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> Javadoc.

Line:114, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnection.java -> What are the values? Note that today we assume 0 means success and non-zero positive is failure, because that matches up with POSIX exit status values.

-------------------------------------
author: Walter Fernandez
date: 2011-02-24 00:07:53.000000000

Patch Set 1: (1 inline comment)

You write: 
" I would prefer that you didn't submit this" 
Does this mean you don't want it submitted in the current form (we are obviously happy to fix the very reasonable suggestions) or do you not like the change in general?

Line:66, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnectionFactory.java -> We think that the information about the SSH session SshTransport.sock should be stored in the transport as it is currently and should not be moved. Because if it would be stored in the connection instead, it couldn't be shared between different connections. Since the (Jsch)connection needs to open a channel (using sock.openChannel) we need access to SshTransport.sock.

Since the reason for this constructor argument is the access to SshTransport.sock, the argument could be of type SshTransport instead of TransportGitSsh. Would this be better? 

(Of course in the long run SshTransport.sock should not be Jsch specific but this wouldn't change that the connection needs access to the session)

-------------------------------------
author: Yoselin Hanna
date: 2011-02-24 00:24:16.000000000

Patch Set 1: (1 inline comment)

My -1 score is just denoting this isn't ready for inclusion as-is, but if you address the comments it might be OK.

Line:66, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnectionFactory.java -> Isn't the JSch session protected access and thus not visible unless you subclass TransportSsh?

I'm not sure how passing the transport in the constructor is helping you here.

Maybe we just need to wrap the session into a RemoteSession type, put that into TransportSsh, and have the RemoteSession be the RemoteCommandConnection factory?

For the TransportSftp case, we'll just have to require that the RemoteSession be an instanceof JSchRemoteSession so it can downcast and pull out the JSch session handle.

-------------------------------------
author: Walter Fernandez
date: 2011-02-24 05:34:45.000000000

Patch Set 1: (1 inline comment)



Line:66, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnectionFactory.java -> Yes it is protected we overlooked that. 

I like your idea to return RemoteSession, but one more problem is the call to initSession in JscConnection.exec. Thus I suggest:
- to rename initSession into getSession
- make it public
- make it return RemoteSession 
- pass to getConnection the SshTransport

This way a remote connection can call getSession and getSession can (as initSession does now) correctly call the SessionFactory. 

Instead of passing SshTransport we could also just pass an Interface SessionStorage which has just the getSession method and is implemented by SshTransport.

Should we upload a new patch with this suggested getSession method (and your other comments addressed)?

-------------------------------------
author: Yoselin Hanna
date: 2011-02-24 14:57:20.000000000

Patch Set 1: (1 inline comment)



Line:66, org.eclipse.jgit/src/org/eclipse/jgit/transport/RemoteCommandConnectionFactory.java -> Yes, please, then we have something to continue to review and discuss. Thanks.

-------------------------------------
