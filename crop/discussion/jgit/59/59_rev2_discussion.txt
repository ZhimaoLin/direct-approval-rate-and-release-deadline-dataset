DESCRIPTION

Add locking capability to the IO SPI based on Java Concurrency Lock API

The lock implementation for local FS has 2 layer for locking, first JVM
level using the Java Concurrency API and second level is in local FS and
its Git specific *.lock files.

This change basically replaces the LockFile implementation in JGit Lib.

Signed-off-by: Konnor Snyder xxx@xxx.xxx


COMMENTS

author: Konnor Snyder
date: 2009-10-18 04:31:28.000000000

Uploaded patch set 2.

-------------------------------------
author: Yoselin Hanna
date: 2009-10-31 23:03:16.000000000

Patch Set 2: No score

This isn't mergeable, and I burned way too much of my time reading through it.  Most of the code is very hard to grok, and every time I turn around I find what appears to be either another race condition, or some code which appears to fail but report success.  It just isn't worth it to me to continue trying to review it.

-------------------------------------
author: Yoselin Hanna
date: 2010-01-23 19:15:36.000000000

Patch Set 2: Abandoned

Rather than abstracting java.io APIs we are trying to abstract higher level Git specific APIs, like ObjectDatabase and RefDatabase.  This should make it easier to map Git onto non-filesystem storage environments.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:57, org.eclipse.jgit.io/src/org/eclipse/jgit/io/utils/IOUtils.java -> Why are you doing IO in such small odd-sized units?

Use 2048, 4096, 8192 or 16384 for the buffer size.  If the underlying streams are BufferedInputStream or BufferedOutputStream you'll bypass the buffer and avoid unnecessary copying.  If the underlying streams are disk IO streams, you'll perform roughly page sized and page aligned IOs, which makes the filesystem code in most OS kernels rather happy.

Also, there is no reason for this to be public, its only relevant to the copy method in this class.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:63, org.eclipse.jgit.io/src/org/eclipse/jgit/io/utils/IOUtils.java -> You maybe should say you are copying the entire stream until EOF.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:109, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/GitLockOutputStream.java -> There's no way to abort.  If we fail to write to the lock file (e.g. because the disk is full) closing the lock file so we can delete it and abort to the caller will replace the main file, potentially destroying the user's repository.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:112, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/GitLockOutputStream.java -> Just use + here, the compiler will rewrite it to use StringBuilder and the code will be easier to read.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:149, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/GitLockOutputStream.java -> Flip the order, use appendMode && mainFile.exists() so we only pay the stat call if we enable append mode.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:151, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/GitLockOutputStream.java -> Don't open the lock stream twice during append.  Open it once, copy the data from the main file, then leave it open for the other writing operations we will do.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:156, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/GitLockOutputStream.java -> You can't use this to reliably lock the file.

You must use java.io.File.createNewFile to create the entry on disk, because in POSIX we must use open with the O_CREAT flag to ensure we are the only process which created this entry in the parent directory.  This is required to be compatible with C Git's locking protocol on POSIX platforms.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:161, org.eclipse.jgit.io/src/org/eclipse/jgit/io/Entry.java -> I'm very confused from the Javadoc above.  When we ask for a lock, but the lock fails to be acquired (already held by someone else), what does this method do, exactly?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:68, org.eclipse.jgit.io/src/org/eclipse/jgit/io/lock/AbstractLockable.java -> I'm quite unhappy with the fact that our lightweight java.io.File wrapper requires finalization for every instance.  Finalization really slows down GC because the object can't be removed immediately, it must be preserved through the GC and stuck on the Finalizer queue, and wait for the Finalizer to run.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:97, org.eclipse.jgit.io/src/org/eclipse/jgit/io/lock/AbstractLockable.java -> This smells like its over-engineered.  We don't currently use conditions in JGit.  Why do we need to be able to create multiple of them per file entry?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:130, org.eclipse.jgit.io/src/org/eclipse/jgit/io/lock/AbstractLockable.java -> Why are we waiting for at most the amount of time we waited for the internal lock?  Shouldn't we wait time - duration here, that is, whatever is left over of the caller's maximum wait?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:191, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> What good does a recursive file lock do when our calling thread already has this same file path open in a different OutputStream?  

Shouldn't this crash on Windows because you can't have two write handles open against the same path name at the same time, especially if you lock the entire file region on each?

Shouldn't this also crash on any POSIX system for the same reason?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:198, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> This entire set of conditions is insane.

All of it can be simplified down into:

  return new FileOutputStream(getLocalFile(), !overwrite);

There is no need to racily stat for the file's existence before trying to setup the constructor call.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:341, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Style nit:  Given that the above if success returns, then fall-through into the else occurs only if we have more work to do.  It is much more readable to read code written as:

  if (condition1)
    return result;

  try something else
  if (condition2)
    return result;

  try something else
  if (condition3)
    return result;

  fail

Than it is to read:

  if (condition1) {
    return result;
  } else {
    try something else
    if (condition2) {
      return result;
    } else {
      if (condition3) {
        return result;
      } else {
        fail
      }
    }
  }

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:378, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Style-nit: unnecessary local variable

-------------------------------------
