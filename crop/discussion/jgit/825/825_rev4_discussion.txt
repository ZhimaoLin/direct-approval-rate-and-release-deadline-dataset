DESCRIPTION

Implement a Dircache checkout (needed for merge)

Implementation of a checkout (or 'git read-tree') operation which
works together with DirCache. This implementation does similar things
as WorkDirCheckout which main problem is that it works with deprecated
GitIndex. Since GitIndex doesn't support multiple stages of a file
which is required in merge situations this new implementation is
required to enable merge support.

Signed-off-by: Zachary Orozco xxx@xxx.xxx
Change-Id: 	I13f0f23ad60d98e5168118a7e7e7308e066ecf9c


COMMENTS

author: Zachary Orozco
date: 2010-07-05 23:50:59.000000000

Uploaded patch set 4.

-------------------------------------
author: Zachary Orozco
date: 2010-07-05 23:58:27.000000000

Patch Set 4: I would prefer that you didn't submit this

this is the new dirchachecheckout working for four iterators (including a WorkingTreeIterator).
There are still a few tests failing (thats why I give myself -1) and some of them because I think the tests are wrong. The tests where written originally for WorkDirCheckout and worked in that environment but fail when testing DirCacheCheckout.
I recommend that the comments in ReadTreeTest.java which I added for all failing tests should be reviewed to get a clear picture about the semantics.

-------------------------------------
author: Douglas Trujillo
date: 2010-07-06 15:14:33.000000000

Patch Set 4: I would prefer that you didn't submit this

(20 inline comments)



Line:110, org.eclipse.jgit/resources/org/eclipse/jgit/JGitText.properties -> left square bracket is wrong here :
s/[0}/{0}/

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> we create a checkout object here not a class

Line:153, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> object not class

Line:174, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> this method is named preScanTwoTrees but in fact it scans 3 trees, this seems inconsistent

Line:211, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> same as above, the method scans 2 trees but is named prescanOneTree

Line:245, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> style nit:
s/processing/Processing/

Line:256, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> typo: s/ant/want/

Line:292, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> cannotDeleteFile: this doesn't look like the correct message

I would rather expect a dedicated exception here, javadoc for setFailOnConflict() says this would throw a CheckoutConflictException

Line:328, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> looks like wrong message text

Line:352, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> s/with the index:/with the corresponding index entry:/

Line:379, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> typo and incomplete comment, better:

file only exists in working tree -> ignore it

Line:422, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> typo: s/non-exisiting/non-existing/

Line:426, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> typo: s/Non-Exisiting/Non-Existing/

Line:438, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> typo: s/conflicts/conflict/

Line:602, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Start sentence with uppercase letter

Line:603, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> javadoc missing for parameter path

Line:612, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> style nit: add blanks around != operator

more of this type below

Line:665, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Is this a TODO ?

Line:723, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> should be documented how this situation is handled

Line:743, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Couldn't this be private ?

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:29.000000000

Patch Set 4: I would prefer that you didn't submit this

(14 inline comments)



-------------------------------------
author: Zachary Orozco
date: 2010-07-08 23:47:22.000000000

Patch Set 4: (34 inline comments)



Line:110, org.eclipse.jgit/resources/org/eclipse/jgit/JGitText.properties -> Done

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:142, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> changed all the tree references to ObjectID because I need Ids and not trees. The main thing I do with the trees is feeding them into the treewalk - and therefore (strangly?) I cannot put a tree itself but an Id.

One  problem remains: that is one remaining call to Tree.findBlobMember() in hasParentBlob() (now called mergeTreeHasParentBlob()). I asked in http://dev.eclipse.org/mhonarc/lists/jgit-dev/msg00458.html about the meaning of this call and would be happy to remove this call. Because of this problem I still have a reference to a Tree, but not in the API of this class.

Line:153, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:174, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> This method walks over two real git trees (head und merge). The two other things I am walking over are not really trees: the index (DirCache) is not a tree and the FileSystem with our working tree is also no tree. When we enter this method then the end-user has specified exactly two trees - and index and working tree are derived from the current repo. That's I guess why this method was once named preScanTwoTrees().

Line:205, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:211, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> see comment above

Line:245, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:256, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:292, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> you are right - this exception is completely wrong. I changed it.

Line:304, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I added a boolean return value to the checkout method. If false is returned this means that not all obsolete files could be deleted and getToBeDeleted() contains the path names of the remaining files.

Line:319, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> i put everything in checkoutEntry()

Line:328, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> created a new exception for that

Line:332, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:341, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> that's right. I will not bet against it (although I owe you lot of beers for again and again finding style-nits and serious problems in my code. Never ever was my code so well reviewed).

I was thinking about removing this method. We already walked over every single file and folder in the workTree. We should know the pathes of empty folders. But a first tryout grew too complicated and I wrote it down on the todo list.

I more and more think it was a mistake to copy WorkDircheckout and create DirCacheCheckout from that copy. I was overwhelmed by so many topics that I thought this would save me some effort. But understanding WorkDirCheckout and writing DirCachecheckout from scratch would have been better because I wouldn't copy all that strange code.

Line:352, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:374, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:378, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:379, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:422, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:426, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:438, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:602, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:603, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:612, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:662, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:665, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> yes, that's a TODO. Similar in WorkDirCheckout where this was copied from.

Line:675, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I'll propose the change to NameConflictTreeWalk. Only one confirmation needed:
In the third step you mention "before popping". After reading the code I think "t.back(t.matchShift);t.matchShift = 0" is your "pop" implementation, right?

Line:723, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> the semantics is not clear to me, see my comment below. I'll document if it is clear.

Line:728, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Don't get it: if pathes are in the ignore list it is even more dangerouse to delete files, or?

Line:743, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

Line:745, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I want to do this in a later optimization of checkout. I would need to delay the decision of what to do with a certain entry until the Treewalk has walked also the whole subtree.
Example: 
Head: foo/c
Index: foo/c, foo/d
Merge: foo

The first entry I have to deal with is "foo" and I detect a file/folder conflict. To decide what to do with foo I have to know wether index entry foo/c is clean - but this entry comes later in the Treewalk.

I was planning to store a list of (path,entry, dirtyOp, cleanOp) triples: when I finally found out the index under path is clean/dirty then the entry is processed according to cleanOp/dirtyOp.  Operations could be UPDATE,CONFLICT ...

But as I said: to reduce complexity for this proposal I did a brute force attempt to start a new walk.

Line:793, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I stated now explicitly in the docs that the parent folder has to exist before this method is called.  And of course: I removed this mkdirs.

Line:826, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

-------------------------------------
author: Yoselin Hanna
date: 2010-07-16 02:10:14.000000000

Patch Set 4: (2 inline comments)



Line:728, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Oddly, Git takes the attitude that if a file is in the ignore list, its OK for Git to destroy it, because its probably a build artifact or something else that is generated.  Though maybe that only applies to ignores that came from a .gitignore that is tracked?  I'm pretty sure though C Git will happily delete a conflicting ignored file.

Line:745, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> OK, thanks for explaining why the brute force approach is used here inside of isModified().  Its fine for now.

-------------------------------------
author: Zachary Orozco
date: 2010-07-22 15:46:12.000000000

Patch Set 4: (1 inline comment)



Line:675, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Shawn, I found problems with this implementation. Problem is that we will not go into combineDF() always. I saw it not happen when there is no gap between the file and the dir. I added tests to NameConflictTreeWalk tests which show the problem.

I am also not sure whether we always enter popEntriesEqual to clean up after we left the D/F conflict path.

I added another implementation of this in http://egit.eclipse.org/r/#change,1169.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:142, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> We're trying to get rid of the Tree class.  If you need a tree type thing, use a RevTree.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:205, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> For an empty tree like thing, use new EmptyTreeIterator() instead.  When you later ask for this slot as a CanonicalTreeParser type you will get back a null pointer.  (TreeWalk internally creates an EmptyTreeIterator as it dives down into non-existent subdirectories.)

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:304, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> We really should report on these failures.  On Windows if an application has a file open (e.g. Microsoft Word has the document file open) and we try to delete it, the delete fails by returning false.  Now the working directory has finished switching over, but there is this untracked file left laying around because an external application outside of our control is doing bad things to us.

IMHO, its a checkout failure if we can't remove the file we want to remove... but since we are committed at this point to finishing the checkout we should keep going and report failure at the end after everything has been updated.  Ideally we make the list of left-behind files available to the calling application, so it can help the user to handle this messed up working tree by offering to retry deleting these files after they have closed the application(s) using them.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:319, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Wasn't this already set by checkoutEntry?  And likewise with the length, I suggest below that it should be set in checkout Entry.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:332, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Style-nit: This method can be static.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:341, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> I would be willing to bet you a beer next time we meet up in person that just doing:

  if (!parentFile.delete())
    break;

is faster.  We have to do a system call to read the directory contents, and the operating system is forbidden from letting us remove a directory so long as it has at least one file/directory within it.  So we can accomplish both tasks in one system call by trying the delete, and aborting as soon as it doesn't work.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:374, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Ick.  Maybe make the TreeWalk a field so you can just do tw.getPathString() here instead?

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:378, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> This test is far cheaper than the cost to get a path string, *or* to get ObjectIds, and yet happens for untracked files that aren't properly git ignored by us... so it happens a lot.  Pull this test up to the very start of the method so we can fail out much more rapidly when it occurs.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:662, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Should this be private?

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:675, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> A NameConflictTreeWalk should have dived into the working tree and told you about these conflicts.

If the tree wants to put a blob at "foo", but the working directory has "foo/bar.c" and "foo/other.c", so "foo" is a directory, you should get:

  Path "foo":  Index blob;  working directory tree
  Path "foo/bar.c":  Index none; working directory file
  Path "foo/other.c":  Index none; working directory file

This means that you don't need to implement this recursion logic, you just need to keep track of D/F conflicts by storing the prefix path and then on each subsequent step of the walker check to see if the path is covered by one of those prefix paths.  If it is, you are inside of a D/F conflict and the working tree is conflicting with the blob record.

Actually, this is all something that the NameConflictTreeWalk should be able to tell you.  Just add a isDirectoryFileConflict() method to NameConflictTreeWalk that can export this, and keeps track of the current state for you.

The basic logic might be:

* in combineDF() store the treeMatch iterator into a new dfConflict field, inside of the "if (treeMatch != null) {" condition near the end of the method.  Only set the field if it is currently null.
* implement isDirectoryFileConflict to return true if dfConflict != null
* modify popEntriesEqual to clear dfConflict if dfConflict is any of the current iterators, before popping.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:728, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Correct.  This cleanup is only safe if these paths are registered in the ignore list.

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:745, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Why do we have to setup a whole new tree walk here?  Can't you use the existing walk state to check this?

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:793, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Given that we have already done this in the caller, do we also need to repeat it here?

-------------------------------------
author: Yoselin Hanna
date: 2010-07-06 20:46:28.000000000

MISMATCHED INLINE COMMENT
Line:826, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Shouldn't we also set the length here?

-------------------------------------
