DESCRIPTION

Enhance FS.runProcess() to support stdin-redirection and binary data

In order to support filters in gitattributes FS.runProcess() is made
public. Support for stdin redirection has been added. Support for binary
data on stdin/stdout (as used be clean/smudge filters) has been added.

Change-Id: Ice2c152e9391368dc5748d7b825a838e3eb755f9


COMMENTS

author: Zachary Orozco
date: 2015-06-19 08:21:36.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2015-06-19 08:21:42.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6775/

-------------------------------------
author: Brenden Conley
date: 2015-06-19 08:29:07.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6775/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2015-06-21 00:21:18.000000000

Patch Set 2: Code-Review-1

(1 comment)

Line:935, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> This just feels wrong. Why even bother with a binary flag?

The copier threads should just alloc a 4 KiB buffer, perform a single read call to get data, then write that to the result stream before repeating. Don't block trying to create record boundaries at LF or 4 KiB chunks.

-------------------------------------
author: Zachary Orozco
date: 2015-06-22 09:27:10.000000000

Patch Set 2:

(1 comment)

Line:935, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> I also thought longer about that. The binary flag changes behavior and not only determines record boundaries. And runProcess() existed before my change and the behavior was a textual line-by-line copy. That's why I didn't wanted to silently change the behavior to binary copy.

The thing is: runProcess() is called for hooks and for filters. As far as I can see hook scripts really output textual data on stdout/stderr. Copying such data in a textual way changes the bytes by harmonizing eol. When a hook outputs "abc\ndef" on stdout then we will emit "abc\r\ndef" when we copy it textual on a windows platform. I am not sure whether we need that. If we agree on: no we don't want this eol harmonization then I agree that we should do only binary copies and get rid of this binary flag.

When runProcess() is called for filters then doing a textual copy may be disastrous. When a filter filters the content of a JPEG file and would modify the byte sequence [65,10,65] to [65,13,10,65] then that's not what we want.

We have to decide: Can we change semantics and copy binary always (I would prefer that and I guess that's also what native git does, or?).

-------------------------------------
author: Yoselin Hanna
date: 2015-06-24 06:20:31.000000000

Patch Set 2:

(1 comment)

Line:935, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Yes, I considered that too when I wrote my comment. :)

I think we can just always do binary copying and avoid the whole EOL canonicalization. I really don't think anyone is relying on \n -> \r\n on Windows platforms. \n going to the tty on Windows will usually do the right thing and still jump to next line even though the \r is missing. That has been true since like Windows 2000. Or the past 15 years.

-------------------------------------
author: Zachary Orozco
date: 2015-06-24 11:11:38.000000000

Patch Set 2:

(1 comment)

Line:935, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Yes, convinced. Especially because I guess that a lot of hook output during transport is just sent back binary to the remote host and displayed there. In this case you anyhow don't know which line ending is correct.

So I'll propose the binary-copy only version.

-------------------------------------
author: Gerrit Code Review
date: 2015-11-03 22:58:51.000000000

Change has been successfully merged into the git repository by Douglas Trujillo

-------------------------------------
