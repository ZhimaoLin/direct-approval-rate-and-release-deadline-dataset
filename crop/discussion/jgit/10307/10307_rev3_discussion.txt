DESCRIPTION

Performance fixes in DateRevQueue

When a lot of commits are added to DateRevQueue, the
sort-on-insertion approach is very heavy on CPU cycles.

One approach to fix this was made by Santos Moore:
https://git.eclipse.org/r/#/c/5491/

But using Java's PriorityQueue seems to have brought some
extra overhead, and the desired performance could not be
reached.

This fix takes another approach to the insertion problem,
without changing the expected behaviour or bringing extra
memory overhead:

If we detect over 1000 commits in the DateRevQueue, a
"seek-index" is rebuilt every 1000th added commit.

The index keeps track of every 100th commit in the
DateRevQueue. During insertions, it will be used for a
preliminary scanning of the queue, with the intention of
helping add() find a good starting point to start walking
from. After finding this starting point, add() will step
commit-by-commit until the correct insertion place in
the queue is found (today, the queue is expected to be
sorted at all times).

When applied to repositories with many refs, this approach
has proven to bring huge performance gains and scales quite
well.

For instance, in a repository with close to 80000 refs,
we could cut down the time a typical Gerrit replication
of 1 commit would take (just a push from JGit's point of
view) from 32sec down to 3.5sec.

Below you see some typical times to add a specific amount
of commits (with random commit times) to the DateRevQueue
and the difference the preliminary seek-index makes:

Commits | Index | No Index
   1024     2ms        4ms
   2048     5ms        4ms
   4096     8ms       15ms
   8192     9ms       69ms
  16384    11ms      451ms
  32768    41ms     3092ms
  65536   130ms    15642ms
 131072   464ms    71960ms

Only one extra LinkedList reference is needed for every 100
inserted commits (and only when we see more than 1000 commits
in the queue), so the memory overhead should be negligible.

It may be worth noting that ties are still broken in FIFO
order.

Various index-stepping values were tested, and 100 seemed to
scale very well and be effective from start.

In the future, it should probably be dynamic and based on
the number of refs in the queue, but this should serve well
as a starting point.

Note: While other fundamentally different data structures may
be more suitable, the DateRevQueue is extremely central to
many of the Git core operations. This approach was chosen,
since the effect of the patch is easy to predict in conjuction
with the current implementation. A totally new data structure
will make it harder to predict behaviour in many common and
uncommon cases (in terms of breaking ties, memory usage, cost
when using few elements, object creation/disposing overhead,
etc).

Change-Id: Ie7b99f40eacf6324bfb4716d82073adeda64d10f


COMMENTS

author: Shyanne Larsen
date: 2013-02-14 09:12:22.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2013-02-14 09:12:28.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2940/ 

-------------------------------------
author: Brenden Conley
date: 2013-02-14 09:17:24.000000000

Patch Set 3: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2940/ : SUCCESS

-------------------------------------
author: Shyanne Larsen
date: 2013-02-14 09:29:20.000000000

Patch Set 3:

This shows what impact the patch has for our huge and very active Gerrit-installation:

http://i.imgur.com/JAuRvs8.png

Blue shows the CPU-utilization of our Gerrit instance on the day _before_ applying the patch (workload peak times).

Green is the CPU after applying this patch.

As you can see, before applying the patch we constantly maxed out on CPU and the system was bogged down. After the patch we are pretty much idling; No longer a need to continuously throw more expensive hardware Gerrit's way.

Note: The system saw very similar activity during the duration of both measurements in terms of: active users, # pushes, # replications etc.

The big difference is just due to this small patch.

-------------------------------------
author: Juliet Cantu
date: 2013-02-14 18:46:40.000000000

Patch Set 3: Looks good to me, but someone else must approve; IP review completed



-------------------------------------
author: Zachary Orozco
date: 2013-02-18 11:52:57.000000000

Patch Set 3: (1 inline comment)



Line:156, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/DateRevQueue.java -> Shouldn't you add a

  inQueue = 0;

here?

-------------------------------------
author: Shyanne Larsen
date: 2013-02-18 12:39:43.000000000

Patch Set 3: (1 inline comment)



Line:156, org.eclipse.jgit/src/org/eclipse/jgit/revwalk/DateRevQueue.java -> Done

-------------------------------------
