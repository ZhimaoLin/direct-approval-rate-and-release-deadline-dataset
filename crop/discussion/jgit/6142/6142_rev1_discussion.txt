DESCRIPTION

Special case file mode handling on non-executable filesystems

Do not report the worktree version of the file being merged
as dirty if the modes differ only in the executable bit and
the working tree iterator is on a filesystem that does not
support executable files.

Bug: 379004
Change-Id: I07335300d787a69c3d1608242238991d5b5214ac


COMMENTS

author: Juliet Cantu
date: 2012-05-31 21:16:46.000000000

Patch Set 1: Looks good to me, but someone else must approve; IP review completed



-------------------------------------
author: Zachary Orozco
date: 2012-06-04 14:07:56.000000000

Patch Set 1: I would prefer that you didn't submit this

How does this relate to core.filemode?

I was wondering why we don't need this kind of check in other places (e.g. status (decoration), checkout, reset). 
Why does the decorator in EGit shows the file as non-dirty although the jgit Merger thinks they are dirty?

I think that most jgit code respects core.filemode configuration parameter. If set to false jgit will think that differences in executable bits are irrelevant. See WorkingTreeIterator.compareMetadata() to see how executable bits are handled there. Can't we make use of this method also here instead of reinventing the check?

Native git on windows has the same problem. Clone jgit on windows with msysgit and afterwards set the configuration parameter core.filemode to true. A git status will tell that the worktree is dirty e.g. because of the filemode of org.eclipse.jgit.test/tst-rsrc/org/eclipse/jgit/test/resources/create-second-pack.
If you now try to rebase master on top of another branch msysgit will not start doing this because he thinks the worktree is dirty. In native git the solution is setting core.filemode.

-------------------------------------
