DESCRIPTION

Tighten object header writing in PackOutuptStream

Most objects are written as OFS_DELTA with the base in the pack,
that is why this case comes first in writeHeader(). Rewrite the
condition to always examine this first and cache the PackWriter's
formatting flag for use of OFS_DELTA headers, in modern Git networks
this is true more often then it it is false.

Assume the cost of write() is high, especially due to entering the
MessageDigest to update the pack footer SHA-1 computation. Combine
the OFS_DELTA information as part of the header buffer so that the
entire burst is a single write call, rather than two relatively
small ones. Most OFS_DELTA headers are <= 6 bytes, so this rewrite
tranforms 2 writes of 3 bytes each into 1 write of ~6 bytes.

Try to simplify the objectHeader code to reduce branches and use
more local registers. This shouldn't really be necessary if the
compiler is well optimized, but it isn't very hard to clarify data
usage to either javac or the JIT, which may make it easier for the
JIT to produce better machine code for this method.

Change-Id: I2b12788ad6866076fabbf7fa11f8cce44e963f35


COMMENTS

author: Yoselin Hanna
date: 2013-04-10 19:59:30.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2013-04-10 20:20:07.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3344/ 

-------------------------------------
author: Brenden Conley
date: 2013-04-10 20:24:53.000000000

Patch Set 3: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3344/ : SUCCESS

-------------------------------------
author: Warren Watkins
date: 2013-04-10 23:08:15.000000000

Patch Set 3: Looks good to me, approved

(1 inline comment)



Line:186, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackOutputStream.java -> nit: you have an extra set of parens

-------------------------------------
author: Yoselin Hanna
date: 2013-04-11 00:55:26.000000000

Patch Set 3: IP review completed



-------------------------------------
author: Yoselin Hanna
date: 2013-04-11 00:56:14.000000000

Change has been successfully merged into the git repository.

-------------------------------------
author: Juliet Cantu
date: 2013-05-08 21:43:08.000000000

Patch Set 3: (1 inline comment)



Line:186, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackOutputStream.java -> Was the use of & instead of && intentional? Can't see anything really wrong, but findbugs gives a warning.

-------------------------------------
author: Yoselin Hanna
date: 2013-05-09 00:52:33.000000000

Patch Set 3: (1 inline comment)



Line:186, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackOutputStream.java -> Yes. & avoids a branch. The two sides are fairly quick to compute so using & avoids a branch instruction and lets the machine combine the two sides before it does the final conditional branch.

-------------------------------------
author: Juliet Cantu
date: 2013-05-09 10:08:07.000000000

Patch Set 3: (1 inline comment)



Line:186, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackOutputStream.java -> I know about that one so I tried it in the jgit core without seeing any result so I never posted any patches. I wonder whether this is a myth or a real opportunity for gaining performance. How much does it gain here?

-------------------------------------
author: Yoselin Hanna
date: 2013-05-10 03:01:48.000000000

Patch Set 3: (1 inline comment)



Line:186, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackOutputStream.java -> May just be myth. I didn't benchmark the change to see if its better or worse. :-(

-------------------------------------
