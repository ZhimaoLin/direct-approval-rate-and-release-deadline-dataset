DESCRIPTION

Added the git-describe implementation

Change-Id: I689bc0578ce3a430b9800ad84122e221c69829f4
Signed-off-by: Adrienne Saunders xxx@xxx.xxx


COMMENTS

author: Adrienne Saunders
date: 2013-07-26 16:51:54.000000000

Uploaded patch set 6.

-------------------------------------
author: Brenden Conley
date: 2013-07-26 16:52:00.000000000

Patch Set 6:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3785/

-------------------------------------
author: Brenden Conley
date: 2013-07-26 16:56:58.000000000

Patch Set 6: Verified+1

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3785/ : SUCCESS

-------------------------------------
author: Adrienne Saunders
date: 2013-07-26 17:01:28.000000000

Patch Set 6:

> Do we really have to call carry on the walk AND on the commit? I am not sure.

Yes. I consider this a bug in JGit, but a test case verifies this. I added comment that describes why I had to do this.

What I discovered is that during a walk, the flag gets propagated from a commit to its parents right before it gets returned from the next() method. So generally whatever flag manipulations you do to the commit, you have to manually carry them.

RevWalk should keep the last commit returned from its next() method and do the flag carrying before it returns the next commit, IMO.

> One idea: when reviewing the code one complicated aspect seems
> to be to calculate the right depth. I know that the test do
> assertions on the describe output which contains also the depth.
> Still I am not sure whether the depth is correct when we have
> more complicated topologies. Multiple roots, a lot of dead
> branches. Have you tried this on a real world repo where
> you remove so many tags that high numbers for depth should occur.

It's bit hard to say which repository would be complicated enough. For example, Jenkins repo might have a lot of commits, but it doesn't have that many branches.

-------------------------------------
