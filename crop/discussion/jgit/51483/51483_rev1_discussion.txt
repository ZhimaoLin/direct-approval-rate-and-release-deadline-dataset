DESCRIPTION

WIP: introduce FileModeStrategy to FileTreeIterator

This is just a proof of concept, illustrating another
option for how a user could be given more control over
the FileTreeIteration.

Bug: 436200
Change-Id: If826229c1a9e4de79cf0ea0bbfc02c7c04be7a09
Signed-off-by: Renee Levy xxx@xxx.xxx


COMMENTS

author: Renee Levy
date: 2015-07-07 12:45:24.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2015-07-07 12:45:31.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6848/

-------------------------------------
author: Renee Levy
date: 2015-07-07 12:47:42.000000000

Patch Set 1:

This is a different path for making it possible to work around issues with nested .git directories.  (See bug 436200.)

It may not be as good of an approach as what is described in the other branch, about implementing DIR_NO_GITLINKS and making the workingtreeiterator aware of the index state, but it seemed like it might be a significantly smaller change so I thought would at least be worth proving it out to see what it might look like.

-------------------------------------
author: Brenden Conley
date: 2015-07-07 12:49:21.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6848/ : FAILURE

-------------------------------------
author: Renee Levy
date: 2015-07-13 15:40:17.000000000

Patch Set 1:

Christian,

Curious if you have any general thoughts about this approach.  If it seems terrible to you I can close it and keep working on the more full-featured 'DIR_NO_GITLINKS' branch.

-------------------------------------
author: Zachary Orozco
date: 2015-08-09 17:49:10.000000000

Patch Set 1:

Sorry for the late review. But now I find some time:

The code looks ok from the first review. But I am wondering how it will be used. When we looked at the semantics of DIR_NO_GITLINKS we saw that even on that easy case which looks very much like "pure-working-tree" the semantics of native git can only be achieved by looking at at the other trees (at least the index) also. In the moment I don't see which problem this change will solve. I would suggest to concentrate on the DIR_NO_GITLINKS change and keep this open.

-------------------------------------
author: Renee Levy
date: 2015-08-10 08:26:30.000000000

Patch Set 1:

> Sorry for the late review. But now I find some time:
 > 
 > The code looks ok from the first review. But I am wondering how it
 > will be used. When we looked at the semantics of DIR_NO_GITLINKS we
 > saw that even on that easy case which looks very much like
 > "pure-working-tree" the semantics of native git can only be
 > achieved by looking at at the other trees (at least the index)
 > also. In the moment I don't see which problem this change will
 > solve. I would suggest to concentrate on the DIR_NO_GITLINKS change
 > and keep this open.

Agreed, thanks, I'll continue to focus on the DIR_NO_GITLINKS branch.

-------------------------------------
author: Renee Levy
date: 2015-08-10 11:45:35.000000000

Patch Set 1:

> Sorry for the late review. But now I find some time:
 > 
 > The code looks ok from the first review. But I am wondering how it
 > will be used. When we looked at the semantics of DIR_NO_GITLINKS we
 > saw that even on that easy case which looks very much like
 > "pure-working-tree" the semantics of native git can only be
 > achieved by looking at at the other trees (at least the index)
 > also. In the moment I don't see which problem this change will
 > solve. I would suggest to concentrate on the DIR_NO_GITLINKS change
 > and keep this open.

With respect to the "DIR_NO_GITLINKS" path; I'm stuck on figuring out what the API might look like; would you happen to have any feedback you could provide on this branch?:

https://git.eclipse.org/r/#/c/51906/

-------------------------------------
author: Zachary Orozco
date: 2015-08-16 17:40:03.000000000

Patch Set 1:

(10 comments)

Line:81, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> xxx@xxx.xxx tag. Do you have an API Baseline configured?

Line:93, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> Eclipse complains about a missing javadoc for an public method. The javadoc should xxx@xxx.xxx tag

Line:116, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> Eclipse complains about a missing javadoc for an public method. The javadoc should xxx@xxx.xxx tag

Line:139, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> If p happens to be a FileTreeIterator (which is very likely) then we should use p.fileModeStrategy instead of the default one.
Maybe a test would be great where we see that FileTreeIterator instances created for subtrees contain the same FileModeStrategy instance than the parent.

Line:167, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> Eclipse complains about a missing javadoc for an public class. The javadoc should xxx@xxx.xxx tag

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> Eclipse complains about a missing javadoc for an public method. The javadoc should xxx@xxx.xxx tag

Line:171, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> Eclipse complains about a missing javadoc for an public class. The javadoc should xxx@xxx.xxx tag

Line:172, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> Eclipse complains about a missing javadoc for an public field.

Line:213, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> Eclipse complains about a missing javadoc for an public method. The javadoc should xxx@xxx.xxx tag

Line:11, /COMMIT_MSG -> We can remove WIP and really explain what this commit is is actually doing and why

-------------------------------------
author: Renee Levy
date: 2015-08-17 05:59:21.000000000

Patch Set 1:

(3 comments)

Line:81, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> I was actually using a different editor besides Eclipse for this.  I'll try opening it in Eclipse so that I can see what warnings it is giving you.

Line:139, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> Yes, if you'd like to move forward with this branch it definitely needs some tests.

I would like to hear your thoughts on whether or not the simple constructor for FileEntry is going to be a problem before I do the rest of the work for this branch, but if you think that will be OK and you'd like me to finish off this branch I will clean everything up and add some tests.

Thanks again for your review.

Line:213, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> I still have a concern here...

You'd suggested that you like the idea of having the full DIR_NO_GITLINKS functionality, and that you'd imagine it being a setting on the Repo's "Config" object, so that it would affect all instances of FileTreeIterator/FileEntry.

I'm afraid that without changing the constructor for FileEntry (or changing something else about FileEntry) in such a way that it would have access to the config object, or such that FileModeStrategy was a required argument, then there is still a risk of weird edge cases here.

So, e.g., let's say I clean up this branch and we get it merged.  Then I file a follow-up patch that implements DirNoGitLinksStrategy, and changes the default implementation of FileTreeIterator such that it builds up the correct FileModeStrategy based on Config, and passes that in to the alternate FileEntry constructor.

In that case, if a user calls "new FileEntry" from their code, using the old constructor, they will not get the same behavior as the FileTreeIterator / Config would have given them.  That seems bad?

Basically, it seems to me that the current single signature for the FileEntry constructor is not sufficient.  Do you disagree?

Would it be possible to make all of the constructors for FileEntry private and provide some other method, like FileTreeIterator.getFileEntry or Repository.getFileEntry to construct them?

-------------------------------------
author: Zachary Orozco
date: 2015-08-17 09:16:36.000000000

Patch Set 1:

(1 comment)

Line:213, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> I hoped that having one constructor taking a FileModeStrategy and another one without that is ok. Knowledge about the WorkingTreeOptions (read from the config) is only needed by those
who want to create instances of FileModeStrategy. FileEntry itself does not need access to config/WorkingTreeOptions because it delegates everything to FileModeStrategy.

It's right: users which use the old API without specifying a FileModeStrategy will get a FileEntry with default default behaviour (no DIR_NO_GITLINKS). And the rest of JGit will use FileTreeIterators with FileModeStrategy and then we have different semantics when using a low-level API and when calling high-level (e.g. Git.open()....status().call()). That's not nice. One solution would be to remove (or at least deprecate) the constructor which is not taking a FileModeStrategy.

I guess we don't have so many callers of FileEntry constructors. I see it in tests, one place in EGit and FileTreeITerator itself. All those have the possibility to construct a proper FileModeStrategy.

But I agree, there may be people outside using FileEntry constructors and which do the config variable for dir_no_gitlinks set. Only those people will have problems. Since we introduce this config variable currently (and even native git doesn't know such a config variable) chances are quite small that we hit this problem, or?

-------------------------------------
author: Renee Levy
date: 2015-08-17 09:24:08.000000000

Patch Set 1:

(1 comment)

Line:213, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/FileTreeIterator.java -> OK, I think you are probably right.  It seems like it might be a good idea to deprecate the old constructor and include some documentation about why it might cause problems.

I think I was getting a little confused because I was thinking that, for the full-fledged DIR_NO_GITLINKS implementation, there will still be some changes in behavior for the default use case, because JGit currently does not have the same semantics as cgit (for example, in cgit, if you do "git add foo/bar.txt", and "foo" contains a .git directory, cgit will not create a gitlink, regardless of the value of DIR_NO_GITLINKS).  And I was thinking that that change in behavior was at risk of not working properly with the old FileEntry constructor...

But now that I have read your comment and am thinking about it a bit more, it seems like the situation that I described above will end up being an implementation detail for the DefaultFileModeStrategy, and so, you're right that users who called the old constructor would still see those changes.

I think I understand now; I will go ahead and start working on cleaning up this PR and adding tests ASAP.

-------------------------------------
