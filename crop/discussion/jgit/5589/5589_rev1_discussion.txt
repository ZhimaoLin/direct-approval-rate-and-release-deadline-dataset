DESCRIPTION

Enable large file support

Allow adding files with size over 2 GB. The drawback is that the tests
for huge file support takes about 15 minutes on a MacBook pro.

Change-Id: I5788e8009899203b346f353297166825b3744575


COMMENTS

author: Brenden Conley
date: 2012-04-15 17:48:28.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/1722/ 

-------------------------------------
author: Brenden Conley
date: 2012-04-15 18:01:33.000000000

Patch Set 1: Verified

Build Successful 
 
https://hudson.eclipse.org/sandbox/job/jgit.gerrit/1722/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2012-04-15 18:13:37.000000000

Patch Set 1: (1 inline comment)



Line:74, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/HugeFileTest.java -> I wish I had a good answer for how to avoid doing operations like a SHA-1 on 4G of data.

Maybe a custom subclass of WorkTreeIterator that provides a single fake huge file and returns a fake ObjectId that is cached, thus avoiding the need to run SHA-1 over the input stream?

-------------------------------------
author: Juliet Cantu
date: 2012-04-15 18:41:43.000000000

Patch Set 1:

Here are my timings for the differnt parts; 10 min (not 15) this time:

Commencing test, dt=0.114s

Created file, dt=81.78s

Added file, dt=91.514s

Status after add, dt=0.312s

Status after non-modifying update, dt=73.542s

Status after modifying update, dt=74.371s

Status after truncating update, dt=2.613s

Status after modifying and truncating update, dt=1.031s

Status after adding truncated file, dt=126.899s

Status after status on truncated file, dt=0.002s

Status after modifying and truncating update, dt=26.875s

After commit, dt=0.68s

After status after commit, dt=26.959s

After reset --hard, dt=103.644s

Status after hard reset, dt=0.002s

-------------------------------------
author: Juliet Cantu
date: 2012-04-15 20:11:27.000000000

Patch Set 1: (1 inline comment)



Line:74, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/HugeFileTest.java -> I am a little worried some optimization may bypass the modulo nature of the dircache length attribute and not read everyting. 

Mocking some operation with mockito may be better, because we could then verify that the correct calls would have been made.

-------------------------------------
author: Juliet Cantu
date: 2012-04-15 23:15:57.000000000

Patch Set 1: (1 inline comment)



Line:74, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/HugeFileTest.java -> tmpfs and lots of RAM would help. This is an essentially IO-bound operation. On my laptop raw dd runs at about 65 MB/s, while the Add opertions slows down, but only to around 55. An infinitely fast SHA-1 would only gain about 10 seconds. I tried http://www.saphir2.com/sphlib/, but the difference is drowned by measuring errors.

-------------------------------------
author: Yoselin Hanna
date: 2012-04-15 23:31:41.000000000

Patch Set 1: (1 inline comment)



Line:74, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/HugeFileTest.java -> I'm not thrilled about adding 40 seconds or whatever to our unit testing time just to verify we truncate a long to an int the way git-core does. It would be better to mock out this >4G test somewhat so we aren't asking the local system to deal with a 4G temporary file in the middle of what should be small fast unit test.

-------------------------------------
author: Douglas Trujillo
date: 2012-04-15 23:44:29.000000000

Patch Set 1: (1 inline comment)



Line:2, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/HugeFileTest.java -> I guess this should be your copyright

-------------------------------------
author: Gerrit Code Review
date: 2012-04-18 19:49:29.000000000

Your change could not be merged due to a path conflict.

Please merge (or rebase) the change locally and upload the resolution for review.

-------------------------------------
