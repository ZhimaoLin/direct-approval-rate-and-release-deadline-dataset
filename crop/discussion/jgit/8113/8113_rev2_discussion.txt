DESCRIPTION

Merge Recursive strategy

Implement Java version of git-core:
builtin/merge-recursive.c and
merge-recursive.c

Change-Id: I6292bb7bda55c0242a448a94956f2d6a94fddbaa


COMMENTS

author: Caleb Zhang
date: 2012-10-16 03:01:11.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2012-10-16 03:01:17.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2399/ 

-------------------------------------
author: Brenden Conley
date: 2012-10-16 03:10:08.000000000

Patch Set 2: Fails

Build Failed 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2399/ : FAILURE

-------------------------------------
author: Zachary Orozco
date: 2012-10-16 09:38:05.000000000

Patch Set 2: (6 inline comments)

not yet finished with the review ... but here are some comments from my side.

Line:244, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> see my comments on mergeTrees() and change this accordingly.

Line:950, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> I wouldn't put the try/catch block inside this method. Let this method throw the exceptions and let the caller handle the exceptions. Already now our two users of this method have different needs regarding exception handling. Therefore it's better to let the callers handle exceptions.

Line:319, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> This won't compile with jdk 1.5. The contributor guide to EGit/JGit still stays we have Java 5.0 and Eclipse 3.5 as minimum requirement and we should avoid references to newer Java versions.

You can get around it by writing your own copyOf() in this class. Here is how jdk 6 implements it


    public static <T> T[] copyOf(T[] original, int newLength) {
        return (T[]) copyOf(original, newLength, original.getClass());
    }
    public static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {
        T[] copy = ((Object)newType == (Object)Object[].class)
            ? (T[]) new Object[newLength]
            : (T[]) Array.newInstance(newType.getComponentType(), newLength);
        System.arraycopy(original, 0, copy, 0,
                         Math.min(original.length, newLength));
        return copy;
    }

Line:320, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> see above

Line:323, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> see above

Line:77, org.eclipse.jgit/src/org/eclipse/jgit/merge/MergeStrategy.java -> Maybe you want to add also this strategy as the default one in the classes Merge.java and MergeCommand.java

-------------------------------------
author: Caleb Zhang
date: 2012-10-16 13:03:35.000000000

Patch Set 2: I would prefer that you didn't submit this

(3 inline comments)

Need to re-debug test failiures as compile does not mean expected behaviour.

Line:950, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> So change the behaviour of the snippet I have refactored? The original code for the resolve merger had the try/catch but clients would rather do it? So I will be modifying all the clients too?

Line:319, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Time to change the guide :-)

Line:77, org.eclipse.jgit/src/org/eclipse/jgit/merge/MergeStrategy.java -> As with native Git, the default should be to try the simplest merge first. It was noted earlier, recusion can be expensive, especially with large chains of multi-based commit histories

-------------------------------------
author: Zachary Orozco
date: 2012-10-16 16:07:25.000000000

Patch Set 2: (22 inline comments)

Sorry, I am complaining about a lot of places where you without need changed the visibility of fields/methods from private to public. Although that's not a big problem I prefer to have (especially as reviewer :-) ) as small proposals as possible.

Line:109, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need tw. I would leave it private and also remove the comment.

Line:119, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need T_BASE. I would leave it private and also remove the comment.

Line:124, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need T_OURS. I would leave it private and also remove the comment.

Line:129, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need T_THEIRS. I would leave it private and also remove the comment.

Line:134, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need T_INDEX. I would leave it private and also remove the comment.

Line:139, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need T_FILE. I would leave it private and also remove the comment.

Line:144, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need builder. I would leave it private and also remove the comment.

Line:154, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need unmergedPaths. I would leave it private and also remove the comment.

Line:159, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need modifiedFiles. I would leave it private and also remove the comment.

Line:164, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need toBeCheckedOut. I would leave it private and also remove the comment.

Line:169, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need toBeDeleted. I would leave it private and also remove the comment.

Line:174, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need mergeResults. I would leave it private and also remove the comment.

Line:179, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need failingPaths. I would leave it private and also remove the comment.

Line:184, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need enterSubtree. I would leave it private and also remove the comment.

Line:199, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need workingTreeIterator. I would leave it private and also remove the comment.

Line:288, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> you don't need createDir(). I would leave it private and also remove the comment.

That is true for all the methods coming now which you changed from private to protected. You don't need them. So I would leave them as they are.

Line:950, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> No, I wanted a pure refactoring without modification of the sematics. But you changed sematics. In your proposal if in the next lines an IOException is thrown then "dircache.unlock()" will not be called anymore. In the original code it was called because it was in a finally clause. That's a severe bug.

But the solution is easy: Only refactor the lines inside the try block into a new method called mergeTrees. And leave it up to the callers of mergeTrees to handle exception cases. Here in ResolveMerger we would call 

  try { mergeTrees(...) } finally { dircache.unlock }

and in RecursiveMerger (since you currently don't care about dircache unlocking) you can simply call

  mergeTrees(...).

Line:319, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Right, I would also like to use a better JDK. But that's not a topic which we should include in this proposal.

Line:350, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> The following method is unused. Please remove

Line:356, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> The parameter cleanup is unused. Please remove

Line:440, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> You are accessing here firstCommonAncestor.name(). Isn't that a potential NullPointerException? firstCommonAncestor may be null, or?

Line:77, org.eclipse.jgit/src/org/eclipse/jgit/merge/MergeStrategy.java -> I got that point. So you suggest to run simple algorithm first and if that don't succeeds then run the more expensive one and so on. I agree. 

But the question is: where to put this loop over merge strategies? Somewhere we have to add this. Either in the RecursiveMerge or in the callers of the merge (Merge.java, MergeCommand.java) or even higher in the code using jgit.

I think it should be like in native git: I can call "git merge sideBranch" even if I have no clue about which merge-strategies exist. Therefore I suggest to put this loop either in Merge.java,MergeCommand.java or in recursive merge itself. Where do you want to have it?

-------------------------------------
author: Douglas Trujillo
date: 2012-10-16 23:25:11.000000000

Patch Set 2: I would prefer that you didn't submit this

(26 inline comments)



Line:188, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> I do not understand this comment

Line:193, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> what's the benefit of repeating DirCache in javadoc ?

Line:203, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> this javadoc doesn't add any value

Line:246, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> style nit: no braces around single line blocks

Line:1004, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> did you want to do some cleanup in this finally block ?

Line:75, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> I think description of native git's implementation isn't relevant here

Line:106, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> in javadoc rather explain what functionality this class provides instead of explaining how you created it

Line:114, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> explain how this class does recursive merge instead of explaining native git's implementation

Line:135, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> though we need support for file-system based index

Line:137, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> we do not use author annotations

Line:155, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> I don't understand this

Line:159, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> mark octopus as a TODO

Line:183, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> style nit: we don't use curly braces around single line blocks

Line:215, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> style nit: no braces here

Line:228, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> message should be externalized

Line:264, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> why is this an IOException ?

Line:278, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> typo: s/the the/the/

Line:304, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> why is this an IOException ?

Line:315, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> remove dead code

Line:360, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> why is a null argument an incorrect object type ?

Line:376, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> why is this an IOException ?

Line:395, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> style nit: remove unnecessary blank line

Line:402, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> style nit: no braces around single line block, more below

Line:461, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> please find a less cryptic name

Line:287, org.eclipse.jgit/resources/org/eclipse/jgit/internal/JGitText.properties -> Headone, Headtwo don't look like English

Line:9, /COMMIT_MSG -> implementation details of native git are irrelevant here, rather explain what you implement here

-------------------------------------
author: Caleb Zhang
date: 2012-10-17 21:23:28.000000000

Patch Set 2: (1 inline comment)



Line:950, org.eclipse.jgit/src/org/eclipse/jgit/merge/ResolveMerger.java -> Context switch brain derailment. Yes I did know that. Thanks.

-------------------------------------
author: Caleb Zhang
date: 2012-10-18 14:11:33.000000000

Patch Set 2: (26 inline comments)



Line:75, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:106, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:114, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:135, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:137, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:155, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> LOOP enum not used, removed

Line:159, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:183, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Sure. The "SUBMITTING_PATCHES" file indicates using Eclipse built-in which does not complain about this. I'll also augment that file. This nit is fixed.

Line:215, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:228, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:264, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Like the Merge.getBaseCommit method does when there are multiplMergeBasesFor

Line:278, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:304, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> see above

Line:315, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:319, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:320, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:323, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:350, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:356, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:360, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> like Merger.getBaseCommit ...

Line:376, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> above

Line:395, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:402, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Done

Line:440, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> protective code added and explained

Line:461, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> not needed, removed

Line:9, /COMMIT_MSG -> Done

-------------------------------------
author: Zachary Orozco
date: 2012-10-21 22:35:43.000000000

Patch Set 2: (2 inline comments)



Line:135, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> Really, does this now work with a filesystem based index. Great - then we can get a lot of tests for free by parametrizing ResolveMergeTest to run the tests once with ResolveMerge and once with a subclass of ResolveMerge: RecursiveMerge. My first attempts to run all ResolveMergeTests against RecursiveMerge look promising.

Line:77, org.eclipse.jgit/src/org/eclipse/jgit/merge/MergeStrategy.java -> This comment is still unanswered. Somewhere we have to put some code which decides whether to use RecursiveMerge or ResolveMerge in cases where the higher layers have not explicitly set the strategy to use. Also native git's merge.c is trying the different strategies ... we should do similar (probably in MergeCommand.java)

-------------------------------------
