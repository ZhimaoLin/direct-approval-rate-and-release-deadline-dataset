DESCRIPTION

Implement recursive merge strategy

Extend ResolveMerger with RecursiveMerger to merge two tips
that have up to 200 bases.

Bug: 380314
CQ: 6854
Change-Id: I6292bb7bda55c0242a448a94956f2d6a94fddbaa
Signed-off-by: Malia Sampson xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2012-11-29 20:54:37.000000000

Uploaded patch set 10.

-------------------------------------
author: Brenden Conley
date: 2012-11-29 20:54:43.000000000

Patch Set 10:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2527/ 

-------------------------------------
author: Zachary Orozco
date: 2012-11-29 21:01:19.000000000

Patch Set 10: I would prefer that you didn't submit this

The tests will fail. RecursiveMerge does not work in a situation where we have multiple merge bases. I'll try to provide fixes

-------------------------------------
author: Brenden Conley
date: 2012-11-29 21:01:28.000000000

Patch Set 10: Fails

Build Failed 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2527/ : FAILURE

-------------------------------------
author: Zachary Orozco
date: 2012-12-05 09:45:13.000000000

Patch Set 10: (1 inline comment)



Line:87, org.eclipse.jgit/src/org/eclipse/jgit/merge/RecursiveMerger.java -> We are not overriding the method getBaseCommit() inherited from Merger.java. Therefore we are using here the default implementation which will throw an IOException when we find more then one common ancestor. This breaks MergeCommannd.call() which is an important API of JGit. In MergeCommand.call() we are calling getBaseCommit() when we populate the MergeResult after a succesfull merge. Although the recursive merge was succesfull we are getting hit by this IOException and the call finally fails. We have to override getBaseCommit() because we should not throw an IOException when we find more than one common predecessor. I have proposed a different implementation in the next patchset

-------------------------------------
