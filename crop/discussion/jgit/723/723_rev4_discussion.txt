DESCRIPTION

Add a merge command to the jgit API

Merges the current head with one other commit.
In this first iteration the merge command supports
only fast forward and already up-to-date.

Change-Id: I0db480f061e01b343570cf7da02cac13a0cbdf8f
Signed-off-by: Carlie Harper xxx@xxx.xxx
Signed-off-by: Zachary Orozco xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2010-05-20 15:41:52.000000000

Uploaded patch set 4.

-------------------------------------
author: Zachary Orozco
date: 2010-05-20 15:42:54.000000000

Patch Set 4: Looks good to me, but someone else must approve; IP review completed

rebased this change to current master and externalized strings

-------------------------------------
author: Yoselin Hanna
date: 2010-05-20 17:37:21.000000000

Patch Set 4: I would prefer that you didn't submit this; No score



Line:161, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Unrelated reformatting in this file?  Looks like you can revert it from this change.

Line:83, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> The problem with a HashMap is it doesn't preserve the order the caller passed the commits to us in.  We should maintain that order, because its the order we'll attempt to do the octopus merge in, and the order we write the parents out in the commit as.  If you keep using a Map<String,ObjectId> here you should use a LinkedHashMap to ensure the insertion order is preserved.  Or, switch to a List<Ref>.

Line:102, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> We probably should also abort if commits is empty.  You need at least one other thing to merge with besides head.

Line:117, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> This is really undefined when there is more than one commit.

Instead you should look at the strategy, and then enforce some sanity on the commits member.  E.g. add a member to MergeStrategy to help us decide if the number of commits is reasonable.  Then the already-up-to-date and fast-forward-only strategies only need to accept 1 commit, and reject functioning when more than 1 commit is given.

I do see that you are trying to collapse multiple commits that are reachable all together in this loop.  But that's probably just a pre-processing step that we can do at the beginning of the function, no matter what strategy was configured.  Even in an octopus merge, it doesn't make sense to create an 8-way merge if it can really be a 2-way because the other 6 commits are already reachable.

Gerrit Code Review has some logic to do this in [1].  Ignore the CAN_MERGE stuff, that's there only to support the code review workflow and ensure a commit was approved.  The bulk of the sorting logic is about computing the commits that will be merged, and removing them from incoming (what the caller asked us to merge) if they are already reachable.

[1] https://android.git.kernel.org/?p=tools/gerrit.git;a=blob;f=gerrit-server/src/main/java/com/google/gerrit/server/git/MergeSorter.java;hb=HEAD

You know what, maybe for right now just enforce that commits.size() == 1 at the start of the method (and maybe also in include, assert that its empty), and simplify the code around that assertion.  commits.size() > 1 will only be useful once we have all other aspects of the merge code working... and we can come back and revisit how to sort the heads and determine up-to-date in the octopus case.

Line:246, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> This needs to be commit.copy().  AnyObjectId can be a MutableObjectId, which can change after-the-fact.  copy() returns you an ObjectId which cannot be mutated.  If the input was already an immutable ObjectId, copy() just returns the same object.

Line:57, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java -> Style-nit: Spaces around operators (applies also to a number of spots below).

Line:66, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java -> Style-nit: Unnecessary parens.  If there's ever a place you don't need parens, its right here in an assignment of one variable to another.  :-)

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java -> s/Pathes/Paths/

-------------------------------------
author: Zachary Orozco
date: 2010-05-21 14:41:09.000000000

Patch Set 4:

worked on the comments

Line:161, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> damned eclipse auto formatter. I'll revert this

Line:83, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> I'll use List<Ref> now

Line:102, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> added a InvalidMergeHeadException

Line:117, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> Maybe this was a misunderstanding by Stefan and me. 
When reading http://www.kernel.org/pub/software/scm/git/docs/git-merge.html#_pre_merge_checks we thought that FAST_FORWARD and ALREADY_UP_TO_DATE are checks which are done before we contact the merge strategy. This loop was never intended to be a "big loop doing all the merges and maybe combining merge operations" - we just wanted to do these two pre-merge checks. 

But after reading your comment and experimenting we see that these pre-merge checks are not done before the merge strategy but every strategy triggers them explicitly, right?

For now we'll remove the loop and keep the fast-forward, already-up-to-date checks. We'll make sure that only one commit is specifiied.

Line:226, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> oops, I missed to merge with Stefans fix for annotated tags (calling getPeeledObjectID()). I'll add that again.

Line:246, org.eclipse.jgit/src/org/eclipse/jgit/api/MergeCommand.java -> Done

Line:57, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java -> Done

Line:66, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java -> it's a miracle to me how this parens came in. So useless that I cannot believe I typed it ...

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutConflictException.java -> Done

-------------------------------------
author: Gerrit Code Review
date: 2010-05-24 14:51:05.000000000

Your change could not be merged due to a path conflict.

Please merge (or rebase) the change locally and upload the resolution for review.

-------------------------------------
