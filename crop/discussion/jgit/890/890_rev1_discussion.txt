DESCRIPTION

Rename lib.Repository to storage.file.FileRepository

This opens the door for later refactorings to support pulling common
APIs out of FileRepository back up into lib.Repository, and then
implementing storage systems that aren't on the local filesystem,
such as an in-memory system for unit testing.

A handful of minor, previously non-public APIs had to be made public
to suppport this change.  Its a minor hazard, and one that really
doesn't harm the project that badly, and they may even be needed by
the other storage APIs anyway.

Change-Id: I1bd54ea0500337799a8e792874c272eb14d555f7
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Yoselin Hanna
date: 2010-06-18 01:43:47.000000000

Patch Set 1: Looks good to me, but someone else must approve; IP review completed

I think this is all we need to do the rename.  I've tried to keep the patch as small as possible, but still tried to move the bulk of the "local file storage" related code into the new storage.file package.

I figure we will submit this, and then start following up with commits to extract up into a common lib.Repository base class, as well as clean up some of the nastier parts, like having exposed PackedObjectLoader and WholePackedObjectLoader so that PackWriter would be happy.

See also I2459757a26f8c724b95468f9f38bac2ee172a932, the matching change in EGit.

-------------------------------------
author: Juliet Cantu
date: 2010-06-18 12:18:23.000000000

Patch Set 1: I would prefer that you didn't submit this

You should refactor the Repository API first. Most of the other functions now changed don't need a FileRepository.

1. Extract a prelimninary Repository API into an interface
2. Rename the impleementation class
3. Clean up API. This probably takes more than one step to get it right.

-------------------------------------
author: Douglas Trujillo
date: 2010-06-18 18:34:55.000000000

Patch Set 1: I would prefer that you didn't submit this

It looks strange that a lot of public API methods expose FileRepository in their parameter lists. This implies we have to break the API again when a Repository interface is extracted which would shield applications from the details of the chosen storage implementation. So as Robin suggested I would also tend to first extract the interface and then later rename the current file based storage implementation. This further refactoring would then mainly affect jgit implementation and hopefully not or only minimally the application coding.

-------------------------------------
