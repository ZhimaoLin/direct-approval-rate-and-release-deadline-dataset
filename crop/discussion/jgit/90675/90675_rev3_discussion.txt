DESCRIPTION

FileRepository.autoGC: run in background

When running an automatic GC on a FileRepository, when the caller
passes a NullProgressMonitor, fork off a new thread (per repository)
to run the GC in.

In some cases, the auto GC limit is lower than the true number of
unreachable loose objects, so auto GC will run after every (e.g) fetch
operation.  This leads to the appearance of poor fetch performance.
Since these GCs will never make progress (until either the objects
become referenced, or the two week timeout expires), blocking on them
simply reduces throughput.

In the event that an auto GC would make progress, it's still OK if it
runs in the background.  The progress will still happen.

This matches the behavior of regular git.

If the user passes a ProgressMonitor that is not a
NullProgressMonitor, they might actually care about the progress of
the GC, and would get confused if that progress happened after the
autoGC call returns, so we run in the foreground in that case.  But we
still don't run more than one auto GC at a time, so if a
background GC is happening, another GC isn't started.

Change-Id: I3870cadb4a0a6763feff252e6eaef99f4aa8d0df
Signed-off-by: Carissa Dunn xxx@xxx.xxx


COMMENTS

author: Carissa Dunn
date: 2017-02-09 18:07:26.000000000

Uploaded patch set 3: Commit message was updated.

-------------------------------------
author: Brenden Conley
date: 2017-02-09 18:07:32.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/9776/

-------------------------------------
author: Brenden Conley
date: 2017-02-09 18:15:50.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/9776/ : SUCCESS

-------------------------------------
author: Carissa Dunn
date: 2017-02-09 18:31:53.000000000

Patch Set 3: Code-Review-1

hold for reroll on gc.log.lock

-------------------------------------
