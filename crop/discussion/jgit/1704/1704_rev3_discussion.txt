DESCRIPTION

Add "Branch" command

The need for this becomes more pressing with the addition of "Pull"
support: we need to make sure the upstream configuration entries
are written correctly when creating and renaming branches 
(and of course are cleaned up when deleting them).
This adds support for listing, adding, deleting, and renaming branches
including the more common options.

Bug: 326938
Change-Id: I00bcc19476e835d6fd78fd188acde64946c1505c
Signed-off-by: Willow Cantrell xxx@xxx.xxx


COMMENTS

author: Willow Cantrell
date: 2010-10-07 17:04:06.000000000

Uploaded patch set 3.

-------------------------------------
author: Willow Cantrell
date: 2010-10-07 17:07:00.000000000

Patch Set 3:

Split this into several specific commands as suggested by Shawn. Also incorporated a few remarks from Malia Sampson's change 1497.

-------------------------------------
author: Zachary Orozco
date: 2010-10-07 22:07:12.000000000

Patch Set 3: (10 inline comments)



Line:183, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Trailing whitespace error! Make sure you have our standard jgit preferences active which would delete such whitespaces.

Line:188, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> you didn't wanted to change these comment, or?

Line:73, org.eclipse.jgit/src/org/eclipse/jgit/api/DeleteBranchCommand.java -> You don't return a List<Ref> because this would return Refs which are deleted already, right?

Line:190, org.eclipse.jgit/src/org/eclipse/jgit/api/DeleteBranchCommand.java -> You don't have a setMode() here as the command does. On command line if you want to delete a remote tracking branch you have to specify '-r', otherwise the operation is prohibited.

But I am not sure whether I really want this feature in our API. I think it is ok to delete remote tracking branches without given the mode.

Line:78, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/BranchCommandTest.java -> Why do you create this file? It's not added to the initial commit.

Line:84, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/BranchCommandTest.java -> Why don't you use writeTrashFile(filename, data)? A single call does what your 4 lines do. This comment is applicable a lot of times in this File.

Line:113, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/BranchCommandTest.java -> shouldn't we delete those commented out lines?

Line:135, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/BranchCommandTest.java -> It's not needed to create the localRepository. As this test is subclass
of RepositoryTestCase all tests automatically have access to a test repo. Just call getRepository() to get access to it.

Line:1, org.eclipse.jgit/src/org/eclipse/jgit/api/errors/CannotDeleteCurrentBranchException.java -> Missing copyright header

Line:315, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> We should accept by also RevCommits as starting point. Same as in MergeCommand.include(..) - we have to accept Strings as well as higher-level objects.

Imagine you create the first branch with this command (which would return a RevCommit) and then you want to create a second branch with the first branch as starting point. We already have the object of right type in hand, but we are forced to convert it to a String and then this class will convert back the String to a RevCommit.

-------------------------------------
author: Yoselin Hanna
date: 2010-10-08 02:01:26.000000000

Patch Set 3: I would prefer that you didn't submit this

(5 inline comments)

Incomplete review, but I have a feeling some of my comments might be more general across the classes, and its dinner time, so I'm giving up early...

Line:83, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> typo on set-upstream

Line:98, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> Maybe SET_UPSTREAM ?

Line:136, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> If you are taking a String, use repo.resolve(String) to convert it to an ObjectId.  This guess work here is repeating only some of that logic, poorly, and fails on things like abbreviations.

Its OK to have the special case to see if its a remote branch, but that's probably something like:

  Ref ref = repo.getRef(R_REMOTES + startPoint);
  ObjectId id;
  if (ref != null) {
    ... its a remote tracking branch, setup tracking ...
    id = ref.getObjectId();
  } else {
    ... anything else cannot be tracked automatically ...
    id = repo.resolve(startPoint);
  }

Line:251, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> I would prefer to trim the length of R_REMOTES off first, and then split.  That way you only need to split twice to get remote name and branch name, and we don't have this odd constant here.

Line:348, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> Why do we have this method?  We don't do this for any other command object type.

-------------------------------------
author: Willow Cantrell
date: 2010-10-08 12:10:05.000000000

Patch Set 3: (15 inline comments)



Line:183, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Done

Line:188, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Done

Line:73, org.eclipse.jgit/src/org/eclipse/jgit/api/DeleteBranchCommand.java -> Exactly.

Line:190, org.eclipse.jgit/src/org/eclipse/jgit/api/DeleteBranchCommand.java -> Documented the behavior.

Line:78, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/BranchCommandTest.java -> Done

Line:84, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/BranchCommandTest.java -> Done

Line:113, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/BranchCommandTest.java -> Done

Line:135, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/BranchCommandTest.java -> This is actually a third Repository (the first one is not connected to a remote repo and for some tests we need one that has remote tracking branches)

Line:1, org.eclipse.jgit/src/org/eclipse/jgit/api/errors/CannotDeleteCurrentBranchException.java -> Done

Line:83, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> Done

Line:98, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> Done

Line:136, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> It seems that upstream config is also possible if you are based on a local branch, in which case branch.<name>.remote is set to ".". Am I wrong?

Line:251, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> See remark above about upstream config when a local branch is the start point.

Line:315, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> Done

Line:348, org.eclipse.jgit/src/org/eclipse/jgit/api/CreateBranchCommand.java -> Done

-------------------------------------
