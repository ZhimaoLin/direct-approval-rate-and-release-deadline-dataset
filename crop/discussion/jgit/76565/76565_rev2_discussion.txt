DESCRIPTION

push: Report fatal server errors during pack writing

If the push client has requested side-band support the server can
signal a fatal error parsing the pack using the error channel (3)
and then hang up. This may cause the PackWriter to fail to write to
data onto the network socket, which throws a misleading error back
up to the application and the user.

During a write failure poll the input to see if the side band system
can parse out an error message off channel 3. This should be fast as
there will either be an error present in the buffer, or the remote will
also have hung-up on the side band channel. In the case of a hang-up
just rethrow the original IOException as its a network error.

This roughly matches what C git does; once commands are sent and the
packer is started a new thread runs in the background to decode any
possible server error during unpacking on the remote peer

Change-Id: Idb37a4a122a565ec4b59130e08c27d963ba09395


COMMENTS

author: Yoselin Hanna
date: 2016-07-05 16:15:46.000000000

Uploaded patch set 2: Patch Set 1 was rebased.

-------------------------------------
author: Brenden Conley
date: 2016-07-05 16:15:53.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8629/

-------------------------------------
author: Brenden Conley
date: 2016-07-05 16:29:59.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8629/ : SUCCESS

-------------------------------------
author: Eden Lin
date: 2016-07-05 17:47:00.000000000

Patch Set 2:

(1 comment)

Line:441, org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackPushConnection.java -> This doesn't throw an exception if there is at least one byte of data buffered already.

Should this examine the return value from read() to make sure it's -1? Is it possible for the return value not to be -1?

-------------------------------------
author: Yoselin Hanna
date: 2016-07-05 19:24:29.000000000

Patch Set 2:

(1 comment)

Line:441, org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackPushConnection.java -> True, but that would likely be a violation of the wire protocol.

We got here because a portion of the pack couldn't be written to the server. So the server has not received the complete pack yet.

Here in.read() is returning data for the data (aka report-status) channel (1). Server failures are going to be reported on channel 2 or channel 3, which in.read() consumes.

So *most* of the time we get here there is no data in the data channel, but there may be a message in channel 2 or channel 3, which in.read() will consume and make available to us.

If there is a byte in the data channel, we don't really care. We didn't finish writing the pack out. The network failure writing the pack (e1) may be more relevant than anything the server was trying to say on the report-status channel without first having told us something on channel 2 or channel 3.

-------------------------------------
author: Eden Lin
date: 2016-07-05 20:06:32.000000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Gerrit Code Review
date: 2016-07-06 00:21:03.000000000

Change has been successfully merged into the git repository by Yoselin Hanna

-------------------------------------
