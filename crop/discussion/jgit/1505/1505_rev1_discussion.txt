DESCRIPTION

Adding PatienceDiff to DiffPerformance tests

To optimize PatienceDiff some load tests may be usefull.
Reused what was written for MyersDiff.

Change-Id: Ide9f7ad95345a144dbf8ef8bbb40a7d73a3539a2
Signed-off-by: Zachary Orozco xxx@xxx.xxx


COMMENTS

author: Yoselin Hanna
date: 2010-09-02 22:19:40.000000000

Patch Set 1: I would prefer that you didn't submit this

(3 inline comments)



-------------------------------------
author: Gerrit Code Review
date: 2010-09-08 12:56:13.000000000

Change cannot be merged due to unsatisfiable dependencies.

The following dependency errors were found:

* Depends on patch set 7 of Ic7a76df2, however the current patch set is 7.
* Depends on patch set 1 of I45444677, however the current patch set is 1.
* Depends on patch set 1 of Id35ef478, however the current patch set is 1.
* Depends on patch set 5 of I559f494d, however the current patch set is 6.

Please rebase the change and upload a replacement commit.

-------------------------------------
author: Yoselin Hanna
date: 2010-09-02 22:19:39.000000000

MISMATCHED INLINE COMMENT
Line:65, org.eclipse.jgit.test/tst/org/eclipse/jgit/diff/MyersDiffPerformanceTest.java -> Should we rename the class to DiffPerformanceTest?

-------------------------------------
author: Yoselin Hanna
date: 2010-09-02 22:19:39.000000000

MISMATCHED INLINE COMMENT
Line:170, org.eclipse.jgit.test/tst/org/eclipse/jgit/diff/MyersDiffPerformanceTest.java -> Myers promises to run in O(N * D), where N is the sum of the lengths of A and B, and D is the size of the minimum edit script.  I don't think this is true for the current PatienceDiff implementation.

In particular there is a sorting step during each recursion.  But if I'm thinking it through correctly, PatienceDiff's running time should be bounded by the size of the inputs, around O(A log A + B log B + D) =~ O(N log N + D).  That matches with a variation of Myers' algorithm that uses suffix trees.

I _think_ O(N log N + D) is going to be faster than O(N * D), but if N is really big, log N could easily exceed D.  :-)

-------------------------------------
author: Yoselin Hanna
date: 2010-09-02 22:19:39.000000000

MISMATCHED INLINE COMMENT
Line:182, org.eclipse.jgit.test/tst/org/eclipse/jgit/diff/MyersDiffPerformanceTest.java -> This is actually a horrible input for PatienceDiff, and the result is D (length of the edit script) is always exactly 1... a full replace.

The problem stems from PatienceDiff needing to locate a unique common point within each segment.  The generated input is segments of single characters, which wind up repeating and being not-unique anymore.  This is a corner case that PatienceDiff falls down on.  Consequently MyersDiff produces actual edits and PatienceDiff doesn't.

I'll try to come up with a better input.

-------------------------------------
