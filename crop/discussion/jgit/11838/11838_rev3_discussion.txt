DESCRIPTION

Split remaining delta work on path boundaries

When an idle thread tries to steal work from a sibling's remaining
toSearch queue, always try to split along a path boundary. This
avoids missing delta opportunities in the current window of the
thread whose work is being taken.

The search order is reversed to walk further down the chain from
current position, avoiding the risk of splitting the list within
the path the thread is currently processing.

When selecting which thread to split from use an accurate estimate
of the size to be taken. This avoids selecting a thread that has
only one path remaining but may contain more pending entries than
another thread with several paths remaining.

As there is now a race condition where the straggling thread can
start the next path before the split can finish, the stealWork()
loop spins until it is able to acquire a split or there is only
one path remaining in the siblings.

Change-Id: Ib11ff99f90a4d9efab24bf4a85342cc63203dba5


COMMENTS

author: Yoselin Hanna
date: 2013-04-12 15:13:17.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2013-04-12 15:28:53.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3366/ 

-------------------------------------
author: Brenden Conley
date: 2013-04-12 15:33:50.000000000

Patch Set 3: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3366/ : SUCCESS

-------------------------------------
author: Warren Watkins
date: 2013-04-12 16:01:37.000000000

Patch Set 3: Looks good to me, approved

(1 inline comment)



Line:93, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/DeltaTask.java -> nit: i would probably just return null here and remove ti from the end of the method.

-------------------------------------
