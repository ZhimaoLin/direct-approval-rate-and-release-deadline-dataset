DESCRIPTION

Split remaining delta work on path boundaries

When an idle thread tries to steal work from a sibling's remaining
toSearch queue, always try to split along a path boundary. This
avoids missing delta opportunities in the current window of the
thread whose work is being taken.

The search order is reversed to walk further down the chain from
current position, avoiding the risk of splitting the list within
the path the thread is currently processing.

When selecting which thread to split from use an accurate estimate
of the size to be taken. This avoids selecting a thread that has
only one path remaining but may contain more pending entries than
another thread with several paths remaining.

Because there is now a race condition where the straggling thread
starts the path before the split can happen the stealWork() loop is
expanded to attempt 4 iterations rather than 2. This simply gives the
idle thread a better chance to observe each sibling's queue and make
a cut while the sibling is busy searching within its active window.

Change-Id: Ib11ff99f90a4d9efab24bf4a85342cc63203dba5


COMMENTS

