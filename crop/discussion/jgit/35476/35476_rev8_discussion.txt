DESCRIPTION

Introduce hook support into the FS implementations

This introduces the background plumbing necessary to call for the git
hooks from JGit. This implementation will be OS-dependent as it aims to
be compatible with existing hooks, mostly written in Shell. It is
compatible with unix systems and windows as long as an unix emulator
such as Cygwin is in its PATH.

Change-Id: I1f82a5205138fd8032614dd5b52aef14e02238ed
Signed-off-by: Gustavo Green xxx@xxx.xxx


COMMENTS

author: Gustavo Green
date: 2014-11-25 15:42:33.000000000

Uploaded patch set 8.

-------------------------------------
author: Brenden Conley
date: 2014-11-25 15:42:39.000000000

Patch Set 8:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/5766/

-------------------------------------
author: Gustavo Green
date: 2014-11-25 15:43:09.000000000

Patch Set 8:

Rebased because of conflicts with I3f5c55dd4c084529af2319029305ba2e174e0636

-------------------------------------
author: Brenden Conley
date: 2014-11-25 15:52:55.000000000

Patch Set 8: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/5766/ : SUCCESS

-------------------------------------
author: Douglas Trujillo
date: 2015-01-22 09:56:40.000000000

Patch Set 8: Code-Review-1

(22 comments)

* could you add some tests for process execution ?
* could you rebase this series onto origin/master ?

Line:351, org.eclipse.jgit.java7/src/org/eclipse/jgit/util/FS_POSIX_Java7.java -> since tag is not required here since the API change is in the super class

Line:356, org.eclipse.jgit.java7/src/org/eclipse/jgit/util/FS_POSIX_Java7.java -> define a constant for that in org.eclipse.jgit.lib.Constants

Line:148, org.eclipse.jgit/src/org/eclipse/jgit/util/FS_Win32_Cygwin.java -> since tag is not required here since the API change is in the super class

Line:167, org.eclipse.jgit/src/org/eclipse/jgit/util/FS_Win32_Cygwin.java -> this is the only line this method is different from the one for posix, I guess there's a way to avoid this code duplication, you could add a relativize method to the superclass which is overwritten here in this class

Line:144, org.eclipse.jgit.java7/src/org/eclipse/jgit/util/FS_Win32_Java7Cygwin.java -> since tag is not required here since the API change is in the super class

Line:420, org.eclipse.jgit/src/org/eclipse/jgit/util/FileUtils.java -> s/3.6/3.7/

Line:133, org.eclipse.jgit/src/org/eclipse/jgit/util/FS_POSIX.java -> since tag is not required here since the API change is in the super class

Line:48, org.eclipse.jgit/src/org/eclipse/jgit/util/ProcessResult.java -> s/3.6/3.7/

Line:56, org.eclipse.jgit/src/org/eclipse/jgit/util/ProcessResult.java -> I think you mean a script not a process, right ?

Line:61, org.eclipse.jgit/src/org/eclipse/jgit/util/ProcessResult.java -> how can you find a process on disk ? you probably meant script

Line:68, org.eclipse.jgit/src/org/eclipse/jgit/util/ProcessResult.java -> don't we also need an error status ?

Line:632, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> s/error will/error streams will/

Line:638, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> s/from/for/

repeated below

Line:640, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> The hook to be executed

repeated below

Line:648, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> s/3.6/3.7/

Line:682, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> s/3.6/3.7/

Line:691, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> s/and/to/

Line:699, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> s/3.6/3.7/

Line:701, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> maybe shorter findHook

Line:730, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> s/3.6/3.7/

Line:49, org.eclipse.jgit/src/org/eclipse/jgit/util/Hook.java -> s/3.6/3.7/

Line:64, org.eclipse.jgit/src/org/eclipse/jgit/util/Hook.java -> we can't have an enum without any entry, we could introduce all possible hooks here already in this first patch in the series

-------------------------------------
author: Gustavo Green
date: 2015-01-23 08:12:32.000000000

Patch Set 8:

I'll rebase first and make the changes you've asked for in a subsequent patch set, it should make it easier for you to see the changes I actually make between the two.

-------------------------------------
author: Gustavo Green
date: 2015-01-23 08:12:47.000000000

Patch Set 9: Patch Set 8 was rebased

-------------------------------------
author: Gustavo Green
date: 2015-01-23 10:20:31.000000000

Patch Set 8:

(22 comments)

Line:351, org.eclipse.jgit.java7/src/org/eclipse/jgit/util/FS_POSIX_Java7.java -> Done

Line:356, org.eclipse.jgit.java7/src/org/eclipse/jgit/util/FS_POSIX_Java7.java -> Done

Line:148, org.eclipse.jgit/src/org/eclipse/jgit/util/FS_Win32_Cygwin.java -> Done

Line:167, org.eclipse.jgit/src/org/eclipse/jgit/util/FS_Win32_Cygwin.java -> We can't do that : the only superclass that would be common between these two is "FS"... and that FS does not support running a hook.

Or I'd need to override FS_Win32#runIfPresent(...) to return the NOT_SUPPORTED status, then re-override that here, in the Cygwin version, to copy/paste what would now be in "FS#runIfPresent since Cygwin can properly run hooks even though windows cannot.

I could add a protected "runIfPresent" implementation that does the work in FS, and call that from here... but I think this is adding more complexity than we're removing.

The subsequent patch set implements that. Do you see a better way?

Line:144, org.eclipse.jgit.java7/src/org/eclipse/jgit/util/FS_Win32_Java7Cygwin.java -> Done

Line:420, org.eclipse.jgit/src/org/eclipse/jgit/util/FileUtils.java -> Done

Line:133, org.eclipse.jgit/src/org/eclipse/jgit/util/FS_POSIX.java -> Done

Line:48, org.eclipse.jgit/src/org/eclipse/jgit/util/ProcessResult.java -> Done

Line:56, org.eclipse.jgit/src/org/eclipse/jgit/util/ProcessResult.java -> Yes :)

Line:61, org.eclipse.jgit/src/org/eclipse/jgit/util/ProcessResult.java -> yes, as above.

Line:68, org.eclipse.jgit/src/org/eclipse/jgit/util/ProcessResult.java -> No : there are actually no errors, or rather, none that we can detect without guesswork.

If the script is found and executed, then we'll run it as an external process. All we'll have as a result of that is an exit code, and all we know about that exit code is that it is stored on 8-bit (*if* cygwin uses the same length as POSIX, since windows itself uses 32-bit signed integers instead).

We could return an error status if that exit code is not 0... but that's already guesswork : some people might use other exit values even for successful execution. Or we could use an error status if "something" gets printed on the process' error stream, but once again it might not be the indication of an execution error, it might rather be a warning.

It will be for each user to know what the exit code means when we properly execute the script... which is also how cgit works.

Line:632, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Done

Line:638, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Done

Line:640, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Done

Line:648, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Done

Line:682, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Done

Line:691, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Done

Line:699, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Done

Line:701, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> "findHook" doesn't reflect the fact that this can return null though. I've changed it but really prefer the "tryFind" wording.

Line:730, org.eclipse.jgit/src/org/eclipse/jgit/util/FS.java -> Done

Line:49, org.eclipse.jgit/src/org/eclipse/jgit/util/Hook.java -> Done

Line:64, org.eclipse.jgit/src/org/eclipse/jgit/util/Hook.java -> I've changed this to include all entries of the hooks I did make suppport for. The others I have not looked into the parameters yet, so I wouldn't be able to add the literal with proper documentation.

-------------------------------------
