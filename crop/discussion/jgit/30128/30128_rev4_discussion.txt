DESCRIPTION

Fix RecursiveMerger's internal use of merge to find a merge base

When RecursiveMerger tried to determine a common base tree it was
recursively tried to merge multiple common bases. But these intermediate
merges which have just been done to determine a single common base for
the final merge already filled some important fields (toBeCheckedOut,
toBeDeleted, ...). These side effects of the intermediate merges led to
wrong results of the final merge. One symptom was that after a recursive
merge which should be succesful you could still see leftover files in
the worktree: files which existed in the (virtual) common base but which
don't exist anymore in the branches to be merged.

The solution is easy: Clear the appropriate fields after common base
determination and start the final merge with a clean state.

Change-Id: I644ea9e1cb15360f7901bc0483cdb9286308c226
Signed-off-by: Juliet Cantu xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2014-07-25 06:48:34.000000000

Uploaded patch set 4.

-------------------------------------
author: Brenden Conley
date: 2014-07-25 06:48:40.000000000

Patch Set 4:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/5368/

-------------------------------------
author: Brenden Conley
date: 2014-07-25 07:02:56.000000000

Patch Set 4: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/5368/ : SUCCESS

-------------------------------------
author: Danika Greer
date: 2014-07-25 07:32:39.000000000

Patch Set 5: Patch Set 4 was rebased

-------------------------------------
