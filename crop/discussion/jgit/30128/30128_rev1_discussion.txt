DESCRIPTION

Fix RecursiveMerger

When RecursiveMerger tried to determine a common base tree it was
recursively tried to merge multiple common bases. But these intermediate
merges which have just been done to determine a single common base for
the final merge already filled some important fields (toBeCheckedOut,
toBeDeleted, ...). These sideeffects of the intermediate merges led to
wrong results of the final merge. One sympton was that after a recursive
merge which should be succesfull you could still see leftofer files in
the worktree: files which existed in the (virtual) common base but which
don't exist anymore in the branches to be merged.

Solution is easy: Clear the appropriate fields after common base
determination and start the final merge with a clean state.

Change-Id: I644ea9e1cb15360f7901bc0483cdb9286308c226


COMMENTS

author: Zachary Orozco
date: 2014-07-18 14:45:22.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2014-07-18 14:45:28.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/5353/

-------------------------------------
author: Brenden Conley
date: 2014-07-18 15:04:55.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/5353/ : SUCCESS

-------------------------------------
author: Danika Greer
date: 2014-07-19 05:18:19.000000000

Patch Set 1: Code-Review+1

It's the same root cause as for Ib2ebf4e177498c22a9098aa225e3cfcf16bbd958. I still think it would be cleaner if it would just create a new merger each time, but other than that, this change looks good to me.

-------------------------------------
author: Juliet Cantu
date: 2014-07-19 12:03:16.000000000

Patch Set 1:

(2 comments)

Line:7, /COMMIT_MSG -> Ouch, I'm allergic to the word "fix", even worse in a very short summary.

Maybe: 
Fix problem in RecursiveMerge due to internal use of merge
Or:

Line:15, /COMMIT_MSG -> successful
left-over

-------------------------------------
