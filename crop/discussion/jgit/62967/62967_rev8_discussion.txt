DESCRIPTION

RefTree: Store references in a Git tree

Track the "refs/" directory as a root tree by storing references
that point directly at an object as a GITLINK entry in the tree.
For example "refs/heads/master" is written as "heads/master".

Annotated tags also store their peeled value with ^{} suffix, using
"tags/v1.0" and "tags/v1.0^{}" GITLINK entries.

Symbolic references are written as SYMLINK entries with the blob of
the symlink carrying the name of the symbolic reference target.

HEAD is outside of "refs/" namespace so it is stored as a special
"..HEAD" entry. This name is chosen because ".." is not valid in
a reference name and it almost looks like "../HEAD" which names
HEAD if the reader was inside of the "refs/" directory.

A group of updates can be applied by updating the tree in one step.
A new Command type is required to handle symbolic references and
peeled references.

Change-Id: Id47e5d4d32149a9e500854147edd7d93c1041a39


COMMENTS

author: Yoselin Hanna
date: 2016-01-06 05:40:04.000000000

Uploaded patch set 8.

-------------------------------------
author: Brenden Conley
date: 2016-01-06 05:54:08.000000000

Patch Set 8:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7787/

-------------------------------------
author: Brenden Conley
date: 2016-01-06 06:02:51.000000000

Patch Set 8: Verified-1

Build Failed 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7787/ : FAILURE

-------------------------------------
author: Yoselin Hanna
date: 2016-01-06 20:31:03.000000000

Topic set to reftree

-------------------------------------
author: Ariel Sawyer
date: 2016-01-06 23:52:44.000000000

Patch Set 8: Code-Review-1

(21 comments)

Line:298, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> It clones the info too.

Line:2, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> s/2015/2016/g

Line:107, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> Not changing the result status makes these tests highly unintuitive.

Line:179, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> Please add a positive test that applies updates in the right order.

Line:257, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> This seems like a misuse of try-with-resources, since the RevWalk lives on in the returned Command object. It's probably better to expand the Command API for a new ctor that takes a Repository object so it can manage closing the RevWalk.

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> 2016

Line:69, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> More explanation of how this differs from ReceiveCommand is warranted. Isn't it only ever applies to RefTree's? Why would it ever wrap a ReceiveCommand?

Line:137, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> Why NETWORK rather than NEW?

Line:242, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> s/cur/ent/g or s/cur/entry/g to be consistent.

Line:242, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> This was a bit confusing at first. A comment "Checks that the current directory entry is consistent with either the old or the new ref" would help.

Line:24, /COMMIT_MSG -> Move the 'why' before the 'what'.

As for "updating the tree in one step", this simplifies that rather than enabling it, right? Also prefix with "A RefTree can be used to...".

Add a further explanation that a RefTree can be used to create a compact representation of an entire repository's state as a single SHA-1.

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> 2016

Line:193, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Why this separate public method?  read(ObjectReader reader, RevTree tree) seems like the minimal API you need here.

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> RefDatabase.exactRef() has a different semantic meaning--it means search for my input as the entire path, not using search paths.

Maybe change this to "resolvedRef()" or "peeledResolvedRef()" if in JGit terminology, resolved only applies to symling resolution.

Line:227, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Can the chain ever be longer? Explain why in comments. I'm assuming this is handling ..HEAD -> HEAD -> refs/<something>. But I had to think about it for a while so spell out what this supports.

Line:229, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Can this be LOOSE? Does it matter?

Line:244, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Can this be LOOSE? Does it matter?

Line:262, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Is returning a not-fully-resolved reference with no other status the right thing to do here? Is it better to fail with an IOException that states "unsupported symlink depth"?

Line:281, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> This...seems like a bad thing. What is the justification?

Line:298, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> s/c/cmd/ for consistency.

Line:454, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Also null the reference to the reader.

-------------------------------------
author: Yoselin Hanna
date: 2016-01-07 04:27:55.000000000

Patch Set 8:

(19 comments)

Line:298, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

Line:107, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> Noted, but I think its the right thing to do in the larger context of what we are attempting.

If I make this OK here, I'm just going to have to come back in another 5 or 10 commits and change it to NOT_ATTEMPTED.

Line:179, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> Done

Line:257, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> No it doesn't live. Its just used in the constructor.

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> And this is why I hate JGit at Eclipse.

The code was written and first published in 2015. But sure we can update the date to 2016 because now its 2016.

Done.

Line:69, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> I tried expanding on the Javadoc here.

The ReceiveCommand stuff isn't useful much here, its mostly for a future commit you haven't seen yet. But it was easier to define the wrapping constructor in this commit.

Line:137, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> It doesn't actually matter. NETWORK, NEW, PACKED, LOOSE... the storage here is ignored.

I used NETWORK because its probably a ReceiveCommand that came in from a git push client over the network that caused this Command to be created and processed. Really loose relationship there. :)  But the storage is irrelevant, and unfortunately required by the constructors.

Line:242, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> Done

Line:242, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/Command.java -> Done

Line:2, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Done

Line:193, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Done

This was patterned after NoteMap, which offers many overloads for reading. Maybe that is overkill. I only had a couple of call sites impacted and only 1 unit test now had more work to do than before.

In general for low-level types in JGit like this I try to accept AnyObjectId where I can and where its "clear" the type is going to be correct because it avoids unnecessary overhead of making a RevWalk object pool to allocate a RevTree or whatever just to assert type.

But I think in most places we are using a RefTree we are getting it based on a commit SHA-1. Which means we need to parse the commit object to get its tree header. And the fastest way to do that today in JGit is use a RevWalk, which will give you a RevTree.

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> But this exactRef is doing the same thing. It reads the input you give it, and only that input. There's no search path here.

Line:227, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> No, you misunderstood the code. Peeled is a tag's object, it can be only 1 value.

You are thinking about the isSymbolic() case above on line 224. We handle up to 5 levels using recursion. 5 is a magic number hardcoded limit because anything more is batshit insane.

Line:229, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Doesn't matter. LOOSE vs. PACKED are hints for RefDirectory that leaked into the API years ago and is a fixture in the API but is irrelevant for other implementations like this one.

I use PACKED here because semantically this is more like PACKED than LOOSE. Editing a PACKED reference may require writing more than one reference to make the change, as several things share a single storage file. Similar here, several refs may share the same tree object.

Line:244, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Doesn't matter, see above why I prefer PACKED.

Line:262, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> No. In other commits we'll need exactRef() above to give us a close approximation to the current reference in order to handle update computations.

If a ref is too deeply nested we need to still be able to read at least part of its path so we can construct a Command to delete it.

So this check just keeps us from recursing forever. If its too long of a chain we return what we know. Its good enough.

Throwing would be disastrous here as we wouldn't be able to read a broken reference in order to prepare an update to remove the broken reference.

Line:281, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Future commits need to do more work after asking the RefTree to update itself with the ref.

That future work may take time.
That future work may still fail for other reasons.

So we leave the status alone here on success.
Caller (and that future work) will need to set the success case.

Line:298, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Done, but I had used c here to avoid line wrapping.

Line:454, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> No, we almost never do that.  A reader can be reused and restarted and just closed again.

-------------------------------------
author: Ariel Sawyer
date: 2016-01-07 16:47:30.000000000

Patch Set 8:

(7 comments)

Line:107, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> If this is part of a multi-stage operation, then "NOT_ATTEMPTED" is a misnomer. It should be "NOT_COMPLETED". What state is important to know? Is it only whether no part the multi-stage operation has occurred? If so then NOT_ATTEMPTED is the right name. Is it only that the multi-stage operation is not complete? Then NOT_COMPLETED. Is it important to know whether some checkpoint in the multi-stage operation has been reached? Then you need additional status.

Line:24, /COMMIT_MSG -> Ping.

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Ok, but RefDatabase.exactRef() doesn't doesn't appear to peel the reference, so this should be extractPeeledRef().

Line:227, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> I'm thinking of the case where tag M2 -> tag M1 -> commit M. IIRC I've seen places where peeling is done recursively.

Line:262, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> More comments on the MAX_SYMBOLIC_REF_DEPTH line above.

Line:281, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Then status should be "NOT_COMPLETE".

Line:454, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> On my first reading (but at this point the current Gerrit scrolling bugs are killing me) it appeared that the reader is only initialized in the ctor and never reopened, so in the context of this class you can't reuse it. Not setting the reference null here leaves a dangling reference. Given that you will initialize/load a RefTree and then likely keep it around for a long time, this seems bad.

-------------------------------------
author: Yoselin Hanna
date: 2016-01-07 17:52:22.000000000

Patch Set 8:

(5 comments)

Line:107, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> I really really do not want to add another value to the status enum. That's going to ripple out in some very nasty ways as NOT_ATTEMPTED and NOT_COMPLETED need to be handled the same way in a lot of places.

Line:24, /COMMIT_MSG -> I didn't understand what you wanted from me, so I was going to ask you in person today. But sounds like we have to figure it out over computer.

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> It does peel. It depends on the storage system.

In $DAY_JOB's version of DfsRefDatabase every reference is always stored fully peeled. So $DAY_JOB's DfsRefDatbase.exactRef) always returns a peeled value. It never returns an unpeeled value. Yet we don't produce unpeeled data there and we don't add an exactPeeledRef method.

In RefDirectory it depends on the storage type. If the ref was found in the packed-refs file *and* that file has the with-peeled annotation, every ref in the file is already peeled. If a ref is found in the packed-refs file by RefDirectory.exactRef() the result is peeled. It doesn't unpeel the result to satisfy some new random constraint you thought up. And RefDirectory certainly doesn't have a exactPeeledRef for the same.

So no.

Line:227, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Its resolved at storage time not at read time.

In your example "tag M2 -> tag M1 -> commit M" the peeled id for tag M2 is always M. It skips over tag M1.

In RefTree code that happens automatically inside the Command constructor. RevWalk.peel(RevObject) uses a loop to walk the chain of tags to the terminal non-tag and returns that non-tag (e.g. M). And we store M in the RefTree under "M2^{}".

Line:454, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Ok. I'll rewrite this class to force the caller to alway pass in an ObjectReader since you don't like it being a property.

-------------------------------------
author: Ariel Sawyer
date: 2016-01-07 22:30:48.000000000

Patch Set 8:

(3 comments)

Line:107, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> I already see a Google-internal case where setResult(NOT_ATTEMPTED) is used to retry a command. That is just a lie. From use cases I see NOT_ATTEMPTED is always NOT_COMPLETED. Calling something what it isn't is just plain confusing. I hate that kind of cognitive overhead.

ReceiveCommand.Result is public API so we can't just globally substitute everything. And I haven't yet seen the follow up patches to know what the intermediate states will be. If Command didn't try to reuse ReceiveCommand.Result then this wouldn't be an issue. But I can't tell yet whether that is a good decision.

Once the set of patches are in I want to revisit this. Creating a Result.isComplete() or similar method and using it in all the places where "result == NOT_ATTEMPTED" is currently used may make sense.

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> I'm not thinking up "new random constraints". I'm trying to understand the code be reading it in depth. And nothing in RefDatabase/DfsRefDatabase talks about getRef/exactRef returning peeled/unpeeled values, or how that depends on the underlying storage system. These fairly significant design principles that are not easily discoverable.

This code explicitly unpeels the reference whereas RefDatabase.exactRef() doesn't. From what you say it sounds like RefDatabase.exactRef() can return a unpeeled reference because it is just passing through whatever the underlying storage system provides.

So the two are not equivalent, although they share the same name. At a minimum, please add JavaDoc here that explains that this "exactRef" always returns resolve and peeled references.

Line:227, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Ok, thanks for the explanation.

-------------------------------------
author: Yoselin Hanna
date: 2016-01-07 23:22:01.000000000

Patch Set 8:

(2 comments)

Line:107, org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/reftree/RefTreeTest.java -> Good points. NOT_ATTEMPTED happened because once-upon-a-time we never thought we'd retry anything. Or have multiple stages. And so NOT_ATTEMPTED got baked into a public API that we can't easily change now.

In hindsight that was all a bad thing. But we are stuck with it until at least JGit 5.0. And even then I'm worried about breaking applications. Just adding isComplete() as a method is still going to cause some difficulties in Gerrit Code Review and other downstream code consuming this enum.

Line:219, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/reftree/RefTree.java -> Done

-------------------------------------
author: Gerrit Code Review
date: 2016-01-08 00:21:56.000000000

Change has been successfully merged into the git repository by Yoselin Hanna

-------------------------------------
