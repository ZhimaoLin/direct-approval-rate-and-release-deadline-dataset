DESCRIPTION

Handle symlink limitations of our filesystems abstractions more gracefully

If we have a FS abstraction that supports symlinks (e.g. FS_POSIX_Java7),
then we can obviously handle symlinks without a problem.  Also, if
core.symlinks is set to false in .git/config then git/jgit will deal with
symlinks in a degraded mode where they are checked out as normal files.
In such a degraded mode, we can also handle "symlinks" without a problem.

In the case that the FS abstraction cannot handle symlinks and
core.symlinks is true (or not set and thus defaults to true) then we will
be unable to handle symlinks appropriately even if the native filesystem
uses them everywhere.

This problem has often been avoided because jgit clone, even when on a
filesystem that supports symlinks, will set core.symlinks to false in the
new repo it creates.  However, not all clones are made via jgit -- in
fact, some development shops use cgit for most direct interaction and use
jgit inside of developer tools (e.g. eclipse or gradle plugins).

If we are unable to handle symlinks, then attempting to compare them to
their expected value will obviously fail.  Blindly doing so anyway
naturally results in our claiming that all symlinks have been modified,
when in reality it is almost certain that none of them have been (after
all, git was designed for trees of slowly changing files).  If symlinks
aren't supported, then they are simply unsupported and we should not
attempt to report on their status.  In particular we should not make users
dig through screenfuls of false-positives to look for the file they did
actually modify, and we shouldn't report things have changed and cause
published artifacts to get a "dirty" tag based on our lack of support for
certain git features.

Change-Id: I09e4250ea6b3e24227f939776ebd450c01b7f04e
Signed-off-by: Devan Franklin xxx@xxx.xxx


COMMENTS

author: Kadence Lowe
date: 2014-07-11 07:19:46.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2014-07-11 07:19:52.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/5329/

-------------------------------------
author: Brenden Conley
date: 2014-07-11 07:37:19.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/5329/ : SUCCESS

-------------------------------------
author: Juliet Cantu
date: 2014-07-13 20:06:51.000000000

Patch Set 1: Code-Review-1

(4 comments)

Line:78, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeOptions.java -> org.eclipse.jgit.java7 not included with Java 7 is a configuration error and need not be bothered with. It's just that we solved the problem this way. That probably has no practical difference though, but it's not a motive.

Don't bothere with the strange initialization sequence. Doing the work inside WTI/FTI is enough.

Line:855, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> Testing for symlinks in two different ways as you do in the case is confusing. Only do it one way. You may even nest the ifs since both ifs handle symlinks

Line:22, /COMMIT_MSG -> No it doesn't on my machine. JGit tests the filesystem to see whether it support symlinks or not. Only if the file system does not support symlinks it set core.symlinks to false. 

If that doesn't work there's a bug somewhere

Line:32, /COMMIT_MSG -> Not so sure about that. Users should use compatible Git implementations/settings now that is possible. I might have agreed prior to symlink support being available.

If you have symlinks in the file system, don't bother using JGit with Java6 or missing SeCreateSymlinkPrivilege.

It's like trying to work on the Linux kernel on a Mac default file system. It's not Gits job to fix the issues.

-------------------------------------
author: Elise Key
date: 2017-08-29 13:16:16.000000000

Abandoned

Abandoning after 1 year or more of inactivity.

If this change is still needed, please restore it.

-------------------------------------
