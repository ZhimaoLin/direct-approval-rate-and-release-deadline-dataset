DESCRIPTION

Add CheckoutCommand

Change-Id: Ie06b9e799a9e1be384da0b8996efa7209b32eac3
Signed-off-by: Malia Sampson xxx@xxx.xxx


COMMENTS

author: Malia Sampson
date: 2010-11-10 22:21:47.000000000

Uploaded patch set 2.

-------------------------------------
author: Zachary Orozco
date: 2010-11-12 23:23:12.000000000

Patch Set 2: (6 inline comments)

that command is urgently needed. thanks!

Line:67, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CheckoutCommandTest.java -> I can't imagine the reason for this commit? There is no content yet available. Is it only to create a master branch. The first real commit will create this branch and there will no sideeffects anymore by this commit. I would just remove this line.

Line:72, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CheckoutCommandTest.java -> The master branch is already created by the previous commit. And that branch already points exactly to that commit you are creating the branch and do a refupdate. Just skip the next 5 lines.

Line:82, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CheckoutCommandTest.java -> I am not sure whether you have created what you wanted. You have three commits and two branches (master and test) which both point to the last commit. Thats what you wanted?

I would have expected something like:

	protected void setUp() throws Exception {
		super.setUp();
		git = new Git(db);

		// commit something
		writeTrashFile("Test.txt", "Hello world");
		git.add().addFilepattern("Test.txt").call();
		initialCommit = git.commit().setMessage("Initial commit").call();

		// create a master branch and switch to it
		git.branchCreate().setName("test").call();
		RefUpdate rup = db.updateRef(Constants.HEAD);
		rup.link("refs/heads/test");

		// commit something on the test branch
		writeTrashFile("Test.txt", "Some change");
		git.add().addFilepattern("Test.txt").call();
		secondCommit = git.commit().setMessage("Second commit").call();
	}

Line:111, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CheckoutCommandTest.java -> We should at least once test that we are switching to a branch which not pointing to the current head. One check where you switch from test to master and check that the content has changed afterwards.

Line:65, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutCommand.java -> currently checking out only pathes is not supported.

Line:132, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutCommand.java -> You don't need the two getId() calls. What you get back from getTree is already sufficient.

-------------------------------------
