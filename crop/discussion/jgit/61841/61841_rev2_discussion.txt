DESCRIPTION

Support atomic push in JGit client

This should mirror the behavior of `git push --atomic` where the
client asks the server to apply all-or-nothing. Some JGit servers
already support this based on a custom DFS backend. InMemoryRepository
is extended to support atomic push for unit testing purposes.

Local disk server side support inside of JGit is a more complex animal
due to the excessive amount of file locking required to protect every
reference as a loose reference.

Change-Id: I15083fbe48447678e034afeffb4639572a32f50c


COMMENTS

author: Yoselin Hanna
date: 2015-12-03 06:06:39.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2015-12-03 06:06:45.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7669/

-------------------------------------
author: Brenden Conley
date: 2015-12-03 06:14:57.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7669/ : SUCCESS

-------------------------------------
author: Eden Lin
date: 2015-12-03 17:53:57.000000000

Patch Set 2:

(1 comment)

Line:194, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushProcess.java -> In the non-atomic case, we optimize out this kind of update because it is a no-op. In the atomic case, it would not be a no-op any more: a ref update with equal old-sha1 and new-sha1 can cause the rest of the push to be aborted if old-sha1 doesn't match.

It's possible that we want to elide it anyway, though. I'll check what C git does.

-------------------------------------
author: Eden Lin
date: 2015-12-03 18:09:33.000000000

Patch Set 2: Code-Review+1

(1 comment)

Line:194, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushProcess.java -> Yep, C git elides those too.

-------------------------------------
author: Yoselin Hanna
date: 2015-12-03 18:17:48.000000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Gerrit Code Review
date: 2015-12-03 18:17:50.000000000

Change has been successfully merged into the git repository by Yoselin Hanna

-------------------------------------
author: Santos Moore
date: 2016-01-05 21:49:14.000000000

Patch Set 2:

(1 comment)

Line:313, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.java -> This doesn't work with the way Gerrit currently uses BatchRefUpdates. In some cases Gerrit will set the status on one of the commands in the batch to REJECTED_OTHER_REASON, but still attempt to execute the batch, under the assumption that the batch will fail.

I think we need to add another loop before this one, which rejects all other ReceiveCommands if any of the input ReceiveCommands was rejected before execute() began.

-------------------------------------
author: Yoselin Hanna
date: 2016-01-05 22:03:20.000000000

Patch Set 2:

(1 comment)

Line:313, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.java -> Oops. Yes. That's true. I missed it in the implementation here.

-------------------------------------
author: Santos Moore
date: 2017-04-24 12:30:17.000000000

Patch Set 2:

(1 comment)

Line:313, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/InMemoryRepository.java -> For posterity, Shawn did this in I16922408 shortly after I asked.

-------------------------------------
