DESCRIPTION

RefTreeDatabase: Expose bootstrap refs in getAdditionalRefs

By showing the bootstrap layer in getAdditionalRefs() garbage
collector code can be more RefDatabase agnostic and not care about
the special case of RefTree and RefTreeNames for the purposes of
building up the roots to GC. Instead they can combine getRefs(ALL)
and getAdditionalRefs() and have a clean set of roots.

Change-Id: I665cd2456e9316640215b6a08bc728d1356f36d8


COMMENTS

author: Yoselin Hanna
date: 2016-01-15 20:48:27.000000000

Uploaded patch set 2: Patch Set 1 was rebased.

-------------------------------------
author: Brenden Conley
date: 2016-01-15 20:48:33.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7883/

-------------------------------------
author: Brenden Conley
date: 2016-01-15 20:58:37.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7883/ : SUCCESS

-------------------------------------
author: Ariel Sawyer
date: 2016-01-21 05:07:57.000000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Yoselin Hanna
date: 2016-01-21 05:15:55.000000000

Topic set to reftree

-------------------------------------
author: Gerrit Code Review
date: 2016-01-21 05:32:17.000000000

Change has been successfully merged into the git repository by Yoselin Hanna

-------------------------------------
author: Zachary Orozco
date: 2016-05-12 07:08:07.000000000

Patch Set 2:

Since a few days I am not sure anymore whether this change was a good idea. Now getAdditionalRefs() is exposing two very different sets of ref-like objects and we don't have a chance to distinguish them. Before this change getAdditionalRefs() was exposing objects which are no real refs: MERGE_HEAD,ORIG_HEAD,FETCH_HEAD,CHERRY_PICK_HEAD. These ref-like objects don't save objects from being garbage collected by c-git and therefore they may point to objects not existing anymore in the object database. When parsing such ref-like objects you should expect they point to nirvana.
But I guess the bootstrap refs are real refs which do save objects from being garbage collected and which are not allowed to point to non-existing objects. Right?

How should we distinguish between these refs? 
- a "isTemporaryRef" in the Ref class?
- two separate methods in RefDatabase one returning ref-like objects and another one returning additional refs which do save objects from beeing garbage collected.

See https://bugs.eclipse.org/bugs/show_bug.cgi?id=479697 to see the initial bug report. See also: http://article.gmane.org/gmane.comp.version-control.git/294169

-------------------------------------
