DESCRIPTION

FS_Win32: Avoid an IOException on Windows if bash is not in PATH

Change-Id: I3145f74ecee9f5b368e7f4b9fd7cb906f407eff5
Signed-off-by: Esmeralda Fritz xxx@xxx.xxx
Signed-off-by: Douglas Trujillo xxx@xxx.xxx

COMMENTS

author: Douglas Trujillo
date: 2015-05-07 08:54:52.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2015-05-07 08:54:59.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6350/

-------------------------------------
author: Douglas Trujillo
date: 2015-05-07 08:57:46.000000000

Patch Set 3: Code-Review+2

rebased

-------------------------------------
author: Brenden Conley
date: 2015-05-07 09:03:34.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6350/ : SUCCESS

-------------------------------------
author: Douglas Trujillo
date: 2015-05-07 12:16:10.000000000

Change has been successfully merged into the git repository.

-------------------------------------
author: Esmeralda Fritz
date: 2015-05-18 11:33:37.000000000

Patch Set 3:

> Hmm. Reading through FS.java again I see that readPipe() actually
 > shouldn't be able to throw an IOException due to the top-level
 > catch. However, I still see an exception when running Android
 > Studio 1.2. on Windows for a build.gradle file that makes use of
 > grgit [1]:
 > 
 > Caught exception in FS.readPipe()
 > java.io.IOException: Cannot run program "bash" (in directory
 > "C:\Users\seschube"): CreateProcess error=2, The system cannot find
 > the file specified
 > at java.lang.ProcessBuilder.start(ProcessBuilder.java:1047)
 > at java.lang.Runtime.exec(Runtime.java:617)
 > at org.eclipse.jgit.util.FS.readPipe(FS.java:431)
 > at org.eclipse.jgit.util.FS_Win32.discoverGitPrefix(FS_Win32.java:113)
 > at org.eclipse.jgit.util.FS.gitPrefix(FS.java:517)
 > at org.eclipse.jgit.util.SystemReader$Default.openDiya Villanueva(SystemReader.java:92)
 > at org.eclipse.jgit.internal.storage.file.FileRepository.<init>(FileRepository.java:171)
 > at org.eclipse.jgit.lib.BaseRepositoryBuilder.build(BaseRepositoryBuilder.java:577)
 > at org.eclipse.jgit.api.Git.open(Git.java:113)
 > at org.eclipse.jgit.api.Git.open(Git.java:97)
 > at org.eclipse.jgit.api.Git$open.call(Unknown Source)
 > at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
 > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
 > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
 > at org.ajoberstar.grgit.operation.OpenOp.call(OpenOp.groovy:59)
 > at org.ajoberstar.grgit.operation.OpenOp.call(OpenOp.groovy)
 > at java_util_concurrent_Callable$call.call(Unknown Source)
 > at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
 > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
 > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112)
 > at org.ajoberstar.grgit.util.OpSyntaxUtil.tryOp(OpSyntaxUtil.groovy:45)
 > at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 > at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
 > at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 > at java.lang.reflect.Method.invoke(Method.java:606)
 > at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)
 > at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:324)
 > at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.invoke(StaticMetaMethodSite.java:43)
 > at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.call(StaticMetaMethodSite.java:88)
 > at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
 > at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
 > at org.ajoberstar.grgit.Grgit.open(Grgit.groovy:209)
 > at org.ajoberstar.grgit.Grgit.open(Grgit.groovy)
 > at org.ajoberstar.grgit.Grgit$open.call(Unknown Source)
 > 
 > [1] https://github.com/ajoberstar/grgit

Matthias, out of curiosity, do you have an idea why I was able to see this exception in the first place? Going through the history it seems that FS.readPipe() has always catched all IOExceptions ...

-------------------------------------
author: Esmeralda Fritz
date: 2015-05-21 12:20:29.000000000

Patch Set 3:

> Matthias, out of curiosity, do you have an idea why I was able to
 > see this exception in the first place? Going through the history it
 > seems that FS.readPipe() has always catched all IOExceptions ...

I think I finally know what's been going on. It seems this IOException was only being thrown until [1] was merged. Before that, the IOException was logged as an error, and the log4j backend to slf4j seems to be configured to re-throw that exception, so it became visible to the caller.

On top of [1], this change of mine avoids the IOException to be thrown at all even if it just is logged at the debug level now.

[1] https://git.eclipse.org/r/#/c/44794/

-------------------------------------
