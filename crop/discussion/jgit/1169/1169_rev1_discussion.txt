DESCRIPTION

NameConflictTreeWalk reports DF conflicts

Added a method isDirectoryFileConflict() to NameConflictTreeWalk
which tells whether the current path is part of a directory/file
conflict

Signed-off-by: Zachary Orozco xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2010-07-22 15:15:17.000000000

Patch Set 1: Looks good to me, but someone else must approve; IP review completed

I seperated this feature into his own change. I was previously added to change 825 (which is from now on dependent on this change).

-------------------------------------
author: Yoselin Hanna
date: 2010-07-22 17:37:18.000000000

Patch Set 1: I would prefer that you didn't submit this

(1 inline comment)



Line:339, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/NameConflictTreeWalk.java -> We shouldn't need to do this by a path string.  A D/F conflict is true for the entire time we are recursed below that path, and the walker knows when we pop out of each level.  Can't we do this faster with a boolean variable or a != null test?  I thought the prior iteration of this feature used an AbstractTreeIterator in a field to tell if we were inside of a D/F conflict.

-------------------------------------
author: Zachary Orozco
date: 2010-07-22 22:53:28.000000000

Patch Set 1: (1 inline comment)



Line:339, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/NameConflictTreeWalk.java -> I knew I would get into trouble here. This string handling is sub-optimal. To fix it I need your help.
We had a nice implementation which you suggested in http://egit.eclipse.org/r/#patch,sidebyside,825,4,org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java
See my latest comment here.
Basically I couldn't find out ALL places where we detect a D/F conflict and all places where we leave a conflicting path. combineDF() is not called for all D/F conflicts (sometimes fastMin() finds something and we don't enter combineDF(). When  I added marking a D/F conflict in two more places in fastMin() I saw that we got too many conflicts. I can only guess that popEntriesEqual() is not the only place where we have to clean the state.

-------------------------------------
