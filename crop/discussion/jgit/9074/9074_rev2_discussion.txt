DESCRIPTION

RevWalk performance enhancements

Caching of the already inflated commit bodies gives 10x faster
RevWalks (100% cache hits). RevWalks with the default cache size
of 100 commit bodies are 1.5x faster. The cache has a configurable
size limit.

I authored 100% of this code, have the right to donate it to Eclipse
and contribute it under the EPL and EDL

Change-Id: I0f1b291a01882fa96fdf62683b87db31a9fe320e
Signed-off-by: Zion Jenkins xxx@xxx.xxx


COMMENTS

author: Zion Jenkins
date: 2013-10-15 19:53:42.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-10-15 19:53:48.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/4100/

-------------------------------------
author: Brenden Conley
date: 2013-10-15 20:01:33.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/4100/ : SUCCESS

-------------------------------------
author: Zion Jenkins
date: 2013-10-15 20:10:08.000000000

Patch Set 2: Code-Review+1

I have made changes in line with the review I got. There hasn't been much news lately about the suggested change in how commit bodies are stored http://thread.gmane.org/gmane.comp.version-control.git/210419/focus=212329


I'm changing job next week so you will not be able to reach me on the e-mail address in the commit. If there is any interest in this feel free to take over this commit.

-------------------------------------
author: Yoselin Hanna
date: 2013-10-16 19:28:54.000000000

Patch Set 2:

The cache in ps2 is similar to the DeltaBaseCache, except it stores commits. DeltaBaseCache only stores things that were used as a delta base of another object, and commits are usually not delta bases so they usually do not land in the cache.

If it really makes sense to add caching of inflated commits, I think we should be looking to do it in the DeltaBaseCache part of the system, not buried inside of RevWalk.

The author cited this change boosted performance of a server application that made repeated traversals through a frequently accessed part of the Linux kernel history. The cache amortizes out the inflate() cost for commits that manage to stay in the cache, reducing the time needed to configure a RevCommit instance to represent that commit.

I had intended to have RevWalk be reusable across traversals, further saving applications time by avoiding new allocation of RevCommit instances and parsing of commit headers to populate the fields of RevCommit. Perhaps reusing a handful of pooled RevWalks was not attempted as an alternate solution? In theory it should improve performance even more than this change, as the header parsing and RevCommit identity lookup can be skipped.

-------------------------------------
author: Zion Jenkins
date: 2013-10-17 18:48:56.000000000

Patch Set 2:

Would be fun if you tried something similar to this or did some tests of your own. We never thought about Storing RevWalks but we will probably try it out. Storing lots of RevWalks will take a lot of ram if I have understood the code correctly.

The normal use case for us is to search within all commits on a specific branch or changes between two user defined commits. We use this within the Telecom industry and the performance benefits we got from this made a big difference for the user experience. For webkit.git the traversal time with a warm cache holding all commits on master is 0.2 seconds; without this patch 3.4 seconds on my machine (Intel Core i5-3570K @ 3.40GHz).

Thanks for taking time to look at this!

-------------------------------------
author: Elise Key
date: 2017-08-29 13:16:24.000000000

Abandoned

Abandoning after 1 year or more of inactivity.

If this change is still needed, please restore it.

-------------------------------------
