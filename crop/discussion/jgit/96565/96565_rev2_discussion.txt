DESCRIPTION

Clean up the disk when cloning fails

CloneCommand.call() has three stages: preparation, then the actual
clone (init/fetch), and finally maybe checking out the working
directory.

Restructure such that if we fail or are cancelled during the actual
clone (middle phase), we do clean up the disk again. This prevents
leaving behind a partial clone in an inconsistent state: either we
have a fully successfully built clone, or nothing at all.

Bug: 516303
Change-Id: I9b18c60f8f99816d42a3deb7d4a33a9f22eeb709
Signed-off-by: Alayna Houston xxx@xxx.xxx

COMMENTS

author: Douglas Trujillo
date: 2017-05-10 22:20:44.000000000

Uploaded patch set 2: Patch Set 1 was rebased.

-------------------------------------
author: Brenden Conley
date: 2017-05-10 22:20:49.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/10221/

-------------------------------------
author: Brenden Conley
date: 2017-05-10 22:53:36.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/10221/ : SUCCESS

-------------------------------------
author: Douglas Trujillo
date: 2017-05-10 22:53:44.000000000

Patch Set 2:

(1 comment)

Line:674, org.eclipse.jgit/src/org/eclipse/jgit/api/CloneCommand.java -> maybe it would make sense to move this to FileUtils ?

-------------------------------------
author: Alayna Houston
date: 2017-05-11 15:25:04.000000000

Patch Set 2:

(1 comment)

Line:674, org.eclipse.jgit/src/org/eclipse/jgit/api/CloneCommand.java -> Can do, including tests :-), but the semantics of deleteChildren(someFolder, EMPTY_DIRECTORIES_ONLY) is debatable. It could mean:

1. Delete the children, but only if there are only empty
   directories under someFolder. (I.e., fail if there's a
   file or a non-empty directory.)
2. Ignore files directly under someFolder; try to delete
   only empty directories under someFolder. (I.e., fail
   only if there's a non-empty directory under someFolder.)

When combined with IGNORE_ERRORS the net result of the two interpretations would be the same: no files would be deleted, and only empty directories would be removed. (recursively, if RECURSIVE is also given).

Interpretation (1) should check for files being immediate children of someFolder first, like delete().

Both are possible and are about the same amount of code. Unsure which would be more convenient, or whether anybody would care, especially since the use case in CloneCommand doesn't use it.

(I find the logic behind EMPTY_DIRECTORIES_ONLY confusing when combined with RECURSIVE, but without IGNORE_ERRORS. If I have a tree like

  A (dir)
    - B (dir)
    - C (dir)
      - d (file)
      - D (dir)

delete(A, EMPTY_DIRECTORIES_ONLY) may actually delete B
before aborting the deletion of C at d. I find it inconsistent that B might be gone, while D remains. But I'm certainly not going to touch that. The only use of that mode is in GC, where a delete(dir, EMPTY_DIRECTORIES_ONLY | IGNORE_ERRORS) occurs, so it's not recursive and deletes all direct children that are empty directories.)

Anyway, which would you prefer? (In both cases it's possible that an empty child directory is removed before a non-empty directory is encountered and the operation is aborted if IGNORE_ERRORS is not given.)

-------------------------------------
author: Douglas Trujillo
date: 2017-05-12 09:10:09.000000000

Patch Set 2:

> (1 comment)

looking at this complexity I withdraw my proposal to move this to FileUtils. We may reconsider this as soon as we have a second use case

-------------------------------------
