DESCRIPTION

[performance] Speed up delta packing

When packing is able to reuse lots of deltas from existing packs, those
objects are marked as "doNotAttemptDelta" and do not contribute to
DeltaTask's computeTopPaths() "totalWeight" calculation.

In the extreme case when all packs are reusable, "totalWeight" will be
zero. DeltaTask.partitionTasks() uses "totalWeight" to determine a
"weightPerThread" size it uses to set up DeltaTasks. When "totalWeight"
is small, partitionTasks() ends up creating a DeltaTask for every
unique path.

For a large repository, the small "weightPerThread" can result in the
creation of >100k tasks (for the MSM 3.10 Linux repository, the count
was ~150k). This makes the "task stealing" mechanism in DeltaTask very
inefficient, because every attempt to steal work does a linear walk
through all tasks, searching for the one with the most work remaining,
which is O(N^2) comparisons. For the MSM 3.10 repository when all
deltas were reusable, PackWriter.parallelDeltaSearch() took
(1615+1633+1458)/3 = 1568 seconds.

The error is that DeltaTask treats the weights of objects marked as
"doNotAttemptDelta" inconsistently. It ignores the weights when
calculating "totalWeight" but uses them when partitioning the tasks.
The fix is to also ignore them when partitioning the tasks.

With this patch applied, PackWriter.parallelDeltaSearch() on the
MSM 3.10 repository when all deltas are reused went from taking
1568 seconds to 62ms (>25k speedup).

This patch also fixes a totalWeight initialization error in
DeltaTask.computeTopPaths().

Change-Id: I2ae37efa83bca42b0e716266ae6aa9d182e76d9c
Signed-off-by: Ariel Sawyer xxx@xxx.xxx


COMMENTS

author: Ariel Sawyer
date: 2015-11-03 23:10:43.000000000

Uploaded patch set 4.

-------------------------------------
author: Brenden Conley
date: 2015-11-03 23:10:49.000000000

Patch Set 4:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7382/

-------------------------------------
author: Eden Lin
date: 2015-11-03 23:17:41.000000000

Patch Set 4: Code-Review+1

Makes sense. I don't know this code well so I'd prefer if another set of eyes looks more closely before it lands (could be me later today).

Ideas for a test that could catch this if it comes back?

-------------------------------------
author: Brenden Conley
date: 2015-11-03 23:18:15.000000000

Patch Set 4: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7382/ : SUCCESS

-------------------------------------
author: Ariel Sawyer
date: 2015-11-03 23:39:54.000000000

Patch Set 4:

partitionTasks() has two loops that add DeltaTasks to the "tasks" list. If the number of partitions(threads) is N, the first can add at most N and the second can add at most N-1.

I'll add an assertion that that method exits with no more than 2*N tasks.

-------------------------------------
author: Yoselin Hanna
date: 2015-11-04 17:55:16.000000000

Patch Set 4: Code-Review+2

-------------------------------------
author: Gerrit Code Review
date: 2015-11-04 17:55:22.000000000

Change has been successfully merged into the git repository by Yoselin Hanna

-------------------------------------
