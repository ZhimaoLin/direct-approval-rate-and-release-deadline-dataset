DESCRIPTION

Shallow fetch: Fix no objects returned on fetch of parent

When there is a commit that a client reports as both a "have" and a 
"shallow", if the "want" is the direct parent of of this
"have-and-shallow" commit then no objects are returned in the pack.

UploadPack takes its RevWalk, invokes toObjectWalkWithSameObjects() on
it and supplies the resulting ObjectWalk to PackWriter. For non-
shallow fetches PackWriter uses this ObjectWalk to lookup RevCommits,
but in shallow fetches this ObjectWalk is thrown out and a new
DepthWalk.ObjectWalk is created.

The problem is that UploadPack called RevWalk.assumeShallow() for the
RevCommits corresponding to the client's shallows. That clears out
the RevCommit's parents, which prevents the propagation of the
"uninteresting" flag to the parent commits of the "have-and-shallow" 
commits. But since the ObjectWalk is currently being thrown out, the
assumeShallow() state is lost, and the "uninteresting" state is being
propagated to these parents. That results in the server thinking it
shouldn't send objects corresponding to these "want" commits.

Attempting to fetch a deeper ancestor of a "have-and-shallow" commit
does not exhibit this bug because new RevWalk starts with no
RevCommits. RevCommits are only created for "haves" and "wants" and
their direct parents but not for deeper ancestors. So when the "haves"
are marked as uninteresting, that marking stops at their direct
parents. Thus the "want" that is a deeper ancestor is not marked.

Change-Id: I6e14b57b2f85e52d28cdcf356df647870f475440
Signed-off-by: Ariel Sawyer xxx@xxx.xxx


COMMENTS

author: Ariel Sawyer
date: 2016-08-03 21:02:46.000000000

Uploaded patch set 2: Patch Set 1 was rebased.

-------------------------------------
author: Brenden Conley
date: 2016-08-03 21:16:40.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8857/

-------------------------------------
author: Brenden Conley
date: 2016-08-03 21:27:44.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8857/ : SUCCESS

-------------------------------------
author: Eden Lin
date: 2016-08-03 21:33:41.000000000

Patch Set 2: Code-Review-1

(3 comments)

Line:7, /COMMIT_MSG -> It's hard for me to understand from this subject line what the commit fixes. How about something like the following?

 Shallow fetch: Respect "shallow" lines when processing client "have"s

 When fetching from a shallow clone, the client sends "have" lines
 to tell the server about objects it already has and "shallow" lines
 to tell where its local history terminates. In UploadPack, we pass
 the "have" lines to the PackWriter so it can assume the client has
 those objects and omit them from the generated pack. We process
 "shallow" lines by calling assumeShallow for each named commit to
 clear out its parents in the RevWalk passed to the PackWriter.
 That way, walks correctly terminate at the shallow commits instead
 of assuming the client had history going back behind them.

 Unfortunately, to support shallow fetches the PackWriter does the
 following:

  if (shallowPack && !(walk instanceof DepthWalk.ObjectWalk))
    walk = new DepthWalk.ObjectWalk(reader, depth);

 That is, when the client sends a "deepen" line (fetch --depth=<n>)
 and the caller has not passed in a DepthWalk.ObjectWalk, we throw
 away the RevWalk that was passed in and make a new one. The
 cleared parent lists prepared by assumeShallow are lost.

 Fortunately UploadPack intends to pass in a DepthWalk.ObjectWalk.
 It tries to create it by calling toObjectWalkWithSameObjects on
 a DepthWalk.RevWalk. But it doesn't work: because
 DepthWalk.RevWalk does not override the standard
 RevWalk#toObjectWalkWithSameObjects implementation, the result
 is a plain ObjectWalk instead of an instance of DepthWalk.ObjectWalk
 and the "shallow" information is thrown away.

 The result is that objects reachable from the "shallow" commit can
 be omitted from the pack sent when fetching with --depth from a
 shallow clone:

  $ git fetch --depth=1 origin master
  fatal: bad object f572d396fae9206628714fb2ce00f72e94f2258f
  error: https://example.com/repo did not send all necessary objects

 This is easiest to reproduce by fetching an ancestor of a
 previously fetched commit in a shallow clone. For example:

  git clone --depth=1 https://kernel.googlesource.com/pub/scm/git/git
  cd git
  git fetch --depth=1 origin v1.5.0

 Because the server does not respect the "shallow" information
 sent by the client, it assumes the client already has all objects
 requested and sends an empty pack.

Line:9, /COMMIT_MSG -> nit: trailing whitespace (and likewise below)

Line:754, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java -> Should we keep this sanity check? E.g.

 if (shallowPack && !(walk instanceof DepthWalk.ObjectWalk))
   throw new IllegalArgumentException();

-------------------------------------
author: Eden Lin
date: 2016-08-03 22:17:26.000000000

Patch Set 2:

(1 comment)

Line:33, /COMMIT_MSG -> I didn't understand this part but I ran into it. IIUC my "git fetch --depth=1 origin v1.5.0" doesn't run into the problem fixed by this change because the DepthWalk stops limits walks from both starts and uninteresting commits to the depth. (I don't think that's intentional, but it's an unrelated problem.)

Correcting my experiment for that by using a larger depth allowed me to reproduce the problem.

 $ git clone --depth=1 https://kernel.googlesource.com/pub/scm/git/git
 Cloning into 'git'...
 remote: Counting objects: 3312, done
 remote: Finding sources: 100% (3312/3312)
 remote: Total 3312 (delta 308), reused 1949 (delta 308)
 Receiving objects: 100% (3312/3312), 7.40 MiB | 10.29 MiB/s, done.
 Resolving deltas: 100% (308/308), done.
 Checking connectivity... done.
 $ cd git
 $ git fetch --depth=100 origin c97268c822077ba414f90f6ba357fab170bb3986
 fatal: git fetch_pack: expected ACK/NAK, got 'ERR want c97268c822077ba414f90f6ba357fab170bb3986 not valid'
 fatal: The remote end hung up unexpectedly

Different error than I expected, but close.

-------------------------------------
author: Ariel Sawyer
date: 2016-08-04 01:17:06.000000000

Patch Set 2:

(4 comments)

Line:7, /COMMIT_MSG -> Some of your text was better so I incorporated it.

I left out the sample git clone/git fetch commands because I haven't yet found an example that exactly reproduces this bug in a public repo.

Line:9, /COMMIT_MSG -> Done

Line:33, /COMMIT_MSG -> This may be a different bug rather than a different manifestation of the bug. I will need to investigate further. I'm not sure how well supported changing the --depth parameter is. cgit recently introduces a --deepen parameter to better deal with expanding or shrinking history. I'll need to study up on that.

Neither of our understandings of why the bug doesn't always manifest itself when the want is a more distant ancestor of the have was correct. I had to spend a bunch of time in the debugger to figure out what DepthWalk is doing. I updated this commit message with my findings.

Line:754, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java -> Done

-------------------------------------
author: Gerrit Code Review
date: 2016-08-05 22:37:51.000000000

Change has been successfully merged into the git repository by Eden Lin

-------------------------------------
