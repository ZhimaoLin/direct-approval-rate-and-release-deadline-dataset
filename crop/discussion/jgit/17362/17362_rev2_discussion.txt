DESCRIPTION

CLI fragments with git executable script for each OS

A fragment for each OS type is added to the org.eclipse.jgit.pgm plugin.
The fragments just contains an executable script for JGit CLI. For Linux
and MacOS - it is just the existing jgit.sh bash script, but renamed to
"git". For Windows - it is a batch script with name "git.bat" with
similar implementation to jgit.sh.

Bug: 419401
Change-Id: I9684d43bd11d2f5ac958b92a14b68bbc00feec60
Signed-off-by: Omari Miranda xxx@xxx.xxx

COMMENTS

author: Omari Miranda
date: 2013-10-14 21:05:51.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-10-14 21:05:56.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/4098/

-------------------------------------
author: Brenden Conley
date: 2013-10-14 21:17:04.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/4098/ : SUCCESS

-------------------------------------
author: Danika Greer
date: 2013-10-15 15:30:29.000000000

Patch Set 2:

I don't really know anything about OSGi and fragments, but do we really need to duplicate the script (jgit.sh) to two locations?

-------------------------------------
author: Clay Cameron
date: 2013-10-15 21:08:21.000000000

Patch Set 2: Code-Review-1

(3 comments)

I agree with Robin, I don't really get why we need fragments to make this work? Wouldn't adding these scripts to the pgm bundle be enough? The idea itself is pretty cool.

Line:3, org.eclipse.jgit.pgm.linux/git -> Is the header correct? If so, does it mean it has been copied/pasted?

Line:76, org.eclipse.jgit.pgm.linux/git -> Looks mac-ish to me and we're in the linux fragment.

Line:50, org.eclipse.jgit.pgm.win32/git.bat -> Where is the JGIT_CLASSPATH var set?

-------------------------------------
author: Omari Miranda
date: 2013-10-15 21:25:02.000000000

Patch Set 2:

(3 comments)

Initially I tried to have one single org.eclipse.jgit.pgm.unix fragment for both linux and macosx. It worked perfectly with PDE Export, but I could not make Tycho build it. After some hours of fruitless attempts, I created separate fragments for Linux and MacOS, which satisfied Tycho. 

I decided to go for fragments instead of having these scripts in the org.eclipse.jgit.pgm plugin, because I need the scripts in an unpacked folder. If they are in a JAR then they cannot be added to the PATH variable. Sure, it will also work adding them to the plugin and avoid fragments, but then we need to have the plugin installed as unpacked folder instead of JAR. 

I don't have strong opinion which is the better approach. If you prefer having everything in the plugin then I can rework the patch.

Line:3, org.eclipse.jgit.pgm.linux/git -> This is just an untouched copy of existing jgit.sh script. Therefore, I did not change the copyright header.

Line:76, org.eclipse.jgit.pgm.linux/git -> Yes, this part is related to MacOS and can be removed. This script is just a copy of the existing jgit.sh. I did not want to change it to avoid unnecessary regressions.

Line:50, org.eclipse.jgit.pgm.win32/git.bat -> Just like in the existing jgit.sh script, it is expected that this var is set by the caller of the script.

-------------------------------------
author: Douglas Trujillo
date: 2013-10-15 22:20:08.000000000

Patch Set 2: Code-Review-1

cool idea 

- though this adds a lot of boiler plate
- also I don't like that with this approach we would have 3 copies of the same script which is prone to introduce problems e.g. when the original script is patched and we miss to also patch the copies
- I'll talk to our local Maven wizards to see if there is a better way to achieve something like that with some Maven vodoo, e.g. we could try to generate the boilerplate with Maven or an Ant script and copy the jgit.sh script using Maven instead of duplicating the source
- we don't use Tycho to build JGit since Tycho only supports creation of bundles, features and p2 repos but not standard Maven artifacts which is a must since there are a lot of JGit consumers which don't use OSGi

-------------------------------------
author: Douglas Trujillo
date: 2013-10-15 22:29:47.000000000

Patch Set 2:

(3 comments)

Line:42, org.eclipse.jgit.pgm.macosx/pom.xml -> don't use Tycho in the jgit build

Line:42, org.eclipse.jgit.pgm.linux/pom.xml -> - don't use Tycho in the jgit build since mixing of standard maven build and Tycho in the same reactor isn't supported by Tycho 
- we need Maven artifacts which can't be produced by Tycho :-(
- we only use Tycho in the packaging project to generate features and p2 repo, all bundles are generated using plain Maven which means we have to manually keep in synch pom dependencies and OSGi dependencies in manifests, this way we are able to generate bundles and can publish them both the Maven and OSGi way. I discussed this problem many times with Jan and Tobias from the Tycho project and the result of these discussions was that this is currently the best approach.

Line:41, org.eclipse.jgit.pgm.win32/pom.xml -> don't use Tycho in the jgit build

-------------------------------------
