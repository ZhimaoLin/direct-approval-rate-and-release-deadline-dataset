DESCRIPTION

Implement SHA-256 abstraction

The Large File Storage extension specified by GitHub [1] uses SHA-256 to
compute the ID of large files stored by the extension. Hence implement a
SHA-256 abstraction similar to the SHA-1 abstraction used by JGit.

[1] https://git-lfs.github.com/

Bug: 470333
Change-Id: I3a95954543c8570d73929e55f4a884b55dbf1b7a
Signed-off-by: Douglas Trujillo xxx@xxx.xxx


COMMENTS

author: Douglas Trujillo
date: 2015-07-17 15:27:13.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2015-07-17 15:27:20.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6937/

-------------------------------------
author: Brenden Conley
date: 2015-07-17 15:34:30.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6937/ : SUCCESS

-------------------------------------
author: Ximena Pugh
date: 2015-07-19 21:51:26.000000000

Patch Set 2:

(15 comments)

What about tests for AnyLongObjectId

Line:62, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> SHA-256 ?

Line:121, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> s/Compare/Test

Line:125, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> fi ?

Line:130, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> si ?

Line:220, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Please clarify that the position in this methods is measured in 4 byte steps (index in the long array).

Line:220, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> 'long' or 'long integer'

Line:248, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> name this 'fromHexString'

Line:278, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> I think file handling should be beyond the responsibility of this class. Why not do with the stream? Would also faciliate testing.

Line:300, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> The hash depends on the platform's default charset. You might consider to remove this method or add a Charset parameter.

Line:301, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> missing empty line above

File Comment: org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/lfs/lib/LongObjectIdTest.java -> I think the message in the assert* methods should rather express an assertion error instead of the expectation.

Why are the test cases numbered?

Line:102, org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/lfs/lib/LongObjectIdTest.java -> s/same/equal

Line:58, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> SHA-256

Line:81, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> The hashCode methods uses w2.

Line:264, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> Why use only w2? Why the right shift? Likely it doesn't really matter.

-------------------------------------
author: Ximena Pugh
date: 2015-07-20 05:38:19.000000000

Patch Set 2: Code-Review-1

(5 comments)

Not sure if the name LongObjectId isn't a bit fuzzy. I think it should contain '256' if it's tied to the SHA 256 hash algorithm. Or is a LongObjectId just a 256 bit id and not associated with a particular algorithm?

Line:1, org.eclipse.jgit.lfs/resources/org/eclipse/jgit/lfs/internal/LfsText.properties -> Sure this is used?

Line:368, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> nibble ?

Line:370, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> what's a 'bs' 'bytes'? I think 'bs' is an array with the bytes of a hex string representing the long value. So why not name it 'hexBytes' or alike?

Line:380, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> I assume you have indication that the JIT compiler doesn't unroll the loop anyhow.

Line:381, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> Would be more symmetric if you start out with

long r = 0;

r |= digits[bs[p]];
r << 4;

-------------------------------------
author: Ximena Pugh
date: 2015-07-20 06:20:48.000000000

Patch Set 2:

(11 comments)

The distribution of responsibilities of the three LongObjectId classes is not obvious to me. I assume AnyLongObjectId is the 32 byte/4 long Id itself whereas LongObjectId additionally offers factory methods that tie the Id to a SHA 256 hash  algorithm.

The motivation for having a *mutable* object Id is completely unclear to me. 

Also there seem to be an abundance of convenience methods for comparing and creating LongObjectIds from various representations. Are they all needed?
On the other hand I could imagine that there is already a [Short]ObjectId (SHA-1) and the convenience methods are available on the short version as well and you just want to offer the same functionality just in case ...

Line:121, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Comparing long sequences would be much more efficient.

Line:205, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> longs or long integers

Line:237, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> fromHexString ?

Line:285, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> I din't find a test that tests hashing objects larger then 4k.

Line:296, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> The objects to be hashed can get large. It might be a good idea to allow streams only in the hash function.

File Comment: org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/lfs/lib/LongObjectIdTest.java -> Many test cases actually apply to AnyLongObjectId. Why not have a dedicated test for AnyLongObjectId?

Line:275, org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/lfs/lib/LongObjectIdTest.java -> Rather remove the option to hash a file and test with a stream instead.

Line:54, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> remove these

Line:62, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> I don't understand this sentence.

Line:161, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> This is not everybody's idea of readability. Any reason why to put this on one line?

Line:161, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> 8 * x -> x << 3 ?

-------------------------------------
author: Douglas Trujillo
date: 2015-07-21 07:43:17.000000000

Patch Set 2:

(32 comments)

Line:62, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:121, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> not if you want to compare from a raw byte array used to serialize object IDs

Line:121, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> taken from corresponding javadoc in ObjectId, I am not a native speaker so I am not sure what's correct

Line:125, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:130, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:205, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:220, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:220, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> the type of an array's index in Java is a 4 byte int [1], why should this be mentioned here ?

[1] https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.4

Line:237, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> no, I'd like to keep the API of this class close to ObjectId

Line:248, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> no, I'd like to keep the API of this class close to ObjectId

Line:278, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> moved to a test utility class "LongObjectIdTestUtils"

Line:285, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> there is one in I7378da5575159d2195138d799704880c5c82d5f3

Line:296, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> moved to a test utility class "LongObjectIdTestUtils", this is meant for testing not for hashing large objects

Line:300, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:301, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

File Comment: org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/lfs/lib/LongObjectIdTest.java -> most test cases were taken from ObjectIdTest and adapted from sha-1 to sha-256, some of them are numbered (don't know why). I think we should stick to the names otherwise it would be hard to find corresponding test in ObjectIdTest.

File Comment: org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/lfs/lib/LongObjectIdTest.java -> I followed how ObjectIdTest does the same for ObjectId and AnyObjectId

Line:102, org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/lfs/lib/LongObjectIdTest.java -> Done

Line:275, org.eclipse.jgit.lfs.test/tst/org/eclipse/jgit/lfs/lib/LongObjectIdTest.java -> moved to a test utility class

Line:1, org.eclipse.jgit.lfs/resources/org/eclipse/jgit/lfs/internal/LfsText.properties -> it's used in I7378da5575159d2195138d799704880c5c82d5f3, moved it there

Line:54, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> Done

Line:58, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> Done

Line:62, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> this was taken from AnyObjectId. If you compare 2 objects and one of them is a MutableLongObjectId the result of the equals method can change whenever the mutable object is mutated

Line:81, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> now it uses w1 to ensure that AbbreviatedLongObjectId doesn't end up in hash collisions if w2 is 0L which can happen easily since abbreviated ids always start from the left

see same comment for AnyObjectId.equals(), I guess there were some concrete observations leading to this ordering, yet I don't know the details

Line:121, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> this works since the Java language spec specifies [1]
"If the promoted type of the left-hand operand is long, then only the six lowest-order bits of the right-hand operand are used as the shift distance." but it should be 48

[1] https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.19

Line:161, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> adapted to sha-256 from AnyObjectId.getByte(), I'd like to keep this code similar

Line:161, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> we could do this but in a different change since we should do the same change in AnyObjectId.getByte() to keep the code similar

Line:264, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> See AnyObjectId.hashCode(). We need a 32 bit hash, sha-256 is a cryptographic hash algorithm generating 256 bit hashes. sha-256 is known to generate very different hashes for similar input, so it shouldn't matter which bits we use for hashCode()

I think the right shift makes sense since we want AbbreviatedLongObjectIds to hash similarily to LongObjectIds and the abbreviated ids always start from the left

Line:368, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> Done

Line:370, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> I want to keep this similar to parseHexInt32() in the same class without introducing unnecessary changes

Line:380, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> * adapted from parseHexInt32() to int64
* don't know when the JIT compiler decides to unroll the loop, this may also depend on the JVM implementation being used

Line:381, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> I want to keep this similar to parseHexInt32() in the same class without introducing unnecessary changes

-------------------------------------
author: Douglas Trujillo
date: 2015-07-21 07:44:27.000000000

Patch Set 2:

> (15 comments)
 > 
 > What about tests for AnyLongObjectId

they are in LongObjectIdTest, most of the tests were adapted to sha-256 from ObjectIdTest

-------------------------------------
author: Douglas Trujillo
date: 2015-07-21 08:06:57.000000000

Patch Set 2:

> Not sure if the name LongObjectId isn't a bit fuzzy. I think it
 > should contain '256' if it's tied to the SHA 256 hash algorithm. Or
 > is a LongObjectId just a 256 bit id and not associated with a
 > particular algorithm?

LongObjectId is similar to ObjectId, it just uses a hash algorithm creating longer hash values (32 byte instead of 20 byte). ObjectId doesn't expose the hash algorithm being used (though it exposes the length of the hashes) so LongObjectId also doesn't expose this information.

-------------------------------------
author: Douglas Trujillo
date: 2015-07-21 08:12:05.000000000

Patch Set 2:

> (11 comments)
 > 
 > The distribution of responsibilities of the three LongObjectId
 > classes is not obvious to me. I assume AnyLongObjectId is the 32
 > byte/4 long Id itself whereas LongObjectId additionally offers
 > factory methods that tie the Id to a SHA 256 hash  algorithm.
 > 
 > The motivation for having a *mutable* object Id is completely
 > unclear to me.
 > 
 > Also there seem to be an abundance of convenience methods for
 > comparing and creating LongObjectIds from various representations.
 > Are they all needed?
 > On the other hand I could imagine that there is already a
 > [Short]ObjectId (SHA-1) and the convenience methods are available
 > on the short version as well and you just want to offer the same
 > functionality just in case ...

exactly, AnyLongObjectId, LongObjectId, AbbreviatedLongObjectId, MutableLongObjectId were implemented by adapting AnyObjectId, ObjectId, AbbreviatedObjectId, MutableObjectId from sha-1 to sha-256. I don't know yet if we need all these methods to implement LFS but it seemed easier to port the complete functionality the shorter variant offers in one go.

-------------------------------------
author: Ellis Stevens
date: 2015-07-21 08:26:23.000000000

Patch Set 2:

(18 comments)

Line:79, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> LongObjectId

Line:79, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> all-zero?

Line:81, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> LongObjectId

Line:88, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> that it can be interpreted as LongObjectId

Line:94, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> LongObjectId

Line:106, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> the if ensures that the ArrayIndexOutOfBounds can never happen, or do I miss something?

Line:110, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> LongObjectId

Line:172, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> LongObjectId

Line:184, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> LongObjectId

Line:187, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> 32

Line:214, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> LongObjectId

Line:228, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> LongObjectId

Line:291, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> missing description

Line:67, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> two

Line:252, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> LongObjectId

Line:256, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> LongObjectId

Line:523, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> what does that mean?

Line:542, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> what does that mean?

-------------------------------------
author: Douglas Trujillo
date: 2015-10-19 23:20:58.000000000

Patch Set 2:

(18 comments)

Line:79, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:79, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:81, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:88, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:94, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:106, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> parseHexInt4(byte) throws AIOOB if the input digit is not a valid hex digit

Line:110, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:172, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:184, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:187, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:214, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:228, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:291, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/LongObjectId.java -> Done

Line:67, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> Done

Line:252, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> Done

Line:256, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> Done

Line:523, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> Done

Line:542, org.eclipse.jgit.lfs/src/org/eclipse/jgit/lfs/lib/AnyLongObjectId.java -> Done

-------------------------------------
author: Gerrit Code Review
date: 2016-02-04 21:08:43.000000000

Change has been successfully merged into the git repository by Douglas Trujillo

-------------------------------------
