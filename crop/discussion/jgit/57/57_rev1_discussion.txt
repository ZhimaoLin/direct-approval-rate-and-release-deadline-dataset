DESCRIPTION

Add JGit IO SPI and default implementation

The SPI mainly focus's in providing an API to JGit to be able to perform
similar operations to that of java.io.File. All direct I/O is based on the
java.io.Input/OutputStream classes.

Different JGit IO SPI provider is designed to be URI scheme based and thus
the default implementation is that of "file" scheme. SPI provider will be
integrated by their respective users in a manner similar to that of JDBC
driver registration. There is a SystemStorageManager that has similar
registration capabilities and the system storage providers should be
registered with the manager in one of the provided ways.

This SPI is based on the initial requirements for switching to it and thus
this SPI will change as required during full migration to it.

Signed-off-by: Konnor Snyder xxx@xxx.xxx


COMMENTS

author: Yoselin Hanna
date: 2009-10-16 15:14:45.000000000

Patch Set 1: I would prefer that you didn't submit this; No score



-------------------------------------
author: Yoselin Hanna
date: 2010-01-23 19:15:12.000000000

Patch Set 1: Abandoned

Rather than abstracting java.io APIs we are trying to abstract higher level Git specific APIs, like ObjectDatabase and RefDatabase.  This should make it easier to map Git onto non-filesystem storage environments.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:56, org.eclipse.jgit.io/src/org/eclipse/jgit/io/StorageSystemManager.java -> We don't xxx@xxx.xxx tags.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:64, org.eclipse.jgit.io/src/org/eclipse/jgit/io/StorageSystemManager.java -> IIRC our style guide is 1 tab indent, not 2 spaces.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:145, org.eclipse.jgit.io/src/org/eclipse/jgit/io/StorageSystemManager.java -> Why would someone pass null here and not expect a failure?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:157, org.eclipse.jgit.io/src/org/eclipse/jgit/io/StorageSystemManager.java -> Again, why would someone want to register null and not have a failure?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:59, org.eclipse.jgit.io/src/org/eclipse/jgit/io/StorageSystem.java -> Please don't use short URLs in javadoc, we don't know how long the short URL service is going to stay around.  Use the complete original URL.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:61, org.eclipse.jgit.io/src/org/eclipse/jgit/io/StorageSystem.java -> URI calls this getScheme(), why not use the same name here?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:66, org.eclipse.jgit.io/src/org/eclipse/jgit/io/StorageSystem.java -> Should implementers return null if passed null?  Or should they throw NPE right away?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:74, org.eclipse.jgit.io/src/org/eclipse/jgit/io/StorageSystem.java -> Does this really matter for anything that isn't java.io.File?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:59, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileSystem.java -> SCHEME_FILE instead?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:69, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileSystem.java -> Our style usually cuddles the else on the prior line with the closing brace.  But when there's only one line inside a block we often omit the braces.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:60, org.eclipse.jgit.io/src/org/eclipse/jgit/io/Entry.java -> You should also declare hashCode, equals and toString in the interface so they are abstract and an implementor is encouraged to override them in their implementation.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:72, org.eclipse.jgit.io/src/org/eclipse/jgit/io/Entry.java -> Why are we exposing this?  If a caller needs the path, shouldn't they only rely on the URI's external form?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:85, org.eclipse.jgit.io/src/org/eclipse/jgit/io/Entry.java -> isExists is awkward to me.  Both java.io.File and Eclipse's IContainer just use exists for this operation.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:106, org.eclipse.jgit.io/src/org/eclipse/jgit/io/Entry.java -> Since we are re-inventing the wheel here, I've always thought java.io.File screwed up by not having an equivalent for POSIX's struct stat.

In other words, I wonder if we shouldn't define the API to return an object that can obtain information about the entry, but which can also cache that information.  So "Entry" is just the pointer to the location with:

  public interface Entry {
    ...
    /** Obtain information about the entry; the resulting object
         may use caches internally to reduce calls.  If you need
         up-to-date information, obtain a new EntryStatus. */
    public EntryStatus status();
    ...
  } 

  /** Cached status information about an Entry */
  public interface EntryStatus {
      public static enum Type {
        FILE, DIRECTORY
      }

      public long length();
      public boolean exists();
      public Type type();
  }

And then we can write a java.io.File version of this interface as:

    static class FileEntryStatus {
        private final File path = ...;
        private long length = -1;

        public long length() {
          if (length < 0)
            length = path.length();
          return length;
        }
    }

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:111, org.eclipse.jgit.io/src/org/eclipse/jgit/io/Entry.java -> Maybe we should define FileNotFoundException if the item doesn't exist, and IOException for other failures?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:119, org.eclipse.jgit.io/src/org/eclipse/jgit/io/Entry.java -> I think this should be the other direction.  java.io.FileOutputStream defines "boolean append", which defaults to false, because most often you want to overwrite a file.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:66, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Missing the following methods:

* hashCode
* equals
* toString

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:69, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> final

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:70, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> final

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:73, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> "based of on the" is awkward

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:91, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Why are you allowed to change this?  It should be immutable.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:113, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Why are you allowed to change this?  It should be immutable.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:148, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Pointless test.  The FileInputStream constructor already does this stat call, and throws FileNotFoundException if the item doesn't exist in the filesystem.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:152, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Pointless catch block.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:169, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> This entire method is overly complicated.  It can be written just fine as:

  public OutputStream getOutputStream(boolean append) throws IOException {
    return new FileOutputStream(getLocalFile(), append);
  }

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:177, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Pointless catch block.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:190, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> Why the hell are we converting from File to URI just to convert back to File?  Why can't we just create a LocalFileEntry directly right here?

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:200, org.eclipse.jgit.io/src/org/eclipse/jgit/io/localfs/LocalFileEntry.java -> This seems like a really expensive way to do:

  File c = new File(getLocalFile(), name);
  if (c.exists())
    return new LocalFileEntry(c, getStorageSystem());
  return null;

-------------------------------------
