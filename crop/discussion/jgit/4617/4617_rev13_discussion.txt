DESCRIPTION

Validate paths during DirCheckout

DirCacheCheckout and CanonicalTreeParser cooperate. CanonicalTreeParser
can detect malformed, potentially malicious tree entries and sets a
flag, while DirCacheCheckout refuses to work with such paths.

Malicious tree entries are ".", "..", ".git" (case insensitive), any
name containing '/' and (on Windows '\') and also (on Windows)
any paths ending in a combination of '.' or space or containing a ':'.
We also forbid all special names like "con" etc on Windows.

Some of the test can execute on any platform by enabling partial
platform emulation.

A new runtime exception, InvalidPathException, is introduced. For
backwards compatibility it extends InvalidArgumentException.

Change-Id: I86199105814b63d4340e5de0e471d0da6b579ead


COMMENTS

author: Juliet Cantu
date: 2012-04-02 22:29:22.000000000

Uploaded patch set 13.

-------------------------------------
author: Juliet Cantu
date: 2012-04-02 22:32:33.000000000

Patch Set 13: Verified; Looks good to me, but someone else must approve; IP review completed



-------------------------------------
author: Juliet Cantu
date: 2012-04-02 22:32:46.000000000

Patch Set 13:

rebased

-------------------------------------
author: Yoselin Hanna
date: 2012-04-04 06:52:06.000000000

Patch Set 13: I would prefer that you didn't submit this

(4 inline comments)



Line:699, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> I probably would prefer this to be "Windows".equals(...) so that a null return value from getProperty("os.name") doesn't NPE the routine, but instead assumes this is not Windows.

Line:266, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/CanonicalTreeParser.java -> An alternative implementation that is faster would be:

* pathSegmentBuffer():  Use instead getEntryPathBuffer()
* pathSegmentOffset() { return pathOffset; }
* patchSegmentLength(): Use instead getNameLength()

This is all pre-computed when the tree parser advances to the current entry. You might want to look at the AbstractTreeIterator base class as it defines the path buffer and methods to access the entire path, but not the current segment's name.

Line:1025, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> You may be able to define all of this in terms of AbstractTreeIterator if you use the getEntryPathBuffer() and getNameLength() methods and just expose a new method for the name offset.

Line:1030, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> testing for NUL here is a bit too low level for this code. You should be able to rely on the ptr < end logic.

-------------------------------------
author: Juliet Cantu
date: 2012-04-06 09:36:07.000000000

Patch Set 13: (4 inline comments)



-------------------------------------
author: Juliet Cantu
date: 2012-04-19 06:09:08.000000000

Patch Set 13: (1 inline comment)



Line:699, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Also fixed two similar cases in DirCacheCheckout

-------------------------------------
author: Gerrit Code Review
date: 2012-04-23 18:04:58.000000000

Your change could not be merged due to a path conflict.

Please merge (or rebase) the change locally and upload the resolution for review.

-------------------------------------
author: Juliet Cantu
date: 2012-04-06 09:36:06.000000000

MISMATCHED INLINE COMMENT
Line:699, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheEntry.java -> Done

-------------------------------------
author: Juliet Cantu
date: 2012-04-06 09:36:06.000000000

MISMATCHED INLINE COMMENT
Line:266, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/CanonicalTreeParser.java -> Done

-------------------------------------
author: Juliet Cantu
date: 2012-04-06 09:36:06.000000000

MISMATCHED INLINE COMMENT
Line:1025, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

-------------------------------------
author: Juliet Cantu
date: 2012-04-06 09:36:06.000000000

MISMATCHED INLINE COMMENT
Line:1030, org.eclipse.jgit/src/org/eclipse/jgit/dircache/DirCacheCheckout.java -> Done

-------------------------------------
