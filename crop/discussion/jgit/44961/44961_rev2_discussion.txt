DESCRIPTION

Allow to reuse tree index constants

These constants are needed to use the public method
TreeWalk.getRawMode(int index) and were defined redundantly.
They should be defined public in TreeWalk to avoid this redundancy.

Change-Id: I722352e619794988791c452545d57b17dada407a
Signed-off-by: Douglas Trujillo xxx@xxx.xxx

COMMENTS

author: Douglas Trujillo
date: 2015-04-02 08:00:25.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2015-04-02 08:00:32.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6200/

-------------------------------------
author: Brenden Conley
date: 2015-04-02 08:09:41.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6200/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2015-04-08 16:21:44.000000000

Patch Set 2: Code-Review-1

(1 comment)

Line:120, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/TreeWalk.java -> You are introducing constants in TreeWalk which are useless for TreeWalk itself. TreeWalk has no knowledge of OURS, BASE etc and does not make use of it. AFAIK the tree at index 0 is similar to the tree at index 3. The merge algorithm as a user of TreeWalk could decide to put BASE at 1 and THEIRS at 0. The user of TreeWalk freely decides what to put where. And he is responsible to get the right tree out of it. Look at CommitCommand line 341-347 where we fill the TreeWalk differently: no base,  index(=0), then worktree, then potentially commit. The safest way to work with treeWalk is to always remember the index TreeWalk gives in a variable:

  TreeWalk treeWalk = new TreeWalk(repo);
  int dcIdx = treeWalk.addTree(new DirCacheBuildIterator(existingBuilder));
  ...


On the other hand it's quite common to put BASE at 0, etc. If you would move constants out (e.g. to Constants) it would be more clear that TreeWalk doesn't rely on this constants.

-------------------------------------
