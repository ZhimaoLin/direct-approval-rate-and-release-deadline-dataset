DESCRIPTION

Implement rebase fast forward for upstream branches with merge commits

Change Ib9898fe0f982fa08e41f1dca9452c43de715fdb6 added support for
the 'cherry-pick' fast forward case where the upstream commit history
does not include any merge commits.  This change adds support for the
case where merge commits exist and the local branch has no changes.

Bug: 344779
Change-Id: If203ce5aa1b4e5d4d7982deb621b710e71f4ee10


COMMENTS

author: Imani Waller
date: 2011-05-10 23:29:46.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2011-05-10 23:29:49.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/396/ 

-------------------------------------
author: Brenden Conley
date: 2011-05-10 23:32:47.000000000

Patch Set 2: Build Successful

Build Successful 
 
https://hudson.eclipse.org/sandbox/job/jgit.gerrit/396/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2011-05-12 21:29:11.000000000

Patch Set 2: (4 inline comments)



Line:201, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/RebaseCommandTest.java -> That test here is ok. But please add a copy of this test and this time add here the following lines:

		writeTrashFile("file2", "more changess");
		git.add().addFilepattern("file2").call();
		git.commit().setMessage("update file2 on target")
				.call();

This will remove the possibility to fast-forward. The rebase algorithm now has to cherry-pick every single missing commit. But we cannot cherry-pick merge commits. In my eyes the rebase command know should return with an error that it cannot cherry-pick merge-commits. But it is not doing so.

Line:536, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> I really like this idea to remove this block. Also for me this whole block didn't make much sense to me.

But know we have another problem. We cannot cherry-pick merge-commits. If the cherryPickList contains a merge-commit then our only chance for our rebase command to succed is that we can fast-forward in a way that we don't have to process (cherry-pick) the merge commit anymore.

I would suggest that we simply add one check in the beginning of the initFilesAndRewind() method (before we call the log() command) . Something like:

if (walk.isMergedInto(headCommit, upstreamCommit))
  updateHead()...

For the easy case of a simple fast-forward we can skip all this complicated cases of cherry-picking each and every commit, handling merge commits, ...

Line:288, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> I would name this method updateHead(). There is no way to "update a previous HEAD", or?

Line:582, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> also this check for up-to-date could be done before we do the log() command and before we start handling single commits. Some check in the beginning of this method like our check for fast-forward.

-------------------------------------
author: Zachary Orozco
date: 2011-05-12 21:29:32.000000000

Patch Set 2: I would prefer that you didn't submit this



-------------------------------------
author: Imani Waller
date: 2011-05-13 11:33:11.000000000

Patch Set 2: (4 inline comments)

Ok, I've implemented those changes, just a few questions on your commits to clarify before I push it up.

Line:201, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/RebaseCommandTest.java -> Do you mean create

A - B
  \
   C - D - F
    \      /
     E -

And then rebase F onto B?

I tried that and it failed as expected;

org.eclipse.jgit.api.errors.MultipleParentsNotAllowedException: Can only cherry-pick commits which have exactly one parent
	at org.eclipse.jgit.api.CherryPickCommand.call(CherryPickCommand.java:126)
	at org.eclipse.jgit.api.RebaseCommand.call(RebaseCommand.java:256)
	at org.eclipse.jgit.api.RebaseCommandTest.testRebaseFailsCantCherryPickMergeCommits(RebaseCommandTest.java:206)

Line:536, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> So if we take care of the fastfoward and up-to-date cases before the log call then we could check for the merge commits before we start any cherry picking.  E.g.

		for (RevCommit commit : commitsToUse) {
			if (commit.getParentCount() != 1)
				throw new JGitInternalException(
						JGitText.get().canOnlyCherryPickCommitsWithOneParent);
			cherryPickList.add(commit);
		}

Line:288, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> Done

Line:582, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> Done for the first part, not sure what you mean by the second.

-------------------------------------
author: Zachary Orozco
date: 2011-05-13 14:24:24.000000000

Patch Set 2: (2 inline comments)



Line:201, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/RebaseCommandTest.java -> Nearly. If you simply add the lines I suggest you get to a graph similar to the one you say but then we rebase B onto F (and not F onto B).

My question is more: shouldn' we check for this problem in the RebaseCommand and don't even start rebasing when we see this? I most cases I don't like to check for error conditions when I know the situation is handled already later. 
But here it could make sense. First: what Rebase does is expensive. Second: the check is cheap. We anyhow have to visit every commit to be cherry-picked during the initialization phase of the rebase command. A simple check whether any of the commits is merge commit in the loop where we build up the cherryPickList is easy to implement.

Line:582, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> as I see from your last proposal you don't have an open question here anymore, right?

-------------------------------------
