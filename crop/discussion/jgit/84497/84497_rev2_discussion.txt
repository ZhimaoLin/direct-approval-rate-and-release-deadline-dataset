DESCRIPTION

StreamCopyThread: Do not let flush interrupt a write

flush calls interrupt() to interrupt a pending read and trigger a
flush.  Unfortunately that interrupt() call can also interrupt a
pending write, putting Jsch in a bad state and triggering "Short read
of block" errors.  Add locking to ensure the flush only interrupts
reads as intended.

Change-Id: Ib105d9e107ae43549ced7e6da29c22ee41cde9d8


COMMENTS

author: Eden Lin
date: 2016-11-04 20:09:09.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2016-11-04 20:09:15.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/9348/

-------------------------------------
author: Brenden Conley
date: 2016-11-04 20:18:51.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/9348/ : SUCCESS

-------------------------------------
author: Ariel Sawyer
date: 2016-11-04 20:39:31.000000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Ariel Sawyer
date: 2016-11-04 20:48:13.000000000

Patch Set 2:

If IO is laggy, PipedInputStream could be blocked waiting for data which was recently written. The question is whether a the window between write()/flush() to this class could wake up that blocked read via the flush/interrupt rather than the data that shows up via the write(). If it is impossible, great. There is the chance to miss flushes.

-------------------------------------
author: Gerrit Code Review
date: 2016-11-04 21:37:19.000000000

Change has been successfully merged into the git repository by Eden Lin

-------------------------------------
author: Eden Lin
date: 2016-11-04 23:04:23.000000000

Patch Set 2:

> If IO is laggy, PipedInputStream could be blocked waiting for data
 > which was recently written. The question is whether a the window
 > between write()/flush() to this class could wake up that blocked
 > read via the flush/interrupt rather than the data that shows up via
 > the write(). If it is impossible, great. There is the chance to
 > miss flushes.

Oof, I'm missing the forest for the trees. The interrupt() can happen after a successful read and before the corresponding write. The code

 if (isInterrupted()) {
   continue;
 }

is broken. Luckily it's straightforward to fix: https://git.eclipse.org/r/84513

-------------------------------------
