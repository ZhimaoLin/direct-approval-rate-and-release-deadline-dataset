DESCRIPTION

All DiffPlug's changes, squashed into one commit.

I tried uploading the actual history, but I've been struggling with
getting the Change-Id into every commit retroactively.  I'm gonna try
putting them in all at once.

Change-Id: I0b82f595269fc89064876ad8d225b22d7893b88d
Signed-off-by: Aylin Meadows xxx@xxx.xxx


COMMENTS

author: Aylin Meadows
date: 2015-08-03 11:34:17.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2015-08-03 11:34:24.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6986/

-------------------------------------
author: Brenden Conley
date: 2015-08-03 11:38:39.000000000

Patch Set 1: Verified-1

Build Failed 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6986/ : FAILURE

-------------------------------------
author: Aylin Meadows
date: 2015-08-03 11:51:21.000000000

Patch Set 1:

Hi JGit team,

My name is Aylin Meadows, and I've built a differ <-> filesystem abstraction called DiffPlug.  When I added Git support, I used jgit (thanks very much for it!).

I added some missing commands (cherry-pick, clean, rebase, revert, update-ref) and I made some tweaks to a few others (always trying to match the behavior of command-line git).  Some of it is pretty fast-and-dirty because I'm still trying to prove-out the concept, rather than implement the final production-quality version.

I'm very busy trying to make git stuff my day job rather than a hobby, and I'll be honest that contributing these back into the core is a long-term priority for me (long term ~= 60 days from now), but not a short-term one.  Nonetheless, if anyone would happen to want to cherry-pick some of it, here it is with the proper licensing and whatsuch.

My changes are actually contained in 24 commits, but I couldn't figure out a way to put the Gerrit metadata into every single one, so this is all of my changes squashed into one giant commit.  If you want to see these same changes commit-by-commit, they are available on the "diffplug-mod" branch of https://github.com/diffplug/jgit.

If there's things I can do to make accepting this work easier, I'll be happy to do it, but I can't promise how quickly I'll be able to do it.  I've never used Gerrit before, and I've never contributed to Eclipse before, so I might be a cat in a china shop at the beginning - I guess we'll see how thick the padding in the Gerrit cells is :)

Thanks for JGit, and thanks with your patience with me as I learn the workflow.

-------------------------------------
author: Douglas Trujillo
date: 2015-08-12 22:48:56.000000000

Patch Set 1: Code-Review-1

first of all, thanks that you want to contribute your work

I had a short first look and here some comments:
* please push your work in smaller commits, each one doing one thing, either fix a bug or add a feature
* do not make changes depend on each other if they don't need to depend on each other, if they are logically independent they should come as individual commits based on origin/master, this way review is faster and changes which are good will be accepted faster
* some of the new classes lack the license header
* some of the copyright statements in the license headers seem to be wrong, if you wrote the code, the copyright is yours or it's your employer's
* we want unit tests for all new features to ensure we don't break anything e.g. during a refactoring
* if you copy code from another project the copied code needs to go through a formal IP review at Eclipse, the license needs to be compatible with JGit's EDL license. We will care for this
* we prefer readable code instead of many comments, if you want to give context most often the best place for this is in the commit message and not in the source code.

You can add the Gerrit change-id to a series of commits by using git rebase -i on the range of commits which lack the change-id. If you do this with native git, install the gerrit commit-msg hook
(see [1]), run 

 $ git rebase -i HEAD~<number of commits you want to edit>

select the edit action on all commits which lack a Gerrit change-id, then save the editor which will
start the interactive rebase, then commit amend each commit (the Gerrit commit-msg hook 
will add the change-id if missing), then run

 $ git rebase --continue

to proceed to the next rebase interactive step until you reach the end.

You can also do the interactive rebase in EGit, in this case use the "Amend" and "Add Change-Id"
buttons in the staging view or commit dialog to amend each commit and add the change-id.

Find more details in our contributor guide [1]. Don't hesitate to ask for help on the mailing list or in review comments on your changes.

[1] https://wiki.eclipse.org/EGit/Contributor_Guide

-------------------------------------
author: Aylin Meadows
date: 2016-03-09 21:41:20.000000000

Abandoned

My work and JGit have diverged somewhat.  I've just finished a rebase and cleanup, and now I've got proper Change-Ids.  I'll push couple, see how it goes, and then continue incrementally from there.

-------------------------------------
