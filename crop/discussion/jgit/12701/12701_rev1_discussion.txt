DESCRIPTION

Fix CommitCommand not to destroy repo

There was a severe bug in CommitCommand which could lead to corrupt
repos. When merging an annotated tag the JGit MergeCommand writes
correctly the ID of the tag (and not the id of the commit the tag was
pointing to) into MERGE_HEAD. Native git does the same. But
CommitCommand was reading this file and trusting blindly that it will
contain only IDs of commits. Then the CommitCommand would create a
commit which has as parent a non-commit object (the tag object). That's
so corrupt that even native git gives up when you call "git log" in
such a repo.
To reproduce that with EGit simply right-click on a tag in the
Repository View and select Merge. The result was a corrupt repo!

Change-Id: I24cd5de19ce6ca7b68b4052c9e73dcc6d207b57c


COMMENTS

author: Brenden Conley
date: 2013-05-09 22:58:07.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3538/ 

-------------------------------------
author: Brenden Conley
date: 2013-05-09 23:05:43.000000000

Patch Set 1: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3538/ : SUCCESS

-------------------------------------
author: Carlie Harper
date: 2013-05-10 14:22:49.000000000

Patch Set 1: I would prefer that you didn't submit this

(2 inline comments)

Works well, just minor remarks.

Line:491, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> This line could be moved into the if block to improve readability.

Line:20, /COMMIT_MSG -> Please mention Bug 336291

-------------------------------------
author: Danika Greer
date: 2013-05-10 14:56:36.000000000

Patch Set 1: (1 inline comment)



Line:491, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> RevWalk needs to be released after use, right?

-------------------------------------
author: Zachary Orozco
date: 2013-05-10 19:49:33.000000000

Patch Set 1: (3 inline comments)



Line:491, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> RevWalk creation is done differently now. See comment below.

Line:491, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Actually, I am not sure whether it is important to call dispose() on RevWalk instances on which you only call parseAny() once. I guess that it is important for the typical RevWalk where you walk over a lot of objects because RevWalk caches those objects. In this file I found 3 occurences where we created a RevWalk, did one call to it and forgot about it.
I changed it now in a way that we use only one revwalk instace for the whole class and make sure it is disposed in the end.

Line:20, /COMMIT_MSG -> Done

-------------------------------------
