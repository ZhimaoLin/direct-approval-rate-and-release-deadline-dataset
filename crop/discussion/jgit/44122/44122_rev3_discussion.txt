DESCRIPTION

TestRepository: Add a cherryPick method

CherryPickCommand only works on a non-bare repository, as it must
modify the working tree and index in case of a merge conflict. In
tests, being able to recover from a merge conflict is less important,
as the caller should be able to control the full contents of files in
advance of the cherry-pick.

Change-Id: Ic332e44df1308b9336e884666b08c1f6db64513d


COMMENTS

author: Santos Moore
date: 2015-03-20 17:07:45.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2015-03-20 17:07:52.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6165/

-------------------------------------
author: Brenden Conley
date: 2015-03-20 17:16:01.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6165/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2015-03-23 15:49:16.000000000

Patch Set 3: Code-Review-1

(5 comments)

Line:310, org.eclipse.jgit.test/tst/org/eclipse/jgit/junit/TestRepositoryTest.java -> I would create a commit which has non-default Author and Committer. Then it would be more obvious that you are taking over the right idents.

Line:318, org.eclipse.jgit.test/tst/org/eclipse/jgit/junit/TestRepositoryTest.java -> same test as 3 lines above

Line:326, org.eclipse.jgit.test/tst/org/eclipse/jgit/junit/TestRepositoryTest.java -> As commented in TestRepository class: i would have expected that the committer name/email is also copied.

Line:654, org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/TestRepository.java -> why do you tick here? To be consistent with commit() or is there any requirement I don't see yet?

Line:660, org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/TestRepository.java -> why is the committer of a cherry-pick not the default user. That would be more consistent with native git, or? Like in commit() you could use

  new PersonIdent(defaultCommitter, new Date(now))

-------------------------------------
author: Santos Moore
date: 2015-03-23 20:03:45.000000000

Patch Set 3:

(5 comments)

Line:310, org.eclipse.jgit.test/tst/org/eclipse/jgit/junit/TestRepositoryTest.java -> Done.

I removed the check from cherryPickWithContentMerge as well.

Line:318, org.eclipse.jgit.test/tst/org/eclipse/jgit/junit/TestRepositoryTest.java -> Done

Line:326, org.eclipse.jgit.test/tst/org/eclipse/jgit/junit/TestRepositoryTest.java -> Done

Line:654, org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/TestRepository.java -> Yes, to be consistent with commit. Otherwise if you do:

 RevCommit c1 = git.commit().create();
 Revcommit c2 = git.cherryPick(c);
 RevCommit c3 = git.commit().create();

then c2 and c1 would have the same timestamp.

Maybe it would make more sense if cherryPick() returned a CommitBuilder? It would be a bit uglier because we would have to prepopulate the edit list, but then again we already do that for amend(). Thoughts?

Line:660, org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/TestRepository.java -> Good idea, done.

-------------------------------------
author: Zachary Orozco
date: 2015-03-24 08:10:48.000000000

Patch Set 3:

(1 comment)

Line:654, org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/TestRepository.java -> I would leave it as it is. It's test code and I like very much that you can cherry-pick in one line. Let's start making it complicated when we really need it.

Just wanted to understand whether there is a hidden dependency that c2 and c1 must have different timestamps. I don't know whether we can guarantee that the commits c1,c2,c3 have different timestamps. With our TestRepository class we can guarantee because we control the clock. But in real life if the machine is fast enough and the clock is slow enough they may have the same timestamp, or?

-------------------------------------
author: Santos Moore
date: 2015-03-24 12:30:31.000000000

Patch Set 3:

(1 comment)

Line:654, org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/TestRepository.java -> Suppose c2 in my example were created with commit() instead of cherryPick(). In that case we would definitely have c1 < c2 < c3, because the default tick is 1. So that's what I meant by being consistent with commit().

-------------------------------------
author: Zachary Orozco
date: 2015-03-25 07:49:20.000000000

Patch Set 3:

(1 comment)

Line:654, org.eclipse.jgit.junit/src/org/eclipse/jgit/junit/TestRepository.java -> Yes, I got this. That's fine. I was asking a little bit unrelated to this change whether in real world (not in test cases with TestRepository but with native git) commits are guaranteed to have increasing timestamps. Or can you be so fast that commits have the same timestamp.

-------------------------------------
