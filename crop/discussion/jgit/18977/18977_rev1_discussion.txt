DESCRIPTION

Do not allow non-ff-rebase if there are uncommitted changes

With this change jgit checks for uncommitted changes before a rebase is
started. This is also done by native git. One reason is that an abort
would override such changes. The check is skipped for a non-interactive
rebase when it will result in a fast-forward. In this case there can be
only checkout conflicts but no merge conflicts, so there cannot be an
abort which overrides uncommitted changes.

Bug: 422352
Change-Id: I1e0b59b2a4d80a686b67a6729e441924362b1236
Signed-off-by: Carlie Harper xxx@xxx.xxx

COMMENTS

author: Brenden Conley
date: 2013-11-27 15:42:58.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/4246/

-------------------------------------
author: Brenden Conley
date: 2013-11-27 15:53:39.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/4246/ : SUCCESS

-------------------------------------
author: Danika Greer
date: 2013-11-27 21:16:19.000000000

Patch Set 1: Code-Review-1

(5 comments)

Could you also add an explicit test for verifying that a fast-forward with uncommitted changes results in OK?

Also see inline comments, the general concept LGTM.

Line:110, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseResult.java -> Typo: s/uncomitted/uncommitted

Should this also mention " and the rebase is not a fast-forward"?

Line:249, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseResult.java -> The only difference to the above constructor is that one accepts a List while the other accepts a Set. I would add a static method which has an explicit name, calls new RebaseResult(Status.UNCOMMITTED_CHANGES), sets the paths and returns the results.

Then you could also directly set it as a List instead of converting it in the getter below.

Line:267, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> Why this condition?

Line:97, org.eclipse.jgit/src/org/eclipse/jgit/api/Status.java -> It's the other way around, no?

Line:193, org.eclipse.jgit/src/org/eclipse/jgit/api/Status.java -> This should be getModified.

-------------------------------------
author: Carlie Harper
date: 2013-11-28 10:36:27.000000000

Patch Set 1:

(5 comments)

I also added such a test case.

I would still like to add a test case with the scenario that an abort deleted an uncommitted change, therefore I give myself a -1.

Line:110, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseResult.java -> Done

Line:249, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseResult.java -> I also thought at a static method but hesitated because there is already a mixture of constants and constructors. But I admit that two constructors only differing by the type of the collection is not nice. But there are already different constructors only differing by arguments constructing different types of results, which also is not nice.

I think we should get rid of the different constructors and go for only static methods with different names. I can add a change before this one doing only that.

Line:267, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> This is just wrong.

Line:97, org.eclipse.jgit/src/org/eclipse/jgit/api/Status.java -> Done

Line:193, org.eclipse.jgit/src/org/eclipse/jgit/api/Status.java -> Yes! I somehow forgot to commit the latest state of the change...

-------------------------------------
