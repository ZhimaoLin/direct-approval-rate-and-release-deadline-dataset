DESCRIPTION

RefSpecs: allow construction of weird wildcarded RefSpecs

Gerrits superproject subscription feature uses RefSpecs to formalize
the ACLs of when the superproject subscription feature is allowed.

As this is a slightly different use case than describing a local/remote
pair of refs, we need to be more permissive. Specially we want to allow:

    refs/heads/*
    refs/heads/*:refs/heads/master
    refs/heads/master:refs/heads/*

Introduce a new constructor, that allows constructing these refs specs.

Change-Id: I46c0bea9d876e61eb2c8d50f404b905792bc72b3
Signed-off-by: Beau Terry xxx@xxx.xxx


COMMENTS

author: Beau Terry
date: 2016-07-21 23:49:46.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2016-07-21 23:49:53.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8767/

-------------------------------------
author: Brenden Conley
date: 2016-07-22 00:04:22.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8767/ : SUCCESS

-------------------------------------
author: Eden Lin
date: 2016-07-22 00:16:24.000000000

Patch Set 2: Code-Review-1

(9 comments)

Line:119, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Mismatched?

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> nit: extra s

Line:128, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> can be more precise:

xxx@xxx.xxx allowMismatchedWildcards
    whether to allow a wildcard on one side without a
    wildcard on the other

Line:134, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> extra s

Line:160, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> This comment isn't true unless !allowMismatch. Should it go in the 'if' body?

Can simplify a little:

  if (isWildcard(src) || isWildcard(dst)) {
    if (!allowMismatch &&
        (!isWildcard(src) || !isWildcard(dst))) {
      throw ...;
    }
    wildcard = true;
  }

Line:171, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Can decrease nesting by reversing the 'if':

  if (!allowMismatch) {
    throw ...;
  }
  wildcard = true;

Line:172, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Should this happen in the !isWildcard case, too? It seems odd to have it be conditional --- maybe we could keep dstName == null and handle that case in other methods?

Line:474, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Unrelated change?

Line:491, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Unrelated change?

-------------------------------------
author: Beau Terry
date: 2016-07-22 00:33:32.000000000

Patch Set 2:

(8 comments)

Line:119, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Done

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Done

Line:128, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Done

Line:134, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Done

Line:160, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> deleted the comment.

I think checking again for (!isWildcard(src) || !isWildcard(dst))) is redundant, as we only end up here if one of both is true (or false).
because of the condition above with the &&.

Line:171, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> Done

Line:474, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> This is implemented due to your prior comment: 
 expandFromSource and expandFromDestination don't make sense in this mode. Perhaps they need a checkState.

This is what we do as it allows to be precise in case allowMismatchedWildcards is true but we are still holding it right for this?

Line:491, org.eclipse.jgit/src/org/eclipse/jgit/transport/RefSpec.java -> see above.

-------------------------------------
author: Gerrit Code Review
date: 2016-07-25 17:33:07.000000000

Change has been successfully merged into the git repository by Eden Lin

-------------------------------------
