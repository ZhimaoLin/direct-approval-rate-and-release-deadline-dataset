DESCRIPTION

FetchCommand: Add basic support for recursing into submodules

Extend FetchCommand to expose a new method, setRecurseSubmodules(mode),
which allows to set the mode to ON, OFF or ON_DEMAND.

After fetching a repository, its submodules are recursively fetched:

- When the mode is YES, submodules are always fetched.

- When the mode is NO, submodules are not fetched.

- When the mode is ON_DEMAND, submodules are only fetched when the
  parent repository receives an update of the submodule.

The mode is determined in the following order of precedence:

- Value specified in the API call using setRecurseSubmodules.

- Value specified in the repository's config under the key
  submodule.name.fetchRecurseSubmodules

- Defaults to ON_DEMAND if neither of the previous is set.

Extend FetchResult to recursively include results for submodules, as
a map of the submodule path to an instance of FetchResult.

Test setup is based on testCloneRepositoryWithNestedSubmodules.

Change-Id: Ibc841683763307cb76e78e142e0da5b11b1add2a
Signed-off-by: Elise Key xxx@xxx.xxx


COMMENTS

author: Elise Key
date: 2017-03-01 01:22:06.000000000

Uploaded patch set 14.

-------------------------------------
author: Brenden Conley
date: 2017-03-01 01:22:12.000000000

Patch Set 14:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/9907/

-------------------------------------
author: Brenden Conley
date: 2017-03-01 01:30:59.000000000

Patch Set 14: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/9907/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2017-03-01 09:15:32.000000000

Patch Set 14:

(1 comment)

Line:164, org.eclipse.jgit/src/org/eclipse/jgit/api/FetchCommand.java -> Isn't that too expensive? You are inspecting the whole repository for changed/added files although you know that you are interested in a single path. You just want to know whether /path/to/submodule is marked dirty when asking the parent repository. At least you should set a filter for the indexDiff to concentrate only on a certain path (e.g. indexdiff.setFilter(PathFilterGroup.createFromStrings(...));

Alternatively you could even check manually whether the submodule repo is dirty. If the submodule repo is clean then check whether the submodules repo HEAD has the same ID as what we have stored in the index of the parent repo. If that is also true then the submodule is clean.

-------------------------------------
author: Elise Key
date: 2017-03-01 10:06:04.000000000

Patch Set 14:

(1 comment)

Line:164, org.eclipse.jgit/src/org/eclipse/jgit/api/FetchCommand.java -> Checking if the submodule repo is dirty won't work, because we haven't fetched it yet.  Its HEAD will always be the same as the index.

I've reworked it to filter the indexDiff.

-------------------------------------
author: Zachary Orozco
date: 2017-03-01 12:54:20.000000000

Patch Set 14:

(1 comment)

Line:164, org.eclipse.jgit/src/org/eclipse/jgit/api/FetchCommand.java -> You are right, it makes no sense to inspect the submodule repo HEAD already now.

So I read again the documentation at [1]. When I look at the docs regarding ON_DEMAND it says that submodules repos should be updated "when when the superproject retrieves a commit that updates the submodule’s reference to a commit that isn’t already in the local submodule clone". But that is different from what we are doing here. We check that what we have fetched in the parent project regarding the submodule is different from what we have in the (parent projects) index or working tree. E.g. if you create a commit in the submodule and updated the parent projects index to point to that commit then afterwards every fetch will update the submodule.

The documentation shows to me that we only need to deal with the FETCH_HEAD commit of the parent project and can ignore parent projects index and working tree.

Maybe it would be more aligned to native git behaviour (and much more performant than this solution (IndexDiff with workingTree is expensive!)) if we would do a submodulewalk for the tree behind FETCH_HEAD (and not a submodulewalk for index as we now do) and for every submodule call getObjectID and check if such an object exists in our local submodule repo.

[1] https://git-scm.com/docs/git-fetch#git-fetch---recurse-submodulesyeson-demandno

-------------------------------------
author: Elise Key
date: 2017-03-02 01:40:49.000000000

Patch Set 14:

(1 comment)

Line:164, org.eclipse.jgit/src/org/eclipse/jgit/api/FetchCommand.java -> Done

-------------------------------------
author: Gerrit Code Review
date: 2017-03-05 21:14:19.000000000

Change has been successfully merged into the git repository by Douglas Trujillo

-------------------------------------
