DESCRIPTION

[RFC] Improve layout of branches in the commit graph

<RFC>
 I'd like to hear your feedback on the commit graph layouts plotted by
this change (e.g. in EGIt's History view). If it is well received, I
will further split up this commit for easier review.
</RFC>

The aim of this change is to place all commits of a branch on the same
lane and commits of other (side) branches on different lanes.

The algorithm treats first parents of a commit specially by placing them
on the same lane as the commit itself. When a commit is the first parent
of multiple children it could be placed on any of these childrens'
lanes. In this case it is placed on the longest child lane, as this is
usually the lane of the branch the commit actually was made on.

Other (non-first) parents are placed on new lanes. This creates a layout
that should make it easier to see branches and merges and follow linear
branch histories.
This differs from the previous approach, which sometimes plotted the
commits of a branch on the same lane as the base branch commits
and further commits on the base branch appeared on a different lane.
This made the base branch appear as if it was the side branch and
the side branch appear to be the base branch.

In addition to lane assignment, also the plotting code changed to start
drawing a branch lane from the commit where it forks out. Previously it
started only when the first commit on the branch appeared.

Bug: 419359
Change-Id: Ibe547aa24b5948ae264f7d0f56a492a4ef335608
Signed-off-by: Kaden Henson xxx@xxx.xxx

COMMENTS

author: Kaden Henson
date: 2014-04-29 19:18:55.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2014-04-29 19:19:01.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/5079/

-------------------------------------
author: Brenden Conley
date: 2014-04-29 19:32:31.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/5079/ : SUCCESS

-------------------------------------
author: Douglas Trujillo
date: 2014-04-29 22:39:06.000000000

Patch Set 1:

thanks for working on improving the history layouting :-)

I tried the new layout on a couple of non-trivial repositories and it looks a lot cleaner than the old layout :-) 

so +1 for going in this direction

some thoughts for additional improvements (probably not in this change ;-) :
- we could do better on saving horizontal screen estate currently occupied by empty lanes
- sometimes lanes are crossing unnecessarily
- gitk seems to use a smarter sorting algorithm to sort commits vertically so that the vertical distance between subsequent commits on the same lane is minimized which simplifies following changes which were done in a sequence on the same branch since less scrolling is required
- gitk seems to try to minimize the vertical distance between the commits adjacent to fork or merge points which makes it easier to understand these interesting regions of the history graph

-------------------------------------
author: Zachary Orozco
date: 2014-05-06 08:54:42.000000000

Patch Set 1:

Great that work on history presentation is continued. I am not only interested in a improved layout but especially in a at least correct layout. I think we still have situations where histories are drawn incorrect.

There is a 3-year (!) old open change where I tried to solve some of the bugs. See https://git.eclipse.org/r/#/c/4863/. I'll try to pick at least the complicated tests which I wrote at that time and add them to this change (or as a seperate change). And I also have a bunch of zip's of repos where we detected wrong history layout. I'll test youre code also against them (and ideally write tests for it).

-------------------------------------
author: Kaden Henson
date: 2014-05-11 11:06:35.000000000

Patch Set 1:

Thanks, Matthias and Christian, for your comments!

@Matthias
I'll keep your suggestions in mind for further work on the layout.

@Christian
I also care about about correctness. If you find broken layouts, I'm very interested to fix them.

Neither with our current tests nor with the tests from the change you mentioned, the case where children have no lane assigned seems to be executed. Maybe this has changed in the meantime?
If I understand this correctly, children only assign themselves to parents in PlotCommitList.setupChildren(), which is called from enter(), when the child is processed. If the child leaves enter() is should always have a lane assigned. As a result of this, when processing a parent, all its known children should already have lanes assigned. If the underlying RevWalk emits parents before their children (which it should not do), the parent does not know of a child emitted later, because the setupChildren() has not been called for the child yet.

-------------------------------------
author: Douglas Trujillo
date: 2014-05-15 19:41:35.000000000

Patch Set 1:

the following bugs are related
* https://bugs.eclipse.org/bugs/show_bug.cgi?id=365402
* https://bugs.eclipse.org/bugs/show_bug.cgi?id=434945

-------------------------------------
