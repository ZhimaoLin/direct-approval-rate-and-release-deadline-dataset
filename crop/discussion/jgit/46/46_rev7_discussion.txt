DESCRIPTION

server side: smart push over HTTP

Clients can request smart push support by examining the info/refs URL
with the service parameter set to the magic git-receive-pack string:

  GET /$GIT_DIR/info/refs?service=git-receive-pack HTTP/1.1

The response is formatted with the receive pack capabilities, using
the standard packet line formatter.  A special header block is put
in front of the standard receive-pack advertisement to let clients
know the service was recognized and is supported.

If the requested service is disabled an authorization status code is
returned, allowing the user agent to retry once they have obtained
credentials from a human, in case authentication is required by
the configured ReceivePackFactory implementation.

Change-Id: Ie4f6e0c7b68a68ec4b7cdd5072f91dd406210d4f
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Yoselin Hanna
date: 2010-01-06 03:39:29.000000000

Uploaded patch set 7.

-------------------------------------
author: Blake Oneal
date: 2010-01-06 11:33:03.000000000

Patch Set 7: No score

Not sure where the 'nocache' is coming from - can you enlighten me?

-------------------------------------
author: Yoselin Hanna
date: 2010-01-06 15:34:03.000000000

Patch Set 7: No score; No score



-------------------------------------
author: Blake Oneal
date: 2010-01-06 17:24:54.000000000

Patch Set 7: Looks good to me, but someone else must approve

Fair enough, I missed that line.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:184, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GitServlet.java -> Eh, doesn't really matter that much to me, but sure.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:184, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/GitServlet.java -> Worth making this a named (inner) class in a util package somewhere? Could parameterise the response code. e.g. serve().with(new ErrorServlet( SC_FORBIDDEN ))

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:79, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/SmartServiceInfoRefs.java -> We have empty blocks warning enabled in most JGit projects, so Eclipse issues a warning here when we implement an interface method which has no action.

Consequently we have a convention to write a comment into the method to indicate we really did mean to leave the implementation empty, and that also shuts up the warning.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:79, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/SmartServiceInfoRefs.java -> Is this a coding convention to have a comment in an otherwise nop/empty body? It's not something I tend to see a lot of elsewhere.

-------------------------------------
author: Yoselin Hanna
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:92, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/SmartServiceInfoRefs.java -> Line 43 says nocache is an import:

  import static org.eclipse.jgit.http.server.ServletUtils.nocache;

This method is actually defined in change Ia0f1a425d07d035e344ae54faf8aeb04763e7487 as part of the ServletUtils class.

Not everything is using nocache, in particular we allow loose object files and pack files to be cacheable.  But I'm starting to think that may not be a good idea if access controls are enabled on the repository in the container.  I might respin the series to have this set through a filter that's on every servlet.

-------------------------------------
author: Blake Oneal
date: 2010-03-10 05:19:08.000000000

MISMATCHED INLINE COMMENT
Line:92, org.eclipse.jgit.http.server/src/org/eclipse/jgit/http/server/SmartServiceInfoRefs.java -> Where does nocache come from? And why should all services not have caching?

-------------------------------------
