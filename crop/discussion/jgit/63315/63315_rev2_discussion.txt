DESCRIPTION

Simplify development of commands: added main() to CLIGitCommand

This will execute git commands (with arguments) specified on the command
line, handy for developing/debugging arbitrary git commands. 

The git repository path can be specified via system property
"-Dgit_repo". If not specified, current directory will be used.

Change-Id: I621a9ec198c31e28a383818efeb4b3f835ba1d6f
Signed-off-by: Jayvion Booth xxx@xxx.xxx


COMMENTS

author: Jayvion Booth
date: 2015-12-28 16:09:24.000000000

Patch Set 2: Published edit on patch set 1

-------------------------------------
author: Brenden Conley
date: 2015-12-28 16:09:30.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7799/

-------------------------------------
author: Brenden Conley
date: 2015-12-28 16:17:43.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7799/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2015-12-28 16:34:27.000000000

Patch Set 2:

> My use case was to supply multiple commands to jgit and debug them
 > from the debugger. Main uses it's own parser so it supports only
 > one command.

Ok, if you need multiple commands in one run then I understand.

 > This can be done like:
 > java ... CLIGitCommand "git log -- src/a" "git status" "git add
 > src/a" and by using an Eclipse launch config, this is pretty handy
 > for debugging.

That is why I was wondering: Calling Main from Eclipse launch configs
is how I debug a JGit functionality. I have tons of those launch configs
and was happy with them. But ok, if multiple commands is a must for you
I understand this. Have you thought about adding that feature to Main?
I was just wondering whether we need two places in the JGit code base parsing
commandlines and calling pgm commands.

-------------------------------------
author: Jayvion Booth
date: 2015-12-28 16:52:27.000000000

Patch Set 2:

> > My use case was to supply multiple commands to jgit and debug
 > them
 > > from the debugger. Main uses it's own parser so it supports only
 > > one command.
 > 
 > Ok, if you need multiple commands in one run then I understand.
 > 
 > > This can be done like:
 > > java ... CLIGitCommand "git log -- src/a" "git status" "git add
 > > src/a" and by using an Eclipse launch config, this is pretty
 > handy
 > > for debugging.
 > 
 > That is why I was wondering: Calling Main from Eclipse launch
 > configs
 > is how I debug a JGit functionality. I have tons of those launch
 > configs
 > and was happy with them. But ok, if multiple commands is a must for
 > you
 > I understand this. Have you thought about adding that feature to
 > Main?

This will be probably an overkill of the Main *if* this is possible at all using org.kohsuke.args4j. I've tried to use something like List<List<String>> arguments but the default parser seem not to support this.

 > I was just wondering whether we need two places in the JGit code
 > base parsing
 > commandlines and calling pgm commands.

Interestingly, I was coming from the pgm tests where I simply wanted to do what the tests were doing. The new code in CLIGitCommand does not add any new parsing code (except the system property, which is for debugging only), it is just a thin wrapper to existing code, similar to what CLIRepositoryTestCase is doing.

-------------------------------------
author: Douglas Trujillo
date: 2015-12-28 20:15:23.000000000

Patch Set 2: Code-Review-1

(3 comments)

Line:77, org.eclipse.jgit.pgm.test/src/org/eclipse/jgit/pgm/CLIGitCommand.java -> shouldn't we better use the variables git already understands (GIT_WORK_TREE, GIT_DIR) ?
https://git-scm.com/book/uz/v2/Git-Internals-Environment-Variables#Repository-Locations

Line:85, org.eclipse.jgit.pgm.test/src/org/eclipse/jgit/pgm/CLIGitCommand.java -> xxx@xxx.xxx tag

Line:93, org.eclipse.jgit.pgm.test/src/org/eclipse/jgit/pgm/CLIGitCommand.java -> so this is the path to the working tree GIT_WORK_TREE, appending .git yields GIT_DIR

-------------------------------------
author: Jayvion Booth
date: 2015-12-28 21:13:25.000000000

Patch Set 2:

(3 comments)

Line:77, org.eclipse.jgit.pgm.test/src/org/eclipse/jgit/pgm/CLIGitCommand.java -> Since I wanted to have a command line argument, I couldn't use the env. variable. But I will change the name to -Dgit_work_tree=path_to_work_tree

Line:85, org.eclipse.jgit.pgm.test/src/org/eclipse/jgit/pgm/CLIGitCommand.java -> This is a test plugin. Do we need API checks here too???

Line:93, org.eclipse.jgit.pgm.test/src/org/eclipse/jgit/pgm/CLIGitCommand.java -> Exact. .git is what FileRepository wants.

-------------------------------------
author: Zachary Orozco
date: 2015-12-29 08:51:33.000000000

Patch Set 2:

...
 > > I understand this. Have you thought about adding that feature to
 > > Main?
 > 
 > This will be probably an overkill of the Main *if* this is possible
 > at all using org.kohsuke.args4j. I've tried to use something like
 > List<List<String>> arguments but the default parser seem not to
 > support this.
 > 
 > > I was just wondering whether we need two places in the JGit code
 > > base parsing
 > > commandlines and calling pgm commands.
 > 
 > Interestingly, I was coming from the pgm tests where I simply
 > wanted to do what the tests were doing. The new code in
 > CLIGitCommand does not add any new parsing code (except the system
 > property, which is for debugging only), it is just a thin wrapper
 > to existing code, similar to what CLIRepositoryTestCase is doing.


Ok, got it. +1 from my side (only Matthias comments should be adressed).

-------------------------------------
author: Zachary Orozco
date: 2015-12-29 11:43:25.000000000

Patch Set 2:

I think Matthias comments are all answered

-------------------------------------
author: Gerrit Code Review
date: 2015-12-29 11:43:46.000000000

Change has been successfully merged into the git repository by Zachary Orozco

-------------------------------------
