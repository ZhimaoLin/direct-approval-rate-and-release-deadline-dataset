DESCRIPTION

[DRAFT] Attributes support

Core classes to parse and process .gitattributes files.


COMMENTS

author: Saniya Hill
date: 2010-09-17 15:18:19.000000000

Patch Set 1:

This is a draft: javadocs are missing at all.

It turned out, that .gitattributes form a hierarchy, like .gitignores, so I didn't implement a Config-like solution. What is rather unpleasant is that .git/info/attributes has highest precedence. So it's a kind of stack with a fixed top-level element. This was the motivation to skip hierarchy from Attributes class at all and introduce AttributesQuery instead.

I think larger .gitattributes files at multiple levels of the tree may have significant impact on performance (what I've in mind are e.g. autogenerated .gitattributes files from svn:eol-style/svn:mime-type properties). It's just a guess, but FileNameMatcher seems to be the critical part. Hence, in addition to these patches it make sense to refactor fnmatch-API to provide another, much simpler matcher, if the pattern is actually no pattern, but a plain path.

-------------------------------------
author: Yoselin Hanna
date: 2010-09-20 21:09:46.000000000

Patch Set 1: I would prefer that you didn't submit this

(19 inline comments)

Nice start for attributes, I'm glad someone is working on it.

Line:49, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesCollector.java -> I know Javadoc was omitted to get a basic draft uploaded, but I'd like some to help understand the purpose of this interface and how collect should behave.

Line:68, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attribute.java -> We prefer to write:

  if (obj instanceof Attribute) {
    Attribute other = (Attribute)obj;
    ...
  }
  return false;

as this does both the null test and the type test at the same time.  It also permits us to compare a subclass according to our current semantics.

Line:79, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attribute.java -> I think the current state of the art is to do something like:

  int hc = key.hashCode();
  hc *= 31;
  hc += value.hashCode();
  return hc;

But actually for an attribute there aren't too many that can can be multi-valued, are there?  So just using the key's hashCode as our own hashCode might be sufficient here.

Line:63, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> I would rather have this be an Entry class that is abstract, with two subclasses:  TextLine (any string) and AttrLine (an attribute declaration).  That way we don't play as many instanceof games below.

Line:91, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> Given its name and existence in a public API, I wouldn't expect the Set to be modified by the method.  But it is.  Different name perhaps?  Or maybe you should be copying the set inside of the method and altering the copy?

Line:124, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> Config parses a String.  I don't think its unreasonable to have all of an attributes file as a single String object.  So maybe we should parse(String) here rather than a Reader.

Line:146, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> Have you put any thought into editing an Attributes?  What might our edit API look like?  I can't say I'm proud of the Config API for this, its a difficult thing to edit a human written file...

Line:176, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> FWIW we try not to use split in our lower-level parsing routines.  We instead prefer to do loop through the characters ourselves, as it avoids the allocation of the String[], as well as the internal Pattern and Matcher objects needed to perform the regex search during the split.

Line:181, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> Isn't this trim unnecessary?  Wouldn't the prior trim call have already removed everything it can?

Line:187, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> Since the <<<, === and >>> cases can only happen at the start of a line shouldn't we test for these before we do the splitting into tokens?  That is, can't we do:

  static Entry parseEntry(String line) {
    line = line.trim();
    if (line.startsWith("#")
        || line.startsWith("<<<<<<<")
        || line.startsWith("========")
        || line.startsWith(">>>>>>>>")
      return null;

Line:210, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> If the pattern isn't valid, we should treat the entry as though it were a comment line... not throw an exception.

Line:247, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> This expression can be hard to read.  I'd rather break it out as:

  if ('0' <= ch && ch <= '9')
    continue;
  if ('a' <= ch && ch <= 'z')
    continue;
  if ('A' <= ch && ch <= 'Z')
    continue;
  ...
  return false;

Or use a table to check the validity:

  static boolean validChars[128];

  static {
    for (char c = '0'; c <= '9'; c++)
      validChars[c] = true;
    validChars['-'] = true;
    ...
  }

  if (ch > 127 || !vaildChars[ch])
    return false;

Line:69, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributeValue.java -> Please include a translation text here indicating that attribute value cannot be null.

Line:76, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributeValue.java -> What is the distinction between id and value?

Line:56, org.eclipse.jgit/src/org/eclipse/jgit/util/CompareUtils.java -> I wonder if we shouldn't call this equals().  StringUtils has an equalsIgnoreCase(String,String) that almost mirrors String.equalsIgnoreCase(String).

Line:57, org.eclipse.jgit/src/org/eclipse/jgit/util/CompareUtils.java -> Style-nit: Parens on the LHS of || aren't necessary.

Line:74, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributesQueryTest.java -> This test is too difficult to read as written.  Look at IgnoreNodeTest as an example of an easier to read test case.  Don't be afraid of using instance members inside of the test to help you manage state required to use a DSL to setup the test environment in a more readable way.

Line:1057, org.eclipse.jgit/src/org/eclipse/jgit/util/RawParseUtils.java -> PathUtils class maybe?  I'm not convinced these should be in RawParseUtils.  RawParseUtils is typically working on byte[] and often providing a higher level value from that (e.g. an int, String or PersonIdent).

Line:122, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributesTest.java -> I would prefer to have a lot of smaller specific test cases, over chaining a large number of them into a single common input string.  Its hard to figure out what the rules we care about are from a particular assertion when the input is so complex.

Do a lot of little tests for parsing:  testParse_EmptyInput().  testParse_TrailingWhitespace().  testParse_MultipleLinesSamePattern().  testParse_IgnoreComment().  testParse_IgnoreConflictMarkers().  Etc.

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:01.000000000

Patch Set 1: (8 inline comments)

Rebased and started work on incorporating the feedback.

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:00.000000000

MISMATCHED INLINE COMMENT
Line:68, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attribute.java -> Done

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:00.000000000

MISMATCHED INLINE COMMENT
Line:79, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attribute.java -> Done

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:00.000000000

MISMATCHED INLINE COMMENT
Line:124, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> fromText/toText like in Config?

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:00.000000000

MISMATCHED INLINE COMMENT
Line:146, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> I think editing should be possible. However, I need to understand the code better before proposing something

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:00.000000000

MISMATCHED INLINE COMMENT
Line:187, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> Done

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:00.000000000

MISMATCHED INLINE COMMENT
Line:247, org.eclipse.jgit/src/org/eclipse/jgit/attributes/Attributes.java -> Done

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:00.000000000

MISMATCHED INLINE COMMENT
Line:69, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributeValue.java -> Done

-------------------------------------
author: Rocco Fowler
date: 2013-01-29 20:51:00.000000000

MISMATCHED INLINE COMMENT
Line:76, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributeValue.java -> I'm not sure. To me it looks like 'id' is more sort of an 'action' (i.e. SET/UNSET)

-------------------------------------
