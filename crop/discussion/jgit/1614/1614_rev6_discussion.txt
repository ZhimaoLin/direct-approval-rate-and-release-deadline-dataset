DESCRIPTION

[DRAFT] Attributes support

Core classes to parse and process .gitattributes files including
support for reading attributes in WorkingTreeIterator.

The implementation follows the git ignore implementation. It supports
lazy reading attributes while walking the working tree.

Bug: 342372
Change-Id: I05f3ce1861fbf9896b1bcb7816ba78af35f3ad3d
Also-by: Rocco Fowler xxx@xxx.xxx

COMMENTS

author: Rocco Fowler
date: 2013-03-10 16:48:50.000000000

Uploaded patch set 6.

-------------------------------------
author: Brenden Conley
date: 2013-03-10 16:48:56.000000000

Patch Set 6:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3117/ 

-------------------------------------
author: Brenden Conley
date: 2013-03-10 16:54:17.000000000

Patch Set 6: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3117/ : SUCCESS

-------------------------------------
author: Yoselin Hanna
date: 2013-03-28 18:56:03.000000000

Patch Set 6: I would prefer that you didn't submit this

(26 inline comments)



Line:94, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> file name patterns can be followed by space or tab. tab is useful if you like them, or if the filename contains a space.

Line:95, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> nit: space after if. but isn't this always true? above you trimmed the line so the space can't be at the end. if there is no space patternEnd == -1 and txt.length() > -1.

Line:113, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> nit: trailing space

Line:120, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java xxx@xxx.xxx attributes relevant to the path; empty list if no attributes are defined. Never null.

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> nit: i think we prefer i >= 0 for reverse iteration loops

Line:129, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> nit: drop curly braces

Line:1, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributeTest.java -> Header?

Line:619, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> nit: trailing whitespace

Line:630, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> nit: trailing whitespace

Line:1204, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> this is incorrect. we don't want to parse the excludes file. you want core.attributesfile here.

Line:1206, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> rename this variable

Line:1223, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> rename exclude to attrs

Line:59, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> It seems the errors here also exist in IgnoreRule. Or at least the code is confusing enough that I am seeing what appear to be bugs on my first reading of it. That's not a good sign.

Given most of the issues in this class also came from IgnoreRule, I'm inclined to take attribute support now, try to clean it up in-tree, and then port that somehow over to clean up IgnoreRule.

Line:63, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> I think this is [ \t\r] as the regex because tabs are allowed and the C implementation oddly enough allows \r between attributes too.

Line:83, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> final

Line:85, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> final

Line:94, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> a new attribute

Line:144, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> isNameOnly()

Line:152, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Unfortunately this was modified in setup() and is no longer the original text. Specifically the trailing / was lost, and a leading / may have been added.

Line:166, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> relativeTarget

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> This does not match what happens during setup(). If the pattern does not contain / we do not prefix it with / so then the simple target.equals(pattern) test that you might expect to succeed fails and we have to do further checks.

Line:187, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> unnecessary parens around target. can't we test this without making a temporary string?

  if (target.startsWith(pattern)
      && target.length() > pattern.length()
      && target.charAt(pattern.length()) == '/')

Line:192, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> during a runtime operation like this where tree paths are being matched we should avoid regex and instead use indexOf to skip through the string.

Line:242, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> This method no longer parses the attributes.

Line:244, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> This should just happen in the constructor. And then the other fields can be final.

Line:263, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> break this line up:

  if (pattern.contains("*") // $NON-NLS-1$
    || pattern.contains("?") // $NON-NLS-1$
    || pattern.contains("[")) { // $NON-NLS-1$

-------------------------------------
author: Douglas Trujillo
date: 2013-03-28 22:53:37.000000000

Patch Set 6: I would prefer that you didn't submit this

(2 inline comments)

this change will need a CQ since it includes changes from Marc or did you completely rewrite it ?

Line:2, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributesMatcherTest.java -> doesn't look like you are working for Red Hat or do I miss something here ? Also 2010 seems a bit old

there are more files with this header in this patch

Line:112, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributesNodeTest.java -> what's the purpose of this dead code ?

-------------------------------------
author: Yoselin Hanna
date: 2013-03-29 00:04:36.000000000

Patch Set 6: (1 inline comment)



Line:2, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributesMatcherTest.java -> Most of this code was copied from the existing Ignore support. So the copyright assertion is correct. Its 2010 Red Hat according to the sources where this came from. Unfortunately JGit isn't seeing this as a copy, maybe its too different or copy detection isn't enabled in Gerrit because its costly.

-------------------------------------
author: Rocco Fowler
date: 2013-04-26 12:04:24.000000000

Patch Set 6: (28 inline comments)

Comments inline. I'll upload an updated patch.

Line:2, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributesMatcherTest.java -> My contribution is insignificant low. Thus, I'm find with "and other ..." as found below.

Line:112, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributesNodeTest.java -> Done

Line:94, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> Is this written somewhere? How does Git handle this?

gitattributes(5): .. a pattern followed by an attributes list, separated by whitespaces

-> Is tab treated as "whitespace"? What else is?

What about whitespaces in patterns? The seem to be ok for gitignore and fnmatch. But there is only the pattern and not attributes.

BTW, should I move this parsing into the AttributeRule class?

Line:95, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> Done

Line:113, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> Done

Line:120, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> Done

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> Done

Line:129, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesNode.java -> Done

Line:1, org.eclipse.jgit.test/tst/org/eclipse/jgit/attributes/AttributeTest.java -> Done

Line:619, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> Done

Line:630, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> Done

Line:1204, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> Done

Line:1206, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> Done

Line:1223, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> Done

Line:59, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> That seems like a good option. I can then extract a generic PatternRule that the can IgnoreRule subclass for additional pattern handling, i.e. negation rules.

Line:63, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done

Line:83, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done

Line:85, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done

Line:94, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done

Line:144, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done

Line:152, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Should I update the JavaDoc to indicate the modification or should I keep the original pattern somewhere?

Line:166, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Right, but if the pattern does not start with / then nameOnly is true and the later check will actually match (because all segments of a path are checked then). 

At least, that's how I read the code. Should I try to come up with a more readable implementation?

Line:187, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Removed the parens.

Are the additional checks cheaper than a temp. string?

Line:192, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> I optimized this one out. Please let me know if that is better and I'll optimize the other occurrences as well.

// Iterate through each sub-name
int segmentStart = 0;
int segmentEnd = target.indexOf('/');
while(true) {
	if (segmentEnd > segmentStart
			&& target.regionMatches(segmentStart, pattern, 0,
					segmentEnd - segmentStart)
			&& doesMatchDirectoryExpectations(isDirectory, false))
		return true;
	else if (segmentEnd == -1
			&& target.regionMatches(segmentStart, pattern, 0,
					target.length() - segmentStart)
			&& doesMatchDirectoryExpectations(isDirectory, true))
		return true;

	if (segmentEnd == -1 || segmentStart >= target.length())
		// this was the last segment
		break;

	// next
	segmentStart = segmentEnd + 1;
	segmentEnd = target.indexOf('/', segmentStart);
}

Line:242, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done

Line:244, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done.

I wasn't sure about the readability of the constructor. One thing that's odd is another compile warning I got. I had to create a new local variable pattern2 to get rid of it. :(

Line:263, org.eclipse.jgit/src/org/eclipse/jgit/attributes/AttributesRule.java -> Done

-------------------------------------
