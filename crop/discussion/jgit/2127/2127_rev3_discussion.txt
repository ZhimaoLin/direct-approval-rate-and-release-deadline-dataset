DESCRIPTION

Checkout: expose a CheckoutResult

This is needed by callers to determine checkout conflicts and
possible files that were not deleted during the checkout so that they
can present the end user with a better Exception description and retry
to delete the undeleted files later, respectively.

Change-Id: I037930da7b1a4dfb24cfa3205afb51dc29e4a5b8
Signed-off-by: Willow Cantrell xxx@xxx.xxx


COMMENTS

author: Willow Cantrell
date: 2010-12-20 09:32:42.000000000

Uploaded patch set 3.

-------------------------------------
author: Malia Sampson
date: 2010-12-20 15:18:45.000000000

Change has been successfully merged into the git repository.

-------------------------------------
author: Malia Sampson
date: 2010-12-20 15:18:45.000000000

Patch Set 3: Looks good to me, approved; IP review completed

Looks good.

-------------------------------------
author: Douglas Trujillo
date: 2010-12-20 15:28:07.000000000

Patch Set 3: (1 inline comment)



Line:136, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CheckoutCommandTest.java -> this assertion fails on Mac OS X using HFS

-------------------------------------
author: Malia Sampson
date: 2010-12-20 15:35:26.000000000

Patch Set 3:

Can you file a bug?

Sigh... file path/system issues after all these years still :)

-------------------------------------
author: Yoselin Hanna
date: 2010-12-20 17:51:41.000000000

Patch Set 3: (1 inline comment)



Line:128, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutResult.java -> I really don't think File was the right type to use here.  The list of paths that conflict should be relative to the root of the working tree, because that is what the UI will want to show the user.

If the UI needs the java.io.File, that's a simple matter of joining the String with the root of the working tree.

Here by returning java.io.File we can now technically return any path object, one that might not even be prefixed by the working tree root, but is still within it.  Consider if the working tree root is actually resolved via a symlink... here we might return the canonical path and not the logical path.

*sigh*

We sort-of need the NIO2 Path object.  Maybe we should be implementing something like it for these working tree paths instead of relying on String or File.

-------------------------------------
author: Willow Cantrell
date: 2010-12-20 18:13:51.000000000

Patch Set 3: (1 inline comment)



Line:128, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutResult.java -> Actually, it was just forwarding the paths (as String) from DirCacheCheckout in my first iteration of this... Douglas Trujillo then suggested to change it to File instead. Your comments make a lot of sense, so I guess we should change it back, right?

-------------------------------------
author: Yoselin Hanna
date: 2010-12-20 19:25:23.000000000

Patch Set 3: (1 inline comment)



Line:128, org.eclipse.jgit/src/org/eclipse/jgit/api/CheckoutResult.java -> Probably.  I don't think File is the right type for our working tree paths.  Its too easily cast into an absolute or canonical path that then might no longer be part of the working tree.

We've had trouble with that in EGit, and its why we have funny methods to convert a File into a String for a given RepositoryMapping.  (Its been a while since I looked at that code, so I might not be remembering it exactly.)

If we want the getParentFile() sort of support here, we probably should just introduce a JGit Path type that we can use for these working tree paths.  If we can get by without it, String is probably fine then.

-------------------------------------
