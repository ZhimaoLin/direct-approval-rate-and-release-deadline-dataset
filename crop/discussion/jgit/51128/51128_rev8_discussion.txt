DESCRIPTION

RFC: Store push certificates in refs/push-certs

Inspired by a proposal from gitolite[1], where we store a file in
a tree for each ref name, and the contents of the file are all push
certificates affecting that ref.

The main modification from that proposal (other than lacking the
out-of-git batching) is to append xxx@xxx.xxx to filenames, which
allows storing certificates for both refs/foo and refs/foo/bar. Those
refnames cannot coexist at the same time in a repository, but we would
definitely not want to discard push certificates in the same way we
discard reflogs, as we want a verifiable audit log.

The xxx@xxx.xxx syntax is at least somewhat consistent with
gitrevisions(7) xxx@xxx.xxx describe operators on ref names.

[1] https://github.com/sitaramc/gitolite/blob/cf062b8bb6b21a52f7c5002d33fbc950762c1aa7/contrib/hooks/repo-specific/save-push-signatures

Change-Id: Id3eb32416f969fba4b5e4d9c4b47053c564b0ccd


COMMENTS

author: Santos Moore
date: 2015-07-06 21:03:14.000000000

Uploaded patch set 8.

-------------------------------------
author: Brenden Conley
date: 2015-07-06 21:39:48.000000000

Patch Set 8:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6843/

-------------------------------------
author: Brenden Conley
date: 2015-07-06 21:47:06.000000000

Patch Set 8: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6843/ : SUCCESS

-------------------------------------
author: Santos Moore
date: 2015-07-06 21:50:12.000000000

Patch Set 8:

Mostly done rewriting this. FWIW the approach I'm taking to handle race conditions is:

* save(PushCertificate) rereads all refs mentioned in the command, and only clobbers the value in the cert store if the current ref value matches the new ID in the command.
* save(PushCertificate, BatchRefUpdate) does the same, except using the list of commands previously added to the BatchRefUpdate to determine which ref files in the cert store to clobber.

In all cases, the cert is included in the commit message on refs/push-certs. If all ref values changed between the time the push was processed and the time it was saved to the cert store, then the commit will be a no-op, but will still contain the record for posterity.

-------------------------------------
author: Santos Moore
date: 2015-07-06 21:53:11.000000000

Patch Set 8:

I'm not completely sure this new approach is going to work for Gerrit, but I think it will get us part of the way there.

If there is a push to refs/for/*, then it won't touch any files in the tree because those refs don't actually exist. But it will still record the update in the commit message.

What's missing, and I'm not sure if we actually want to do this, is storing the push cert representing refs/for/* in the file for all the various refs/changes/CD/ABCD/X refs created indirectly by the push.

-------------------------------------
author: Yoselin Hanna
date: 2015-07-07 03:11:53.000000000

Patch Set 8:

(1 comment)

Line:18, /COMMIT_MSG -> I think the argument in gitolite is its ok to replace refs/foo with a tree for refs/foo/bar because you still have the history of the refs/push-certs telling you refs/foo existed as a file and what its contents was back when it existed before refs/foo/bar came along.

So xxx@xxx.xxx suffix isn't entirely required if you can trust the history pointed at by the ref.

-------------------------------------
author: Santos Moore
date: 2015-07-07 14:08:46.000000000

Patch Set 8:

(1 comment)

Line:18, /COMMIT_MSG -> If you do that, then you have the history of refs/push-certs telling you refs/foo existed as a ref, but you've discarded the push cert that deleted refs/foo. If you think it's ok to discard some push certs, why store them at all? :)

-------------------------------------
