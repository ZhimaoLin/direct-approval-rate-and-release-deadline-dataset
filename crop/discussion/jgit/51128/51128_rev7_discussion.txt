DESCRIPTION

RFC: Store push certificates in refs/push-certs

Inspired by a proposal from gitolite[1], where we store a file in
a tree for each ref name, and the contents of the file are all push
certificates affecting that ref.

The main modification from that proposal (other than lacking the
out-of-git batching) is to append xxx@xxx.xxx to filenames, which
allows storing certificates for both refs/foo and refs/foo/bar. Those
refnames cannot coexist at the same time in a repository, but we would
definitely not want to discard push certificates in the same way we
discard reflogs, as we want a verifiable audit log.

The xxx@xxx.xxx syntax is at least somewhat consistent with
gitrevisions(7) xxx@xxx.xxx describe operators on ref names.

[1] https://github.com/sitaramc/gitolite/blob/cf062b8bb6b21a52f7c5002d33fbc950762c1aa7/contrib/hooks/repo-specific/save-push-signatures

Change-Id: Id3eb32416f969fba4b5e4d9c4b47053c564b0ccd


COMMENTS

author: Santos Moore
date: 2015-07-01 18:50:34.000000000

Uploaded patch set 7.

-------------------------------------
author: Brenden Conley
date: 2015-07-01 18:50:41.000000000

Patch Set 7:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/6821/

-------------------------------------
author: Eden Lin
date: 2015-07-01 18:57:57.000000000

Patch Set 7: Code-Review+1

(1 comment)

Line:7, /COMMIT_MSG -> looks ready to drop the RFC tag

-------------------------------------
author: Brenden Conley
date: 2015-07-01 18:58:49.000000000

Patch Set 7: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/6821/ : SUCCESS

-------------------------------------
author: Santos Moore
date: 2015-07-01 19:06:51.000000000

Patch Set 7:

(1 comment)

Line:7, /COMMIT_MSG -> Still awaiting comments from Shawn.

-------------------------------------
author: Yoselin Hanna
date: 2015-07-01 21:18:52.000000000

Patch Set 7:

(3 comments)

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> So each time we push to a ref, the file grows in length. And we have to delta compress that over time. At some point that blob may become so large that compressing/decompressing it will be a bottleneck and delta compression will stop running altogether because the file exceeds some limit, by default 50M in JGit's packer.

What about replacing the file on each push and using the history of the file to get the certs?

Downside is obviously history of the ref is O(history of repo).

Line:115, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> nit: formatting is not consistent here

Line:281, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> Lets hope we never record refs/changes/... namespace?

-------------------------------------
author: Santos Moore
date: 2015-07-01 21:26:34.000000000

Patch Set 7:

(2 comments)

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> Jonathan suggested replacing the file as well (in a different context), but it doesn't feel right to me. This is git, the tree should be a snapshot of the state, and the state is that you have accumulated all of these push certs.

What if instead we had multiple files per ref, like xxx@xxx.xxx Then when 0001 gets too big, say 10M, we append to 0002 instead.

This also raises the point that the get(ref) -> List interface is not particularly well-suited to reading large numbers of certs in a streaming fashion. Maybe we need to implement this as get(ref) -> Iterable.

If we used multiple files, then the iterable could be implementing by slurping in one file at a time starting with the last one, and iterating through its contents in reverse order. (As later optimizations we can play games like walking through the file forward and recording start offsets for each cert but discarding the contents, walking backwards till we find a version line, etc.)

Line:281, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> That's what the fanout directory is for right? :)

-------------------------------------
author: Eden Lin
date: 2015-07-01 21:40:21.000000000

Patch Set 7:

(2 comments)

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> For comparison, https://github.com/sitaramc/gitolite/blob/master/contrib/hooks/repo-specific/save-push-signatures also replaces the file. The cert at each path is "here is a push cert and signature describing the current state of this ref".

I think just seeing the latest cert and being able to use "git log" to see history since the last time I fetched push-certs would be pleasant.

Line:281, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> If there are too many refs then we could switch to using a TreeFormatter instead of a DirCache to build the modified tree.

I think the DirCache-based implementation should be fine for now.

-------------------------------------
author: Santos Moore
date: 2015-07-01 21:46:48.000000000

Patch Set 7:

(1 comment)

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> Assuming we still store certs for tombstones (which would still xxx@xxx.xxx I could be ok with that. It's not my first choice but the two of you can outvote me.

Another alternative is to not store anything in the tree, and just store the cert in commit messages. If you want to look at certs affecting refs/heads/foo, that's spelled "git log --grep=refs/heads/foo".

-------------------------------------
author: Yoselin Hanna
date: 2015-07-01 22:11:05.000000000

Patch Set 7:

(3 comments)

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> Sharding is a mess. Lets not do that. I would prefer to just replace the file.

Another advantage replacing the file per push is the push cert is a single blob. If it touches several refs at once, all of those refs in the tree use the same blob pointer. Less duplication of the cert information.

I agree, get(ref)->List is not the best interface here. It should be Iterable or some type of iterableish thing so we can produce results incrementally rather than having to produce the entire thing right away. Gives us more options in the storage.

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> I considered putting the cert in the commit message too. Its a bit harder to search because its

  git log --grep=refs/heads/foo refs/push-certs

and not

  git log refs/push-certs -- refs/heads/foo

The tree structure starts to form a bit of an index that can filter certs. But grep on the commit message is a very fast filter. The only benefit to the tree structure is if we have some sort of side indexes like "per file bitmaps" that can accelerate lookup of history per file. Suddenly that also translates into a per-ref cert lookup.

Line:281, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> Right, I was talking about DirCache being costly to build for a large number of refs. Its fine for now. It may be an issue later. Lets kick that can down the road. Its internal implementation detail to this class only that doesn't affect storage.

-------------------------------------
author: Santos Moore
date: 2015-07-01 22:56:16.000000000

Patch Set 7:

(1 comment)

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushCertificateStore.java -> So at this point you are arguing for just storing one push cert per ref. Ok.

I still need to think through what happens when there are conflicts due to races where push cert storage happens out of order relative to the actual ref updates. (One advantage of the concatenation approach is the worst thing that happens is the certs are stored out of order in the file, but you can still reconstruct it during an audit.)

-------------------------------------
