DESCRIPTION

Enhance reading of git-rebase-todo formatted files

Reading and writing files formatted like the git-rebase-todo files was
hidden in the RebaseCommand. Certain constructs (like leading
tabs+spaces) have not been handled as native git. Also the upcoming
rebase interactive feature in EGit needs reading/writing these files
independent from a RebaseCommand. Therefore reading and writing those
files has been refactored to the Repository class. RebaseCommand get's
smaller because of that and doesn't have to deal with reading/writing
files.
Additional tests for empty todo-list files, or files containing comments
have been added.

Change-Id: I323f3619952fecdf28ddf50139a88e0bea34f5ba
Signed-off-by: Zachary Orozco xxx@xxx.xxx


COMMENTS

author: Danika Greer
date: 2013-07-31 10:28:54.000000000

Patch Set 1:

(1 comment)

File Comment: org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> Do these two methods have to be in the Repository class? They could be declared static AFAICS. How about a new RebaseTodoFile class (maybe in a new rebase package - the lib package is already kind of big)?

-------------------------------------
author: Zachary Orozco
date: 2013-07-31 10:46:00.000000000

Patch Set 1:

(1 comment)

File Comment: org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> Right. I could move the implementation into a different class just to keep the Repository class smaller. But I still would like have two methods readRebaseTodoFile() and writeRebaseTodoFile() in the repository class. Whenever I have to read or write a file in the .git filesystem hierarchy I start searching for it in the Repository class. read/writeCommitMsgFile(), read/writeOrigHead(), read/writeMergeCommitMsg() are good examples.
To motivate that I'll make them really non-static so that it is obvious they are related to the repository. Currently the caller has to specify a java.io.File and I expect it to point inside the .git directory of the repository. I'll substitute the File by a path string which is meant to relative to the repos .git folder.

-------------------------------------
author: Alondra Arellano
date: 2013-07-31 12:55:51.000000000

Patch Set 1:

(7 comments)

Line:1594, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> move initialization of tokenCount just befor the inner while loop makes it clear, that it won't be changed by the following checks and therefore makes this method more readable (I expected it to be intentionally placed here and that it's changed before entering the inner loop)

Line:1665, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> If the Line has been transformed from a non-comment step to a comment step we may lose information here. But it seems to me that this problem can not be faced easily (if at all).

It would be neat if a sequence of writeRebaseTodoFile(...) and readRebaseTodoFile would(...) gives the exact same result as the original input was

Line:606, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> I think we should use Strings and let the RebaseTodoLine Class do the encoding.

Line:112, org.eclipse.jgit/src/org/eclipse/jgit/lib/RebaseTodoLine.java -> I would prefer to have commit be final.
Having commit be final (and therefor only be set in the constructor) makes it clear whether this line has ever been a regular (i.e. non-comment) or a comment line by checking if it's null.

null indicating that this line has ever been a comment line, otherwise this line either is a non-comment line or it has been transformed from non-comment to comment

Line:114, org.eclipse.jgit/src/org/eclipse/jgit/lib/RebaseTodoLine.java -> would prefer String to have this class be independent from encoding

Line:116, org.eclipse.jgit/src/org/eclipse/jgit/lib/RebaseTodoLine.java -> would prefer String to have this class be independent from encoding

Line:180, org.eclipse.jgit/src/org/eclipse/jgit/lib/RebaseTodoLine.java -> It's possible to transform a non-comment line to a comment line, so it may be useful to change it back (only in the particular case, that a comment line has been a non-comment line befor)

non-comment -> comment -> non-comment sould work

comment -> non-comment should fail (i.e. if "AbbreviatedObjectId commit" is null)

-------------------------------------
author: Zachary Orozco
date: 2013-07-31 14:32:03.000000000

Patch Set 1:

(7 comments)

Line:1594, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> Done

Line:1665, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> If a non-comment line is converted to a comment line then I generate a comment in the latest proposal. Hopefully we now don't loose too much data.

Line:606, org.eclipse.jgit/src/org/eclipse/jgit/api/RebaseCommand.java -> Done

Line:112, org.eclipse.jgit/src/org/eclipse/jgit/lib/RebaseTodoLine.java -> Done

Line:114, org.eclipse.jgit/src/org/eclipse/jgit/lib/RebaseTodoLine.java -> Done

Line:116, org.eclipse.jgit/src/org/eclipse/jgit/lib/RebaseTodoLine.java -> Done

Line:180, org.eclipse.jgit/src/org/eclipse/jgit/lib/RebaseTodoLine.java -> Done

-------------------------------------
