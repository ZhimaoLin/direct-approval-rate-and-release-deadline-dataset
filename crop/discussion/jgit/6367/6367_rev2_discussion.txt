DESCRIPTION

Add a method to set the .gitmodules config on a SubmoduleWalk

It is not always appropriate to use the .gitmodules file from the
working tree, for example if reading the modules at a specific commit.
And sometimes it is impossible, as in a bare repository.

Change-Id: I71b7ed3ba16c80b0adb8c5fd85b5c37fd4aef8eb


COMMENTS

author: Santos Moore
date: 2012-06-14 22:34:59.000000000

Uploaded patch set 2.

-------------------------------------
author: Yoselin Hanna
date: 2012-06-14 22:45:06.000000000

Patch Set 2: I would prefer that you didn't submit this

(3 inline comments)



Line:104, org.eclipse.jgit/src/org/eclipse/jgit/submodule/SubmoduleWalk.java -> bad indent

Line:113, org.eclipse.jgit/src/org/eclipse/jgit/submodule/SubmoduleWalk.java -> should this form be updated to do readModulesConfig too?

Line:380, org.eclipse.jgit/src/org/eclipse/jgit/submodule/SubmoduleWalk.java -> curly braces aren't required

-------------------------------------
author: Santos Moore
date: 2012-06-14 23:02:41.000000000

Patch Set 2: (1 inline comment)



Line:113, org.eclipse.jgit/src/org/eclipse/jgit/submodule/SubmoduleWalk.java -> You could try, but you don't know that this tree is a root. For example, if you have
a submodule at dir/otherrepo, it's valid to pass either (id(""), "dir/otherrepo") *or* (id("dir"), "otherrepo"). Only in the former case can you correctly find .gitmodules. (In fact, dir/.gitmodules may exist, which is a bug in their repo, so we certainly don't want to read it.)

There's a similar but slightly different issue with the form of forPath that takes an AbstractTreeIterator. In that case, assuming the iterator came from a TreeWalk, there actually is some context information available. Somewhat confusingly (I was bit by this early today), you have to pass "dir/otherrepo" regardless of whether the tree param is tree("") or tree("dir"). Now, arguably you could walk up the getParent() chain from the AbstractTreeIterator until you get to the root and look for .gitmodules there, but I figured it would be impolite and/or a pain to wander around the already-partially-consumed root-level iterator.

-------------------------------------
author: Yoselin Hanna
date: 2012-06-14 23:21:54.000000000

Patch Set 2: (1 inline comment)



Line:113, org.eclipse.jgit/src/org/eclipse/jgit/submodule/SubmoduleWalk.java -> Its the caller's fault if they pass the treeId for "dir" and "dir/.gitmodules" exists and we read it incorrectly here. They shouldn't have done that. They should have passed the treeId for "" and made path be "dir/blah" instead of just "blah".

Its also the caller's fault if they pass a treeId for a tree that doesn't exist. Etc.

We can't protect a caller from making mistakes at this level of the JGit API. There are just some assumptions we have to make about the input being (roughly) valid, and carry on.

-------------------------------------
author: Santos Moore
date: 2012-06-14 23:47:16.000000000

Patch Set 2: (3 inline comments)



Line:104, org.eclipse.jgit/src/org/eclipse/jgit/submodule/SubmoduleWalk.java -> Done

Line:113, org.eclipse.jgit/src/org/eclipse/jgit/submodule/SubmoduleWalk.java -> We can't protect them from making mistakes, but we can document restrictions :)

Added the readModulesConfig and tightened up the documentation.

Incidentally I'm not a huge fan of the fact that, for my use case at least, we just did a whole tree walk to verify that a given path was indeed a submodule, but now we can't reuse the same TreeWalk in our newly-created SubmoduleWalk. So we have to just parse all those trees again. Oh well.

Line:380, org.eclipse.jgit/src/org/eclipse/jgit/submodule/SubmoduleWalk.java -> Done

-------------------------------------
author: Gerrit Code Review
date: 2012-06-15 18:41:57.000000000

Your change could not be merged due to a path conflict.

Please merge (or rebase) the change locally and upload the resolution for review.

-------------------------------------
