DESCRIPTION

Provide native lstat() via JNI

To avoid building or testing the native code, use

  mvn -Djgit.native.skip=true ...

to disable the code.  If the native library isn't available at
runtime, the native code is disabled automatically, and the root
cause exception is saved for inquiry by applications.

Currently only MacOS X (x86_64) and Linux (x86 and x86_64) are
supported.  Solaris and many other POSIX systems should be simple
to support from the existing common code, but require tweaking of
the libjgit_native build process.  Some placeholder code already
exists for FreeBSD/NetBSD/OpenBSD, as it is required to support
the desired Mac OS X target.

Skeleton plugins are supplied to host the native library within
the Eclipse ecosystem, but these contain no code as the library is
built from the common libjgit_native package.

Win32 support is more difficult as an lstat(2) replacement must
be supplied.  This is tricker than just wrapping lstat(2) as the
native Windows APIs need to be used, and their results translated
into the POSIX standard structure.

Bug: 331072
Change-Id: Iffb12334b5440d49b6d2623ceb91f4d873f217a0
Signed-off-by: Douglas Trujillo xxx@xxx.xxx
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Yoselin Hanna
date: 2010-12-15 03:51:07.000000000

Uploaded patch set 10.

-------------------------------------
author: Yoselin Hanna
date: 2010-12-15 04:27:03.000000000

Patch Set 10: Looks good to me, but someone else must approve

I think I am pretty happy with this version.  Since its so different from what Matthias offered earlier, I changed the author to myself so blame comes back at me when the inevitable bug gets filed with the project.  :-)

It would be nice if we could automatically disable the libjgit_native module from our build on platforms we don't yet support, but I don't know how to make Maven do that without driving myself insane.  I guess this is room for improvement in another commit.

We now use the platform default encoding for String->char* when making the lstat(2) call.  This is important because the UTF8 function Matthias was using before doesn't actually use valid UTF-8, its the fake Java UTf-8 that gets used when working with DataInputStream, or when symbol names in class files.  Unfortunately its more complicated because we need a utility function to call back into the JVM and invoke String.getBytes(), then copy from the returned byte[] into a char* obtained from malloc.

This is tested on both Mac OS X (10.6) and Linux and seems to work for both 32 bit and 64 bit JVMs on the latter.

Please review and post comments so we can get this change moving forward again.

-------------------------------------
