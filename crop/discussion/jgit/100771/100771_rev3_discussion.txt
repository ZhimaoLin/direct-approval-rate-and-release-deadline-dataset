DESCRIPTION

Implement atomic BatchRefUpdates for RefDirectory

The existing packed-refs file provides a mechanism for implementing
atomic multi-ref updates without any changes to the on-disk format or
lockfile protocol. We just need to make sure that there are no loose
refs involved in the transaction, which we can achieve by packing the
refs while holding locks on all loose refs. Full details of the
algorithm are in the PackedBatchRefUpdate javadoc.

Change-Id: I09829544a0d4e8dbb141d28c748c3b96ef66fee1


COMMENTS

author: Santos Moore
date: 2017-07-05 20:44:32.000000000

Uploaded patch set 3: Patch Set 2 was rebased.

-------------------------------------
author: Brenden Conley
date: 2017-07-05 20:58:26.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/10416/

-------------------------------------
author: Brenden Conley
date: 2017-07-05 21:27:05.000000000

Patch Set 3: Verified-1

Build Failed 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/10416/ : FAILURE

-------------------------------------
author: Brenden Conley
date: 2017-07-05 23:52:05.000000000

Patch Set 3: -Verified

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/10418/

-------------------------------------
author: Brenden Conley
date: 2017-07-06 00:04:27.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/10418/ : SUCCESS

-------------------------------------
author: Santos Moore
date: 2017-07-06 18:32:18.000000000

Patch Set 3: Code-Review-1

One thing I'm not sure about: what the expected behavior is/should be if we attempt to update a ref to a nonexistent object.

-------------------------------------
author: Douglas Trujillo
date: 2017-07-06 22:52:00.000000000

Patch Set 3:

(1 comment)

> One thing I'm not sure about: what the expected behavior is/should
 > be if we attempt to update a ref to a nonexistent object.

throw a MissingObjectException ?

Line:84, org.eclipse.jgit/src/org/eclipse/jgit/lib/BatchRefUpdate.java -> mark this xxx@xxx.xxx 4.9

-------------------------------------
author: Douglas Trujillo
date: 2017-07-06 22:52:15.000000000

Patch Set 3: Code-Review-1

-------------------------------------
author: Santos Moore
date: 2017-07-07 13:36:59.000000000

Patch Set 3:

(1 comment)

> (1 comment)
 > 
 > > One thing I'm not sure about: what the expected behavior
 > is/should
 > > be if we attempt to update a ref to a nonexistent object.
 > 
 > throw a MissingObjectException ?

Arguably. It could arguably also return REJECTED_MISSING_OBJECT. Unfortunately, the current non-atomic BatchRefUpdate implementation does neither of those; it returns REJECTED_OTHER_REASON. I will continue digging to see whether this is a bug or intended behavior.

Line:84, org.eclipse.jgit/src/org/eclipse/jgit/lib/BatchRefUpdate.java -> Done

-------------------------------------
author: Santos Moore
date: 2017-07-07 13:54:52.000000000

Patch Set 3:

> I will continue digging to see whether this is a bug or intended behavior.

It's hard to argue the current non-atomic behavior is correct:

* Updating a ref to point to a missing object results in "REJREJECTED_OTHER_REASON: lock error: Missing unknown deadbeefdeadbeefdeadbeefdeadbeefdeadbeef". Lock error? Really?
* Creating a ref pointing to a missing object succeeds(!)

I will fix the non-atomic case in a separate change, then make sure the atomic case has matching behavior.

-------------------------------------
author: Douglas Trujillo
date: 2017-07-07 14:33:28.000000000

Patch Set 3: -Code-Review

> > I will continue digging to see whether this is a bug or intended
 > behavior.
 > 
 > It's hard to argue the current non-atomic behavior is correct:
 > 
 > * Updating a ref to point to a missing object results in
 > "REJREJECTED_OTHER_REASON: lock error: Missing unknown
 > deadbeefdeadbeefdeadbeefdeadbeefdeadbeef". Lock error? Really?
 > * Creating a ref pointing to a missing object succeeds(!)
 > 
 > I will fix the non-atomic case in a separate change, then make sure
 > the atomic case has matching behavior.

yes I agree, the current behaviour looks wrong

-------------------------------------
author: Santos Moore
date: 2017-07-07 14:41:19.000000000

Patch Set 3:

> * Creating a ref pointing to a missing object succeeds(!)

Of course, also succeeds with a bare RefUpdate. Which is not surprising considering that BatchRefUpdate delegates to RefUpdate. But still...

-------------------------------------
