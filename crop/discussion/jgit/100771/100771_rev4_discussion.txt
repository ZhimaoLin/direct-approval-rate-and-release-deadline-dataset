DESCRIPTION

Implement atomic BatchRefUpdates for RefDirectory

The existing packed-refs file provides a mechanism for implementing
atomic multi-ref updates without any changes to the on-disk format or
lockfile protocol. We just need to make sure that there are no loose
refs involved in the transaction, which we can achieve by packing the
refs while holding locks on all loose refs. Full details of the
algorithm are in the PackedBatchRefUpdate javadoc.

Change-Id: I09829544a0d4e8dbb141d28c748c3b96ef66fee1


COMMENTS

author: Santos Moore
date: 2017-07-10 12:58:41.000000000

Uploaded patch set 4.

-------------------------------------
author: Brenden Conley
date: 2017-07-10 12:58:46.000000000

Patch Set 4:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/10451/

-------------------------------------
author: Santos Moore
date: 2017-07-10 12:59:56.000000000

Patch Set 4:

Fixed RefUpdate and non-atomic BatchRefUpdate earlier in the series to have more reasonable behavior, and fixed this change to match the behavior.

-------------------------------------
author: Brenden Conley
date: 2017-07-10 13:13:00.000000000

Patch Set 4: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/10451/ : SUCCESS

-------------------------------------
author: Ariel Sawyer
date: 2017-07-10 16:43:41.000000000

Patch Set 4: Code-Review+2

(3 comments)

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java -> Resolve before submitting.

Line:651, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> Fix whitespace

Line:1179, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> IIRC this create synthetic accessors, so we avoid using private on these nested classes.

-------------------------------------
author: Ariel Sawyer
date: 2017-07-10 16:43:58.000000000

Patch Set 4: Code-Review-1

-------------------------------------
author: Santos Moore
date: 2017-07-10 16:48:36.000000000

Patch Set 4:

(2 comments)

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java -> Agreed. Any thoughts/guidance from my reviewers? :)

Line:1179, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> I increased the visibility of the PackedRefList class so it's visible from PackedBatchRefUpdate. But I do not want this constant to be visible outside this .java file. I understand that the cost of this decision is a synthetic accessor method, but that doesn't seem like it's an actual problem in this case.

I mean, if it is really a problem, I can keep PackedRefList private and just move PackedBatchRefUpdate into RefDirectory. But I'd kinda rather not.

-------------------------------------
author: Santos Moore
date: 2017-07-10 16:52:34.000000000

Patch Set 4:

(1 comment)

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java -> If you ask me, I don't know why BatchRefUpdate#execute throws IOException at all. It makes it confusing for downstream callers to need to distinguish between unexpected errors that throw IOException and unexpected errors that set results on the ReceiveCommand. I am thinking of a couple places in code your team owns that has to deal with this exact problem :)

Frankly I think that the "throws IOException" is a license for implementers to be lazy and let basically every kind of IOException from the underlying storage propagate through. If we don't think that implementers should have a license to be lazy, maybe we should make it so execute can't throw (which is a backwards-incompatible change, sigh).

So what I've done here is to be lazy and not catch anything I don't have to.

-------------------------------------
author: Santos Moore
date: 2017-07-10 16:53:14.000000000

Patch Set 4:

(1 comment)

Line:1179, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> Or we could move NO_PACKED_REFS to a top-level private constant, would that be better?

-------------------------------------
author: Ariel Sawyer
date: 2017-07-11 15:23:29.000000000

Patch Set 4:

(3 comments)

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java -> It is unfortunate the contract isn't clear. I could see throwing IOExceptions on underlying storage system errors only, and setting status results for higher level git sequencing errors. But I think I agree with you that that is lazy. Any IOException thrown by the underlying layer should probably be caught and examined to see if it is recoverable or to better explain or sanitize the error.

Fixing that is an API change that is outside the scope of this change so I think you can just drop this comment.

Line:651, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> Fix whitespace.

Line:1179, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> Moving it out makes the intent that it is only referenced from this file more clear, imho.

-------------------------------------
author: Santos Moore
date: 2017-07-11 15:33:32.000000000

Patch Set 4:

(1 comment)

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java -> > It is unfortunate the contract isn't clear. I could see throwing
 > IOExceptions on underlying storage system errors only, and setting
 > status results for higher level git sequencing errors. But I think
 > I agree with you that that is lazy. Any IOException thrown by the
 > underlying layer should probably be caught and examined to see if
 > it is recoverable or to better explain or sanitize the error.
 
I'd be concerned that there is simply not very much that a low-level JGit library can do to inspect/sanitize arbitrary IOExceptions that might have come from someone else's storage system implementation. As a high-level application author you might have some idea, but you can't encode your application-specific ideas into JGit.

The one exception I can think of off the top of my head here is IOException from the LockFile methods, which are entirely due to the implementation details in this class.

 > Fixing that is an API change that is outside the scope of this
 > change so I think you can just drop this comment.

Thanks, will do.

-------------------------------------
author: Santos Moore
date: 2017-07-17 13:40:27.000000000

Patch Set 4:

I realized this doesn't implement reflogs. I'm tempted to just mention that in the commit message and add support in a followup; any objections?

-------------------------------------
author: Santos Moore
date: 2017-07-17 15:57:25.000000000

MISMATCHED INLINE COMMENT
Line:1179, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> Done

-------------------------------------
