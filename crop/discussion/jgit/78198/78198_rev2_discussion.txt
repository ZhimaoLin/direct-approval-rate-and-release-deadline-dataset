DESCRIPTION

Skip cleaning inner repositories by default in CleanCommand

Previously jgit would list git repositories that had not been committed
as untracked files, which would result in a non-recursive delete being
called on them, which would fail as they are directories. This commit
addresses that issue in the following ways.
First, repositories are now listed with untrackedFolders so that a
recursive delete will be used, which is appropriate. Second,
repositories are skipped in a default clean, similarly to cgit and only
cleaned when the force flag is applied. The force flag and setForce
method are added here to CleanCommand to support this change.

Bug: 498367
Change-Id: Ib6cfff65a033d0d0f76395060bf76719e13fc467
Signed-off-by: Dominique Spears xxx@xxx.xxx


COMMENTS

author: Dominique Spears
date: 2016-08-01 16:28:55.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2016-08-01 16:29:01.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8838/

-------------------------------------
author: Brenden Conley
date: 2016-08-01 16:38:21.000000000

Patch Set 2: Verified-1

Build Failed 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8838/ : FAILURE

-------------------------------------
author: Zachary Orozco
date: 2016-08-03 09:56:24.000000000

Patch Set 2: Code-Review-1

(2 comments)

Line:136, org.eclipse.jgit/src/org/eclipse/jgit/api/CleanCommand.java -> Maybe we should be more careful here. The git clean command doc says it will not clean folders which contain a file or folder named ".git". That's different from what we do here with "...isGitRepository()". Maybe we should do the same and check for the existance of .git only.

Could this detection of git repos also go into cleanPath()? A cleanPath(path,recurse,force,inFiles) could do all this.

Line:703, org.eclipse.jgit/src/org/eclipse/jgit/lib/IndexDiff.java -> Hmm, this is a change in our public API. We have been reporting untracked submodules always in getUntracked and I don't think we can change the API in a minor release. Other projects may rely on seeing submodules in getUntracked. GITLINKS (submodule) objects are tricky in this context: When GITLINKS are stored in the index or in trees then they are always leaves in the object hierarchy. There are no children of GITLINK objects when you look into index or trees. Only when looking at persistence in the filesystem we see them as trees. And therefore it would make sense to report untracked GITLINKS (untracked means they only exist in the filesystem) as directories, I agree. But since this would change the behaviour I would suggest to do fix this just in CleanCommand. If getUntracked reports a folder then check whether its a GITLINK and act accordingly.

-------------------------------------
author: Gerrit Code Review
date: 2016-08-07 13:37:48.000000000

Change has been successfully merged into the git repository by Zachary Orozco

-------------------------------------
