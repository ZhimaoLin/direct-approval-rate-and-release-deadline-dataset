DESCRIPTION

Add symlink support to JGit

The change includes comparing symbolic links between disk and index,
adding symbolic links to the index, creating/modifying links on
checkout. The behavior is controlled by the core.symlinks setting, just
as C Git does. When a new repository is created core.symlinks will be
set depending on the capabilities of the operating system and Java
runtime.

If core.symlinks is set to true, the assumption is that symlinks are
supported, which may result in runtime errors if this turs out not to
be the case.

Measuring the cost of jgit status on a repository with ~70000 files,
of which ~30000 are tracked reveals a penalty of about 10% for using
the Java7 (really NIO2) support module.

Bug: 354367
Change-Id: I12f0fdd9d26212324a586896ef7eb1f6ff89c39c


COMMENTS

author: Douglas Trujillo
date: 2013-05-04 00:19:01.000000000

Uploaded patch set 26.

-------------------------------------
author: Brenden Conley
date: 2013-05-06 10:05:15.000000000

Patch Set 26:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3511/ 

-------------------------------------
author: Brenden Conley
date: 2013-05-06 10:15:38.000000000

Patch Set 26: Verified

Build Successful 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/3511/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2013-05-16 07:35:21.000000000

Patch Set 26: (1 inline comment)

Looks ok to me on the first glimpse. But I am afraid that we really need more tests now. I can remember that in the implementation of merge,dircachecheckout I often made assumptions that there are only tree's and files. If it's not a tree then it will be a file. When we enhanced/introduced support for submodules (mode=GITLINK) we had some issues that the new mode. I expect a few issues also when we start now to create&support symlinks. This change does not only introduce a different way for checking whether something is a file, but it also changes jgit that it will now try to create real symlinks during checkout.

What happens now if we have conflicts between a symlink in the fs and a tree in the index during checkout? What happens when symlinks point outside the repo? Conflicts between two different symlinks between HEAD and MERGE during a merge. I can imagine that most of the stuff already works, but we need tests for that before starting to create symlinks.

I have some tests in mind and will propose them.

Line:17, /COMMIT_MSG -> s/turs/turns/

-------------------------------------
author: Juliet Cantu
date: 2013-05-16 17:58:43.000000000

Patch Set 26:

I agree we need more tests, lot of them, There are lots of opportunities for issues when a symlink is combined with another object. Before entering that path I want some agreeemant that the API looks ok. Writing tests may still reveal issues, but that's better than a NAK on the API forcing a rewrite of a ton of tests too.

Note that tests can be pushed on top of these patches....

-------------------------------------
