DESCRIPTION

Move WorkingTreeIterator inherited state into an object

Instead of copying up to 4 fields from the parent iterator each time a
child iterator is initialized and used, construct a single state
object that contains the 4 fields, and pass that one state object
through to the child.  This makes it easier to add additional state
fields that must be inherited, at the slight expense of an extra
object allocation per TreeWalk, and an extra level of field
indirection whenever the options, nameEncoder, or read buffer is
required by the iterator.

Change-Id: Ic4603c33b772d7a45f9c81140537d51945688fcb
Signed-off-by: Jaycee Hickman xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2010-11-19 08:24:10.000000000

Patch Set 1: (1 inline comment)

apart from one open question this looks ok.

Line:227, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> this method is replaced by IteratorState.initializeDigestAndReadBuffer() right? Why is the replacing method so much smaller? Don't we needed the if statement which i see here? This method even initialized a potentially present parent, the new method doesn't do. That's correct?

-------------------------------------
author: Yoselin Hanna
date: 2010-11-19 23:54:36.000000000

Change has been successfully merged into the git repository.

-------------------------------------
author: Yoselin Hanna
date: 2010-11-19 23:54:36.000000000

Patch Set 1: Looks good to me, approved; IP review completed

(1 inline comment)



Line:227, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> The replacing method doesn't need to initialize the parent, or copy the fields down from it because the IteratorState object is shared between the parent and all subiterators that are created from it.  So we only have to initialize once, and there is no copy down from the parent.

Thus, the code is simpler, but may be a bit slower for very flat trees, but may be a bit faster for deeper trees.  Java trees are very deep, and are very likely to be processed by JGit (due to its embedding in Eclipse), so the fact that we may be a bit faster for deeper trees (due to less copying and recursing during setup of the digest and buffer) means this simpler code is probably better anyway.  :-)

-------------------------------------
