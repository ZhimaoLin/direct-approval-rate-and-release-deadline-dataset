DESCRIPTION

Add a simple Logger for discarded exceptions

JGit discards a bunch of exceptions in internal code paths, but
sometimes these are useful to record.  Define a very simple wrapper
to allow JGit to usually discard these messages, but applications
can register to receive them in a debug setting if they really need
to see them.

We don't use java.util.logging here because we don't always want
to record these exceptions, and applications may or may not have
that logging system configured.  We also don't want to take a big
dependency in like sfl4j.

Change-Id: I69e755f58bc23d8218184aeed082607b5f7ca718


COMMENTS

author: Brenden Conley
date: 2011-11-08 22:52:37.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/996/ 

-------------------------------------
author: Brenden Conley
date: 2011-11-08 22:55:45.000000000

Patch Set 1: Build Successful

Build Successful 
 
https://hudson.eclipse.org/sandbox/job/jgit.gerrit/996/ : SUCCESS

-------------------------------------
author: Zachary Orozco
date: 2011-11-09 09:29:15.000000000

Patch Set 1: (1 inline comment)



Line:49, org.eclipse.jgit/src/org/eclipse/jgit/util/Logger.java -> I was struggeling a little bit to find out how a higher layer would make use of the Logger. I now know how they should do it, but i suggest that you at one small test where somebody registers his own Destination implementation. This would make it clear for potential users how they should use this class.

-------------------------------------
author: Juliet Cantu
date: 2011-11-10 07:06:43.000000000

Patch Set 1:

I think you should reconsider SLF4J

-------------------------------------
author: Yoselin Hanna
date: 2011-11-12 01:54:49.000000000

Patch Set 1:

My concern with SFL4J is "yet another dependency".

In general the JGit approach is to wrap and throw any underlying exception, so the caller can handle failure by doing whatever they want with it. I worry that a robust logging framework may cause us to get lazy and log the underlying exception, then throw, which is not the best experience to have from a library.

This stupid wrapper allows an embedder to catch a few exceptions that I would otherwise throw away, such as from a background thread that is doing pre-work that if not done would just be done by the real application thread and reported that way.

In particular I was using it because there was a runtime exception throwing out of DfsBlockCache on the ReadAheadTask code that I wanted to see. I am actually happier throwing away this change than I am about importing SFL4J.

-------------------------------------
author: Douglas Trujillo
date: 2011-11-12 12:55:04.000000000

Patch Set 1: (1 inline comment)

looks good, maybe we should put some note on how we want this to be used into the javadoc in order to guide contributors to use it only in the way you described

Line:71, org.eclipse.jgit/src/org/eclipse/jgit/util/Logger.java -> style nit: no braces around single line blocks

-------------------------------------
author: Juliet Cantu
date: 2011-11-13 19:31:37.000000000

Patch Set 1: I would prefer that you didn't submit this

We really cannot prevent developers from performing bad logging or exception handling by having our own logging framwork. If people find this utility then they'll do stupid things with it regardless of where it came from. We need eyeballing to catch those things. 

Having dependencies on stable code isn't that harmful. SLF4J has been around long enough for us to not get inte depdendency hell and having access to a logging framwork would be a good thing. I don't think re-coding applications
to know of yet another logging framework is very good. 

Given Shawn's preferences I'd say we'll drop this patch.

-------------------------------------
author: Yoselin Hanna
date: 2011-11-16 20:59:41.000000000

Patch Set 1: Abandoned

Dropping this.

-------------------------------------
