DESCRIPTION

Parse RevCommit bodies before calling RevFilter.include()

RevFilter.include()'s documentation promises the RevCommit's
body is parsed before include is invoked.  This wasn't always
true if the commit was parsed once, had its body discarded,
the RevWalk was reset() and started a new traversal.

Change-Id: Ie5cafde09ae870712b165d8a97a2c9daf90b1dbd


COMMENTS

author: Khalil Bernard
date: 2011-01-23 14:28:58.000000000

Uploaded patch set 2.

-------------------------------------
author: Juliet Cantu
date: 2011-01-23 15:39:58.000000000

Patch Set 2: I would prefer that you didn't submit this; IP review completed

(2 inline comments)



Line:1, org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkResetTest.java -> license header is missing

Line:51, org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkResetTest.java -> Test that it does the right thing, not just that it does not crash

-------------------------------------
author: Khalil Bernard
date: 2011-01-23 19:26:16.000000000

Patch Set 2: (1 inline comment)



Line:51, org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkResetTest.java -> The RevFilter above asserts if a commit without a parsed body is ever parsed to include().  RevWalk.next() doesn't state any requirement that the it returns a parsed commit.  However, I can go ahead and another check here as well to make sure that next() also provides a commit with a parsed body.

-------------------------------------
author: Yoselin Hanna
date: 2011-01-23 21:16:35.000000000

Patch Set 2: I would prefer that you didn't submit this

(1 inline comment)



Line:51, org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkResetTest.java -> What Robin means is, you need to test that the filter include ran:

  final AtomicBoolean filterRan = new AtomicBoolean();
  RevFilter testFilter = ... 
    assertNotNull(cmit.getRawBuffer());
    filterRan.set(true);


  filterRan.set(false);
  ... do the walk ...
  assertTrue("filter ran", filterRan.get());

This way the test fails if include() did not get invoked.

Also, I think you need to dispose of the commit in the first while loop, otherwise the test will still pass without your bug fix.

-------------------------------------
author: Khalil Bernard
date: 2011-01-24 16:40:32.000000000

Patch Set 2: (1 inline comment)



Line:51, org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/RevWalkResetTest.java -> Ah, that makes sense.

The problem I was running into was actually that PendingGenerator was disposing of commits marked as uninteresting.  Marking 'b' as uninteresting above and uncommenting my change to parse the commits would cause the test case to fail.

It would probably be good to also test explicitly disposing of commits as well.

-------------------------------------
