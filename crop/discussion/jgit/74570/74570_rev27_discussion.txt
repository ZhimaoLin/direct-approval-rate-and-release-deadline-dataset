DESCRIPTION

Preliminary implementation of option strings

Example usage:
$ ./jgit push --push-options xxx@xxx.xxx --push-options "<arbitrary string>" origin HEAD:refs/for/master

Change-Id: I6797e50681054dce3bd179e80b731aef5e200d77
Signed-off-by: Austin Swanson xxx@xxx.xxx


COMMENTS

author: Austin Swanson
date: 2016-06-29 22:16:41.000000000

Uploaded patch set 27.

-------------------------------------
author: Brenden Conley
date: 2016-06-29 22:16:48.000000000

Patch Set 27:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8585/

-------------------------------------
author: Brenden Conley
date: 2016-06-29 22:33:38.000000000

Patch Set 27: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8585/ : SUCCESS

-------------------------------------
author: Beau Terry
date: 2016-06-30 18:46:28.000000000

Patch Set 27:

(9 comments)

Line:295, org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackPushConnection.java -> leftover commented code?

Line:135, org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/PushOptionsTest.java -> How is the atomic expected to interfere with the push options? If we test with non atomic, would we also want to test with atomic set to true?

This is the only test that asserts the received push options to be equal as the sent options as the other tests all cover corner cases which either don't transmit push options or have an empty list? (We could check for the empty list below?)

Line:239, org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/PushOptionsTest.java -> This is testing the server advertising, but the client not using its capability?

Maybe testAdvertisedButUnusedPushOptions ?

Line:291, org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/PushOptionsTest.java -> Do we want to be explicit about the configuration by not relying on the default and turn off the push options?

Line:301, org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/PushOptionsTest.java -> omit this white space and put it in the same line as the assertNull ?

Line:161, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushProcess.java -> stray new line

Line:111, org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Push.java -> bikeshedding: We'd want to use the same option in JGit as well as C Git?

So for the long option I'd go with singular as we'd expect users/servers to want one option per given `--push-option`
For the short form Jonathan proposed 'o' for option.

Line:352, org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseReceivePack.java -> bike shedding: I'd suggest this to be receive.advertisePushOptions to be in sync with the C version (well technically there is no name for it yet, but there is receive.advertiseAtomic for example, so I'd keep a similar structure?)

Line:1116, org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseReceivePack.java -> Isn't this always true at this point?

-------------------------------------
author: Beau Terry
date: 2016-06-30 18:53:20.000000000

Patch Set 27:

(2 comments)

Line:7, /COMMIT_MSG -> This is not preliminary any more?

Line:9, /COMMIT_MSG -> Maybe mention a bit more on how it is implemented, why we want to implement it in JGit (so we can use it in Gerrit) ?

c.f. http://thread.gmane.org/gmane.comp.version-control.git/298632

-------------------------------------
author: Austin Swanson
date: 2016-07-07 00:52:36.000000000

Patch Set 27:

(11 comments)

Line:295, org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackPushConnection.java -> Done

Line:135, org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/PushOptionsTest.java -> Added another case for the behaviour of atomic pushes with options. I also had the @Before setUp() xxx@xxx.xxx tearDown() methods increment a counter (i++) and found that, indeed, they are run before and after every test case.

Line:239, org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/PushOptionsTest.java -> Done

Line:291, org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/PushOptionsTest.java -> Done

Line:301, org.eclipse.jgit.test/tst/org/eclipse/jgit/transport/PushOptionsTest.java -> Done

Line:161, org.eclipse.jgit/src/org/eclipse/jgit/transport/PushProcess.java -> Done

Line:111, org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Push.java -> Agree with respect to the long form and will change accordingly, but isn't -o already in use as an alias for the --only flag?

Line:352, org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseReceivePack.java -> So the line would read as follows?

allowPushOptions = config.getBoolean("receive", "advertisePushOptions", false);

I don't feel strongly about it either way, but wouldn't camelCase break the existing convention (e.g. "usedeltabaseoffset")?

Line:1116, org.eclipse.jgit/src/org/eclipse/jgit/transport/BaseReceivePack.java -> Done

Line:7, /COMMIT_MSG -> Done

Line:9, /COMMIT_MSG -> Besides implementation-specific details, should I reiterate your statements?

-------------------------------------
author: Beau Terry
date: 2016-07-07 01:20:15.000000000

Patch Set 27:

(1 comment)

Line:9, /COMMIT_MSG -> Well you can certainly do that, as it helps when digging through history (i.e. git blame and then git log to find out why a thing was solved in a specific way).

JGit commit messages seems to vary a lot, see `git log --grep=atomic` for some examples (sometimes a novel is written and sometimes only a bug number is referenced, so I guess a reference to maybe http://thread.gmane.org/gmane.comp.version-control.git/299001 or ideally when Junio picks it up and then reference a commit in git core would do.)

-------------------------------------
author: Gerrit Code Review
date: 2016-07-22 23:27:20.000000000

Change has been successfully merged into the git repository by Ariel Sawyer

-------------------------------------
