DESCRIPTION

PackWriter: Make thin packs more efficient

There is no point in pushing all of the files within the edge
commits into the delta search when making a thin pack.  This floods
the delta search window with objects that are unlikely to be useful
bases for the objects that will be written out, resulting in lower
data compression and higher transfer sizes.

Instead observe the path of a tree or blob that is being pushed
into the outgoing set, and use that path to locate up to WINDOW
ancestor versions from the edge commits.  Push only those objects
into the edgeObjects set, reducing the number of objects seen by the
search window.  This allows PackWriter to only look at ancestors
for the modified files, rather than all files in the project.
Limiting the search to WINDOW size makes sense, because more than
WINDOW edge objects will just skip through the window search as
none of them need to be delta compressed.

To further improve compression, sort edge objects into the front
of the window list, rather than randomly throughout.  This puts
non-edges later in the window and gives them a better chance at
finding their base, since they search backwards through the window.

These changes make a significant difference in the thin-pack:

  Before:
    remote: Counting objects: 144190, done
    remote: Finding sources: 100% (50275/50275)
    remote: Getting sizes: 100% (101405/101405)
    remote: Compressing objects: 100% (7587/7587)
    Receiving objects: 100% (50275/50275), 24.67 MiB | 9.90 MiB/s, done.
    Resolving deltas: 100% (40339/40339), completed with 2218 local objects.

    real    0m30.267s

  After:
    remote: Counting objects: 61549, done
    remote: Finding sources: 100% (50275/50275)
    remote: Getting sizes: 100% (18862/18862)
    remote: Compressing objects: 100% (7588/7588)
    Receiving objects: 100% (50275/50275), 11.04 MiB | 3.51 MiB/s, done.
    Resolving deltas: 100% (43160/43160), completed with 5014 local objects.

    real    0m22.170s

The resulting pack is 13.63 MiB smaller, even though it contains the
same exact objects.  82,543 fewer objects had to have their sizes
looked up, which saved about 8s of server CPU time.  2,796 more
objects from the client were used as part of the base object set,
which contributed to the smaller transfer size.

Change-Id: Id01271950432c6960897495b09deab70e33993a9
Signed-off-by: Jaycee Hickman xxx@xxx.xxx
Sigend-off-by: Malia Sampson xxx@xxx.xxx


COMMENTS

author: Malia Sampson
date: 2011-02-01 15:12:24.000000000

Uploaded patch set 2.

-------------------------------------
author: Malia Sampson
date: 2011-02-01 15:13:24.000000000

Patch Set 2: Looks good to me, approved; Build Successful; IP review completed

Looks good!

-------------------------------------
author: Malia Sampson
date: 2011-02-01 15:13:25.000000000

Change has been successfully merged into the git repository.

-------------------------------------
author: Yoselin Hanna
date: 2011-02-12 03:06:51.000000000

Patch Set 2:

I think this change breaks Gerrit Code Review when branch level permissions are used. IIRC, Gerrit uses ObjectWalk to enumerate the set of objects that would have been considered in the edge set for delta bases, but in this change I stripped that code out of ObjectWalk and moved it all into PackWriter. This prevents the client from using any file or tree as a delta base for a REF_DELTA, resulting in Gerrit rejecting the pack file.

I guess I need to decide if I should restore this behavior to ObjectWalk, or put it into Gerrit itself. Its unlikely an application needs the UNINTERESTING tree and blob objects, so its not really worth having in the core JGit library, and especially not by default given how expensive this is to compute. So it seems reasonable to me to require the application to contain this logic itself... and thus I need to fix Gerrit when I upgrade Gerrit to use a JGit 0.11.1 or later.

-------------------------------------
