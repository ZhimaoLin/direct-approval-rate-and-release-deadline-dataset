DESCRIPTION

DfsBlock: throw DataFormatException on 0 bytes

setInput should always push at least 1 byte into the Inflater.  If 0
bytes (or negative!) are being sent the DfsBlock is inconsistent with
the position passed in.  This indicates a severe programming problem
in the caller, and may cause an infinite loop in DfsReader.

Today we saw a handful of live examples of this but don't know what
the cause is.  Guard against this error condition and throw with a
more verbose failure, which may prevent an infinite loop.  Callers
will eventually catch DataFormatException and rethrow with more detail
about the object that cannot be inflated, with the DFE in the chain.

Change-Id: I64ed2a471520e48283675c6210c6db8a60634635


COMMENTS

author: Yoselin Hanna
date: 2016-06-02 04:50:15.000000000

Uploaded patch set 1.

-------------------------------------
author: Brenden Conley
date: 2016-06-02 04:50:23.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/8455/

-------------------------------------
author: Brenden Conley
date: 2016-06-02 04:59:34.000000000

Patch Set 1: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/8455/ : SUCCESS

-------------------------------------
author: Ariel Sawyer
date: 2016-06-02 14:50:01.000000000

Patch Set 1: Code-Review+2

This bug of Inflater.inflateBytes() not setting finished() when passed a zero-length array was reported in xxx@xxx.xxx and I verified that it is still a problem with OpenJDK 8.

-------------------------------------
author: Gerrit Code Review
date: 2016-06-02 14:58:11.000000000

Change has been successfully merged into the git repository by Yoselin Hanna

-------------------------------------
author: Santos Moore
date: 2016-06-02 15:17:47.000000000

Patch Set 1:

(1 comment)

Line:95, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsBlock.java -> Include the pack key too?

-------------------------------------
