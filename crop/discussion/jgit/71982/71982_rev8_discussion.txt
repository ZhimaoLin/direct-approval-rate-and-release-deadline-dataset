DESCRIPTION

Add support for builtin clean filters

JGit supports clean filters defined in repository configuration. The
filters are implemented as external programs filtering content by
accepting the original content (as seen in the working tree) on stdin
and which emit the filtered content on stdout. To run such a filter JGit
has to start an external process and pump data into/from this process.

This commit adds support for clean filters which are implemented
in Java and which are executed by jgit's main thread. When a filter is
defined in the configuration as
"jgit://builtin/<filterDriverName>/clean" then JGit will lookup in a
static map whether a filter is registered under this name. If found
such a filter is called to do the filtering.

The functionality in this commit requires that a program using JGit
explicitly calls the JGit API to register builtin implementations for
specific clean filters. In follow-up commits configuration parameters
will be added which trigger such registrations. Other commits will add
implementations for lfs filters.

Change-Id: I0344d3c54801c9a46e5a606c5df17e5f2e17b2be


COMMENTS

author: Zachary Orozco
date: 2016-09-07 11:50:04.000000000

Uploaded patch set 8.

-------------------------------------
author: Brenden Conley
date: 2016-09-07 13:30:40.000000000

Patch Set 8:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/9095/

-------------------------------------
author: Brenden Conley
date: 2016-09-07 13:57:54.000000000

Patch Set 8: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/9095/ : SUCCESS

-------------------------------------
author: Douglas Trujillo
date: 2016-09-07 23:04:03.000000000

Patch Set 8: Code-Review-1

(7 comments)

Line:142, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> filterCommandRegistry ?

Line:161, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> registerCommand is pretty generic, I suggest to rename this to registerFilterCommand ?

Line:162, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> why not 'factory' ?

Line:178, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> filterCommandName ?

Line:202, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> getFilterCommand

Line:471, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> why do we need this loop ?

Line:80, org.eclipse.jgit.test/tst/org/eclipse/jgit/util/FilterCommandsTest.java -> I think we add a blank line before the first method of anonymous classes

-------------------------------------
author: Zachary Orozco
date: 2016-09-08 16:33:40.000000000

Patch Set 8:

(7 comments)

Line:142, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> Done

Line:161, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> Done

Line:162, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> Done

Line:178, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> Done

Line:202, org.eclipse.jgit/src/org/eclipse/jgit/lib/Repository.java -> Done

Line:471, org.eclipse.jgit/src/org/eclipse/jgit/treewalk/WorkingTreeIterator.java -> Because implementors of FilterCommand.run() should not be forced to do all the filtering in one call to run(). Instead they can do filtering on chunks of data (e.g. they can do filtering by only on one line of data). They report that they have consumed all data by returning -1. This allows to implements chains of filters running over huge amount of data without big buffers or multiple threads.

Line:80, org.eclipse.jgit.test/tst/org/eclipse/jgit/util/FilterCommandsTest.java -> Done

-------------------------------------
author: Gerrit Code Review
date: 2016-09-20 09:34:51.000000000

Change has been successfully merged into the git repository by Douglas Trujillo

-------------------------------------
