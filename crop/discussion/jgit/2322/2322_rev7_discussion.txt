DESCRIPTION

RFC: Add graft/replace support

not working, but a hint of what I'm trying to do...

Grafts replace parent during history walking. Instead of using the
parents encoded in the commit, replacement are looked up in the
.git/info/grafts file.

The format of the grafts file is very simple. It consists of zero
or more lines of SHA-1's separated by spaces. The first SHA-1 is
a commit id and the rest is the new parents.

By default grafts and replacements are enabled. Callers that want
to not use grafts must use an instance of DelegatedRepository that
removes the replacements.

The parents that were reached using grafts are marked as such, ...think

Change-Id: Ia3b23f8d500a660b2fab99122015df7bcba8adcc
Signed-off-by: Juliet Cantu xxx@xxx.xxx


COMMENTS

author: Juliet Cantu
date: 2012-09-08 20:41:02.000000000

Uploaded patch set 7.

-------------------------------------
author: Brenden Conley
date: 2012-09-08 20:41:11.000000000

Patch Set 7:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2229/ 

-------------------------------------
author: Brenden Conley
date: 2012-09-08 20:41:34.000000000

Patch Set 7: Fails

Build Failed 

https://hudson.eclipse.org/sandbox/job/jgit.gerrit/2229/ : FAILURE

-------------------------------------
author: Yoselin Hanna
date: 2012-09-11 00:34:51.000000000

Patch Set 7: I would prefer that you didn't submit this

(5 inline comments)



Line:11, org.eclipse.jgit/src/org/eclipse/jgit/lib/Replacements.java -> I wouldn't even do this as a new interface; I would define this as new methods on ObjectDatabase that return empty collections by default, indicating the database doesn't support grafts or replace. Storage implementors can then override and provide support if they have it.

Line:14, org.eclipse.jgit/src/org/eclipse/jgit/lib/Replacements.java -> grafts in alternates aren't processed by git-core.

Line:24, org.eclipse.jgit/src/org/eclipse/jgit/lib/Replacements.java -> Map keys cannot be AnyObjectId. This would permit a MutableObjectId to be used as a Map key, which confuses the hell out of the Map when the value is modified.  :-)

Use instead an ObjectIdSubclassMap<ObjectReplacement> where ObjectReplacement is defined as something like:

  class ObjectReplacement extends ObjectIdSubclassMap.Entry {
    private final ObjectId replacementId;

    public ObjectId replacement() {
      return replacementId;
    }
  }

and then the cost is lower for a single replacement. Its not a full Map.Entry, its closer to just the ObjectId pair.

Line:79, org.eclipse.jgit/src/org/eclipse/jgit/lib/ObjectReader.java -> nit trailing space in javadoc, please use rebase --whitespace=fix to avoid these or enable removing trailing space in eclipse.

Line:20, /COMMIT_MSG -> This is silly. Grafts really only impact RevWalk/ObjectWalk. replace impacts what ObjectReader can return, since it provides a different content.

I would add new methods to RevWalk/ObjectWalk to disable the use of grafts. If a caller doesn't want grafts, they disable it on the walker before they begin walking with it.

A walker that has grafts enabled could implement grafts quickly by loading each graft line into a new RevCommit structure that has PARSED flag set and defines the parent list manually from the graft file. You still need to fault in the commit to get its tree and fill in the RevTree line too, but I guess that is a small price to pay for a graft. In general there shouldn't be many grafts so this should be relatively cheap to perform when grafts are enabled.

replace can be a flag on the ObjectReader, whether or not that specific reader instance honors refs/replace. It would default to true, but callers can disable it on their ObjectReader before they start to do an operation that wants the real data rather than the replaced data. When replace is enabled, the ObjectReader would need to see if the requested ObjectId is one of the things that has been replaced, and if so redirect to the other content. This should be a fast operation with an ObjectIdSubclassMap.

-------------------------------------
author: Juliet Cantu
date: 2012-09-11 01:32:15.000000000

Patch Set 7: (1 inline comment)



Line:20, /COMMIT_MSG -> The problem is that reader aren't created in one place, some of which are hard to get to in order to disable the replacement. That's which I attempted going into this direction just see if would work, but then I got overwhelmed.

Grafts are easy, they can be fixed in the walker alone (see first ttempt). The replace mechanism is needed in more places and we have  hierarchy of readers and shared readers (e.g. WindowCursor), the ObjectDatabase and so on that are not always a per caller instance.

I only need grafts, btw.

-------------------------------------
author: Juliet Cantu
date: 2012-09-11 02:03:19.000000000

Patch Set 7: (1 inline comment)



Line:20, /COMMIT_MSG -> Patch 4 was the last version on the original theme.

-------------------------------------
author: Yoselin Hanna
date: 2012-09-11 14:27:42.000000000

Patch Set 7: (1 inline comment)



Line:20, /COMMIT_MSG -> ps4 is better than ps7. :-)

-------------------------------------
author: Juliet Cantu
date: 2012-09-11 21:20:11.000000000

Patch Set 7: (1 inline comment)



Line:20, /COMMIT_MSG -> Good, that will probably relieve me of some insanity.

-------------------------------------
author: Juliet Cantu
date: 2012-09-19 22:29:25.000000000

Patch Set 7: (1 inline comment)



Line:24, org.eclipse.jgit/src/org/eclipse/jgit/lib/Replacements.java -> Hmm. Clever.. I think.

-------------------------------------
author: Elise Key
date: 2017-08-29 13:16:31.000000000

Abandoned

Abandoning after 1 year or more of inactivity.

If this change is still needed, please restore it.

-------------------------------------
