DESCRIPTION

Factor a base class out of ReceivePack

We are working on a publish/subscribe based git protocol, and we want to
reuse several parts of the ReceivePack-like code for reading commands
and processing a pack. In this new implementation, the connection
management will be very different, in particular, a there may be
multiple packs received on a single open connection. So, hoist out as
much as we can from ReceivePack, mostly just leaving behind the
single-connection version in that class.

Change-Id: I5567aad6ae77951f73f59c1f91996d934ea88334


COMMENTS

author: Brenden Conley
date: 2012-05-04 00:08:16.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/jgit.gerrit/1766/ 

-------------------------------------
author: Brenden Conley
date: 2012-05-04 00:12:17.000000000

Patch Set 1: Verified

Build Successful 
 
https://hudson.eclipse.org/sandbox/job/jgit.gerrit/1766/ : SUCCESS

-------------------------------------
author: Santos Moore
date: 2012-05-04 00:15:11.000000000

Patch Set 1:

I don't expect this to get checked in in the near future, but I wouldn't mind a sanity check of the interface.

That said, the "interface" of BaseReceivePack still feels a bit ad-hoc, and there is definitely implicit state that means you have to call methods very much in the correct order. In the future I might consider factoring out some smaller, less general-purpose classes like "CommandReader" and "PackStreamApplier" (terrible names but you get the point). So instead of sequencing calls to somewhat obtuse protected methods, implementations instead create a sequence of objects for performing certain tasks against their I/O streams. Thoughts?

-------------------------------------
author: Gerrit Code Review
date: 2012-05-14 18:40:43.000000000

Your change could not be merged due to a path conflict.

Please merge (or rebase) the change locally and upload the resolution for review.

-------------------------------------
