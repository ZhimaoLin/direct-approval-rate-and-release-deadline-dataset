DESCRIPTION

Add builder-style API to jgit and Commit & Log cmd

Added a new package org.eclipse.jgit.api and a builder-style API for
jgit. Added also the first implementation for two git commands: Commit
and Log.

This API is intendet to be used by external components when
functionalities of the standard git commands are required. It will also
help to ease writing JGit tests.

For internal usages this API may often not be optimal because the git
commands are doing much more than required or they expect parameters of
an unappropriate type.

Change-Id: I71ac4839ab9d2f848307eba9252090c586b4146b
Signed-off-by: Zachary Orozco xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2010-04-27 21:20:23.000000000

Uploaded patch set 4.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-27 23:34:26.000000000

Patch Set 4: I would prefer that you didn't submit this; No score

Yay, I'm pretty happy with this.  I'm down to style-nits and a question about how we should handle a 2nd call() invocation attempt.

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> If its used for only one invocation, we should have a defined behavior when its invoked a second time on the same instance.

By defined I mean, we either:

* Return the exact same RevCommit instance as we returned on the prior invocations.
* Throw a AlreadyCalledException which extends GitAPIException, and all other commands also throw this if invoked a second time.

Applications are going to try to run call() more than once.  Its a bug, but I can see applications making that mistake every once in a while.  We should help them figure out they have a problem earlier rather than later by failing-fast, or having predictable behavior (always produces the same prior result).

I think we're safer throwing an exception.

Line:118, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> "currently"?  We'll probably never support this.  I think it only makes sense to commit to HEAD through this API.  If you want to make a commit without touching HEAD, you probably should just use the lower-level library.

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit: Bad line wrapping here, can we put more words on this line beyond just "for" ?

Line:154, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Hmm.  This is more like a ConcurrentModificationException than it is a state exception.  Do we want our own subclass of the GitAPIException which denotes this particular type of concurrent modification against a branch?

Sorry I missed this earlier.

Line:41, org.eclipse.jgit/src/org/eclipse/jgit/api/GitAPIException.java -> Invented?  Or thrown?  I think thrown sounds better here.

Line:87, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> s/Commit/Log/ ?

Line:139, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> I still think these should use AnyObjectId as their parameter types.

-------------------------------------
author: Douglas Trujillo
date: 2010-04-27 23:58:12.000000000

Patch Set 4: No score; No score



Line:53, org.eclipse.jgit/src/org/eclipse/jgit/api/JGitInternalException.java -> s/and/an/

-------------------------------------
author: Zachary Orozco
date: 2010-04-28 15:04:02.000000000

Patch Set 4:

Again I had to change a little bit the structure to be able to process all comments. The main thing this time is the implementation of a check that you can't call call() and any setters when the command has been already invoked.

Nothing new other than that.

Line:89, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Throwing a GitAPIException from call() is easy. But what about our Setter- and Getter- Methods? Fail-fast strategy would ideally throw exceptions on every call to a setter() after the first invocation of call(). But of course I don't like to have every setter to throw an checked exception which everybody has to catch.

Either an checked exception during call() or an unchecked excpetion (e.g. IllegalStateException) during call(() and every setter. UncheckException can't be subclasses of JGitInternalException

I think I would prefer a IllegalStateException thrown everywhere.

How to implement that? Really pollute every setter? I had a talk with Sasa about this and he suggested dynamic proxies. The Git factory would produce dynmic proxies instead of directly handing out the Command instance. This would require to introduce an interface for every command.
An alternative would be byte-code modifications or really a superclass for all commands having a checkState method which has to be called by convention by every call() and setter.

I'll propose the last atlernative for now and play with the dynamic proxies until I know them. Switching later should not cause big interface changes.

Line:118, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> right - I'll remove the "currently"

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:154, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> added a specific exception for the LOCK_FAILURE return code. For all the other exceptions I wrap it into a JGitInternalException .

Line:53, org.eclipse.jgit/src/org/eclipse/jgit/api/JGitInternalException.java -> Done

Line:41, org.eclipse.jgit/src/org/eclipse/jgit/api/GitAPIException.java -> was not sure about that. From the point of an end-user our API throws more than GitAPIExceptions: UnmergedPathExceptions, ... . If "throwing" means that only those exceptions count that are instantiated in the API you are right. I'll change it to throwing

Line:87, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Done

Line:139, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Done

-------------------------------------
author: Yoselin Hanna
date: 2010-04-28 16:55:30.000000000

MISMATCHED INLINE COMMENT
Line:89, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> I disagree that we need to check the state on every setter method.

If the user modifies the command after they've invoked call(), they get whatever they get.  In the case of CommitCommand, nothing happens.  In the case of LogCommand, their RevWalk internally might get screwed up so the active Iterator returned from their Iterable might get screwed up.  But if they've completed the iteration, it might not be a problem.

Most people won't make the mistake of using a command twice, because they will invoke the setters in a single statement followed by call() and be done.  Since call() returns a type that isn't the command, its somewhat more difficult to invoke a setter and change the command after the call() was made.

But, if you think its better to fail-fast on the setters, I can go along with that.

If we fail-fast on the setters, yes, a RuntimeException like IllegalStateException is going to be better choice than a checked exception that extends from our GitAPIException type.

If we are going to fail-fast in the setters, the easier that is to program, the better, because authors will forget to put in the checkState() invocations.  So some sort of dynamic proxy might be a good idea.  But it means we have to write a public interface for the command, and then a private implementation class that implements the interface.  And Git just acts as a factory for the dynamic proxy.  This pattern may be a bit more work for the author than always calling checkState() in each setter method, but it is easier to ensure its working correctly.

Using Java's native Proxy class is portable without adding additional dependencies.  So I would start with that.  It may not be as fast or as efficient as doing compile-type byte-code modifications via AspectJ, or runtime code generation via ObjectWeb ASM.  But the Git API stuff isn't going to be performance critical for setting up a command object, so I think we can eat the reflection overhead right now.  Besides, if we ever were to change to a different implementation method, having the interface and implementation class would probably also be required there too, so switching would be easy.

-------------------------------------
