DESCRIPTION

Add builder-style API to jgit and Commit & Log cmd

Added a new package org.eclipse.jgit.api and a builder-style API for
jgit. Added also the first implementation for two git commands: Commit
and Log.

This API is intendet to be used by external components when
functionalities of the standard git commands are required. It will also
help to ease writing JGit tests.

For internal usages this API may often not be optimal because the git
commands are doing much more than required or they expect parameters of
an unappropriate type.

Signed-off-by: Zachary Orozco xxx@xxx.xxx


COMMENTS

author: Yoselin Hanna
date: 2010-04-22 18:38:57.000000000

Patch Set 1: I would prefer that you didn't submit this; No score

Plenty of good stuff with this change.  But I think I wound up with more questions than concrete suggestions in my comments below.

-------------------------------------
author: Juliet Cantu
date: 2010-04-22 19:00:18.000000000

Patch Set 1: No score; No score

I'd be inclined to put this into two new bundles

Line:118, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> style: extra parentheses

Line:136, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> There are also some exceptions thrown. Null is returned only when
the syntax is valid but not object is found.

Line:38, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> What's wrong with assertEquals?

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 20:54:21.000000000

Patch Set 1:

Robin, do you mean create a new api bundle, and a new api.test bundle?

I'm not.  I think most consumers of org.eclipse.jgit are going to want to use this API code.  So including it into the existing org.eclipse.jgit bundle has very little downside.

I guess my question is, what is the motivation for putting the api code into its own bundle?

-------------------------------------
author: Douglas Trujillo
date: 2010-04-23 08:10:45.000000000

Patch Set 1: No score; No score



-------------------------------------
author: Zachary Orozco
date: 2010-04-27 15:09:36.000000000

Patch Set 1:

sorry, I forgot to all my drafted answers to your comments. Although some of them may not be outdated I'll sent them now.

Line:48, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Done

Line:71, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> I agree. But I would like to do it in another Change. I'll propose a new one which offers commit() in the pgm package. (nearly 50 comments is enough for one change, :-) )

Line:79, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Done

Line:81, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Done

Line:105, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Done

Line:118, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Done

Line:125, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Done

Line:24, org.eclipse.jgit/META-INF/MANIFEST.MF -> Done

Line:70, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Done

Line:72, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Done

Line:83, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Done

Line:104, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> This return type has been changed back and forth when I started to write the test class. It was first an Iterable and test have been failing because I only received one single commit. Changed the code to use List. Found the bug (a missing addParent to the Commit() object .... and forgot to change the return type back to Iterable.

Line:112, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Done

Line:124, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> This LogCommand was not in my focus (I wanted to do the commit but found out it's hard to test without a log). Therefore I didn't inspected the APIs very well and concentrated only to support a "Log" without any parameters.
But after I looked at the RevWalk again I see that we can easily offer more of the functionality of RevWalk through this API. I'll add at least add() and not() and add(x,y) to support "Log A..B".
I am wondering whether we need a seperate class for RevisionSpecifications and RangeSpecifications. Otherwise we have to add special methods for specifying ranges in a lot of commands. I'll keep this in mind and implement it when I need it.

Line:136, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> setStart() is renamed to add(). And for now I decided not to support string based rev-specifications. This proposal get's too big otherwise.

Line:145, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> yes, I agree. I'll remove the getter(). With our addRange() and not() the return value would be too complicated.

Line:67, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:76, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:98, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> yes, you are right. Especially since the LogCommand also returns RevCommits we should return it here also.
Will do it

also the Callable interface will be done. I'll introduce an abstract superclass for all Commands fullfilling the Callable interface.

Line:100, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:108, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:111, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> ok, we should be able to commit on a detached head.

But I have to watch out that if the head is detached I should not try to to the RefUpdate stuff later, or?

Line:127, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:134, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:140, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:148, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:153, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:154, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> No, I don't want this behavior. I'll add a patch which will use PersonIdents which have a uptodate timestamp for every call.

Line:156, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:168, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:185, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:194, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Not anymore. I changed this javadoc so that it doesn't fit anymore.

Line:197, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Done

Line:206, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> you mean 

public CommitCommand setAuthor(String name, String email, long when, TimeZone tz)

correct? when should be a long when you have additionally the timezone.

I'll for know only add methods for author and commiter which expect name and email. The current time I'll recompute always in the call() method

Line:212, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Not anymore. I changed this javadoc so that it doesn't fit anymore.

Line:1, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> Done

Line:29, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> If this code would be just for us I would agree. But I wanted the section where I do the commits to be as less complicated as possible - minimize even references to local variables which a reader would have to lookup before he understands. I know that for doing the assertions I have non-optimal code with redundancies - but that was intentionally.

Line:35, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> changed the code so that I can use .equals()

Line:38, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> Done

Line:47, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> Done

Line:29, org.eclipse.jgit.test/META-INF/MANIFEST.MF -> Done ... and also added the missing "," in the previous line

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:48, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> You should insert a paragraph break at the end of the first sentence here.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:71, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> I think an important test of this API would be to add or port existing pgm classes over to use it.  We don't yet have a commit subcommand.  Maybe you can try adding it as part of this series to show how to use the CommitCommand, and to prove that the API can be used to simply perform the exact function its supposed to do.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:79, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Style-nit: You can use /** */ all on one line here.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:81, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Should be final.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:105, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> Style-nit: We don't put parens around return.  Thus:

  return new CommitCommand(this);

-------------------------------------
author: Douglas Trujillo
date: 2010-04-23 08:10:44.000000000

MISMATCHED INLINE COMMENT
Line:125, org.eclipse.jgit/src/org/eclipse/jgit/api/Git.java -> style: extra parentheses

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:24, org.eclipse.jgit/META-INF/MANIFEST.MF -> Can we sort this alphabetically with the other packages?

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:70, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Style-nit: Unnecessary blank line.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:72, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Should be final.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:83, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Style-nit: Might as well just use /** */ style Javadoc comment.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:104, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Do we *really* want to lock ourselves into the List concept as a result type here?  I suspect most users of this really just need an Iterable<RevCommit> so they can easily access it from a for loop iteration.  RevWalk already implements that.

If we do implement List here... we probably should try to be smart about it and make the list lazy to construct itself.  See RevCommitList for what I mean about that.  It probably doesn't fully implement the List API, and so has corner cases we would need to finish out.  But the general idea would be, don't materialize the entire result unless the caller forces us to with size(), or a get(int) call for the last element in the List.  Otherwise, materialize out only as far as they have asked for.

Sure, certain sorting types require us to materialize the whole thing first anyway.  But not all do.  And not all applications need us to materialize the entire thing in order to process the results.  Its why RevWalk uses Iterable as its main public interface.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:111, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Style-nit:  We avoid double method calls like this.  Instead:

  RevCommit c;
  while ((c = walk.next()) != null)
    ret.add(c);

or even:

  for (;;) {
    RevCommit c = walk.next();
    if (c != null)
      ret.add(c);
    else
      break;
  }

-------------------------------------
author: Douglas Trujillo
date: 2010-04-23 08:10:44.000000000

MISMATCHED INLINE COMMENT
Line:112, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> style: add blanks around operator

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:124, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> Hah.  As complicated as RevWalk is... its about as simple as you can get.  You are about to reinvent its API I think.

How about:

  public LogCommand add(ObjectId start) {
    return add(true, start);
  }

  /** Same as {@code --not start}, or {@code ^start}, or xxx@xxx.xxx add(false, start)}. */
  public LogCommand not(ObjectId start) {
    return add(false, start);
  }

  /* Adds the range xxx@xxx.xxx p..q}. */
  public LogCommand add(ObjectId p, ObjectId q) {
    return not(p).add(q);
  }

  public LogCommand add(boolean include, ObjectId start);

So we can translate an expression like:

  git log A ^B C

into Java as:

  log().add(A).add(false, B).add(C)

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:145, org.eclipse.jgit/src/org/eclipse/jgit/api/LogCommand.java -> This will never work, there's more going on than a single starting point.  It has to be at least a Set<ObjectId>, if not more verbose than that.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:67, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit: Unnecessary blank line.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:76, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Should be final.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:98, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Maybe we should always have commands implement a call() method and the java.util.concurrent.Callable interface.  It may help application developers to chain together commands with other platform APIs, especially things like a Future.

Also, do we really want to expose the Commit object to the caller?  I'm trying to get rid of it.  Maybe RevCommit is better since its immutable, and offers more functionality (e.g. parsing of footer lines).

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:100, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit:  We use Id not ID.  Also, this appears to be scoped only to the try block below.  In general we try to declare variables with the smallest scope required for their visibility.  Since its never used outside of the try, it should be declared within the try.

-------------------------------------
author: Douglas Trujillo
date: 2010-04-23 08:10:44.000000000

MISMATCHED INLINE COMMENT
Line:108, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> s/he/it/

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:111, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Why can't we commit on a detached HEAD?  Its supposed in C Git just fine.

I think you really just need to check that head != null here.  If its null, we're unable to continue and should throw.  But if its non-null we're OK and keep going.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:127, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit: Spaces around operator !=

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:134, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> If we use the RevCommit like I suggested above as the return type here we can generate the subject line from the RevCommit's getShortMessage method, rather than parsing this ourselves.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:140, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Do not force update.  This is almost always wrong, because it poses a race condition.

The correct code here is:

  ru.setExpectedOldObjectId(parentId);
  switch (ru.update()) {
  case NEW:
  case FAST_FORWARD:
    return commit;

  default:
    throw some exception, it failed
  }

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:148, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Probably should just use /** style javadoc comment here instead.

-------------------------------------
author: Douglas Trujillo
date: 2010-04-23 08:10:44.000000000

MISMATCHED INLINE COMMENT
Line:149, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> some verb is missing between "we" and "all"

maybe better : "Then validates that all required data has been provided."

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:153, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit: We avoid curly braces on single statements.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:154, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> So after the first invocation of run() we freeze the commit timestamp and never update it again?  We should document that behavior in the class docs, or at least in the run method.  Its not clear that you are doing that.

-------------------------------------
author: Douglas Trujillo
date: 2010-04-23 08:10:44.000000000

MISMATCHED INLINE COMMENT
Line:156, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> style: avoid curly brace around single statement

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:168, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit: We (lately) prefer xxx@xxx.xxx commit} over <code>commit</code> because it is less verbose, but produces the same style of output when formatted.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:169, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Its not this class, its specifically xxx@xxx.xxx this}.  I would just say:

 * @return xxx@xxx.xxx this}

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:185, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Please document how the committer is determined if set to null by this method.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:194, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit:  You can probably fit the entire /** */ on one line.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:197, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit: Unnecessary blank line.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:203, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Please document that author is defaulted to committer if set to null by this method.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:206, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> I think we should be nice and offer a couple of overloads here:

  public CommitCommand setAuthor(String name, String email)
  public CommitCommand setAuthor(String name, String email, Date when)
  public CommitCommand setAuthor(String name, String email, Date when, TimeZone tz)

Or

  public CommitCommand setAuthorName(String name)
  public CommitCommand setAuthorEmail(String email)
  public CommitCommand setAuthorDate(Date when)

so applications can more easily just assign the author.  Having to make a PersonIdent can be sort of annoying.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:212, org.eclipse.jgit/src/org/eclipse/jgit/api/CommitCommand.java -> Style-nit:  You can probably fit the entire /** */ on one line.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:1, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> Missing standard license header.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:29, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> Maybe set this up before you make the commits above, and use setMessage(expectedMessages[0]) to point to the first message?

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:35, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> Why not .equals() here?  The message code should be fully 8-bit clean with no edits being applied along this code path, right?  So the strings should be identical.

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:38, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> Style-nit: spaces around == operator.

-------------------------------------
author: Douglas Trujillo
date: 2010-04-23 08:10:44.000000000

MISMATCHED INLINE COMMENT
Line:46, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> typo: s/got/get/

-------------------------------------
author: Yoselin Hanna
date: 2010-04-22 18:38:56.000000000

MISMATCHED INLINE COMMENT
Line:47, org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CommitAndLogCommandTests.java -> Should we verify the message text is what we expect?

-------------------------------------
author: Douglas Trujillo
date: 2010-04-23 08:10:44.000000000

MISMATCHED INLINE COMMENT
Line:29, org.eclipse.jgit.test/META-INF/MANIFEST.MF -> style: could be sorted alphabetically by referenced package

-------------------------------------
