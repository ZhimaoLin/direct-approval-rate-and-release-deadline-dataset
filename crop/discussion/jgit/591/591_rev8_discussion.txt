DESCRIPTION

Add builder-style API to jgit and Commit & Log cmd

Added a new package org.eclipse.jgit.api and a builder-style API for
jgit. Added also the first implementation for two git commands: Commit
and Log.

This API is intended to be used by external components when
functionalities of the standard git commands are required. It will also
help to ease writing JGit tests.

For internal usages this API may often not be optimal because the git
commands are doing much more than required or they expect parameters of
an unappropriate type.

Change-Id: I71ac4839ab9d2f848307eba9252090c586b4146b
Signed-off-by: Zachary Orozco xxx@xxx.xxx


COMMENTS

author: Zachary Orozco
date: 2010-05-05 13:54:01.000000000

Uploaded patch set 8.

-------------------------------------
author: Zachary Orozco
date: 2010-05-05 14:25:16.000000000

Patch Set 8: Looks good to me, but someone else must approve; IP review completed

just fixed a typo in commit message.

Robin, regarding your comments:
The methods setCallable() and checkCallable() are intentionally "protected". User's of this API are not allowed to use these methods.
But, since they are protected I was forced to officially javadoc them. Therefore they now are visible in our JavaDocs for this API. By making them package-private (no modifier instead of protected) I would be allowed to not even document them. Your opinion?

Regarding the comments which Exceptions are thrown: I like that with the current implementation the developer who is doing a commit() is forced to handle a different set of exceptions then the developer doing a log() and none of them has to catch java.lang.Exception. Look at this code:

public void test2() throws JGitInternalException {
	Git git = new Git(db);
	try {
		git.log().call();
	} catch (NoHeadException e) {
	}

	try {
		git.commit().call();
	} catch (NoHeadException e) {
	} catch (NoMessageException e) {
	} catch (UnmergedPathException e) {
	} catch (ConcurrentRefUpdateException e) {
	}
}

Would you prefer a API which "throws Exception"?

-------------------------------------
author: Juliet Cantu
date: 2010-05-05 20:13:40.000000000

Patch Set 8: No score; No score

If external subclasses do not need to call it, make it package private. If some users outside the package needs to call it you need to open it up and using protected (in this case) and document the restriction. At least eclipse has a numbner of xxx@xxx.xxx for this purpose.

Regardless of whether it is part of the API, it should be documented since it is used in so many places.

About the exceptions you are probably mostly right, exception for "internal" in the name. If it is truly an "ouch, something bad that we have no idea about what it is", it should be a RuntimeException and not a checked one.

-------------------------------------
