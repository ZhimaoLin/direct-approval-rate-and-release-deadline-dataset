DESCRIPTION

Add BlobObjectChecker

Some repositories can have a policy that do not accept certain blobs. To
check if the incoming pack file contains such blobs, ObjectChecker can
be used. However, this ObjectChecker is not called by PackParser if the
blob is stored as a whole. This is because the object can be so large
that it doesn't fit in memory.

This change introduces BlobObjectChecker. This interface takes chunks of
a blob instead of the entire object. ObjectChecker can optionally return
a BlobObjectChecker. This won't change existing ObjectChecker
implementation; existing implementation continues to receive deltified
blob objects only.

Change-Id: Ic33a92c2de42bd7a89786a4da26b7a648b25218d
Signed-off-by: Sandra Garrison xxx@xxx.xxx


COMMENTS

author: Sandra Garrison
date: 2017-08-10 06:54:13.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2017-08-10 06:54:20.000000000

Patch Set 2:

Build Started https://ci.eclipse.org/jgit/job/jgit.gerrit/10943/

-------------------------------------
author: Brenden Conley
date: 2017-08-10 07:06:58.000000000

Patch Set 2: Verified+1

Build Successful 

https://ci.eclipse.org/jgit/job/jgit.gerrit/10943/ : SUCCESS

-------------------------------------
author: Douglas Trujillo
date: 2017-08-23 21:51:58.000000000

Patch Set 2:

(6 comments)

add a test demonstrating how to plugin a custom BlobObjectChecker

Line:1081, org.eclipse.jgit/src/org/eclipse/jgit/lib/ObjectChecker.java -> mark new API xxx@xxx.xxx 4.9

Line:1082, org.eclipse.jgit/src/org/eclipse/jgit/lib/ObjectChecker.java -> how does this create a new BlobObjectChecker ?

Line:1, org.eclipse.jgit/src/org/eclipse/jgit/lib/BlobObjectChecker.java -> missing license header

Line:11, org.eclipse.jgit/src/org/eclipse/jgit/lib/BlobObjectChecker.java -> mark new API xxx@xxx.xxx 4.9

Line:31, org.eclipse.jgit/src/org/eclipse/jgit/lib/BlobObjectChecker.java -> name "p" doesn't provide any hint what's the meaning of this parameter, how about "o" or "offset" ?

Line:34, org.eclipse.jgit/src/org/eclipse/jgit/lib/BlobObjectChecker.java -> length of the fragment to check

-------------------------------------
author: Douglas Trujillo
date: 2017-08-23 21:52:07.000000000

Patch Set 2: Code-Review-1

-------------------------------------
author: Sandra Garrison
date: 2017-08-24 00:35:45.000000000

Patch Set 2:

(6 comments)

Test added. Real BlobObjectCheckers would buffer the input to some extent to do something similar to java.util.Scanner#findWithinHorizon.

Line:1081, org.eclipse.jgit/src/org/eclipse/jgit/lib/ObjectChecker.java -> Done

Line:1082, org.eclipse.jgit/src/org/eclipse/jgit/lib/ObjectChecker.java -> This is actually tricky part.

If we return a new BlobObjectChecker that does nothing, then in this file's L362, we cannot tell if we should use this BlobObjectChecker or call checkBlob for backward-compatibility. (If it's OK to call both, then we can return an empty BlobObjectChecker).

If we try to create a new BlobObjectChecker that calls checkBlob, checkBlob would receive partial blobs at best. This breaks backward-compatibility.

Both cases have a problem. By making this return Optional (or null), we can make this class backward-compatible and can avoid calling botch checkBlob and BlobObjectChecker.

Line:1, org.eclipse.jgit/src/org/eclipse/jgit/lib/BlobObjectChecker.java -> Done

Line:11, org.eclipse.jgit/src/org/eclipse/jgit/lib/BlobObjectChecker.java -> Done

Line:31, org.eclipse.jgit/src/org/eclipse/jgit/lib/BlobObjectChecker.java -> Done

Line:34, org.eclipse.jgit/src/org/eclipse/jgit/lib/BlobObjectChecker.java -> Done

-------------------------------------
author: Sandra Garrison
date: 2017-08-28 15:46:30.000000000

MISMATCHED INLINE COMMENT
Line:1082, org.eclipse.jgit/src/org/eclipse/jgit/lib/ObjectChecker.java -> Done

-------------------------------------
author: Ariel Sawyer
date: 2017-08-26 01:50:40.000000000

MISMATCHED INLINE COMMENT
Line:1082, org.eclipse.jgit/src/org/eclipse/jgit/lib/ObjectChecker.java -> JGit predates using Optional this way. I think just returning null here and adding comments that null means "there is no new-fangled BlobObjectChecker, continue using the old style object checker" is more in keeping with the rest of the library.

-------------------------------------
