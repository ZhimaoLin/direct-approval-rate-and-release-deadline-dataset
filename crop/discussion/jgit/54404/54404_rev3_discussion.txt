DESCRIPTION

RefDirectory: support for custom ref search paths

Allows to add a custom search path for the HEAD ref which is
required to support the new Git 2.5 worktree feature.

Change-Id: Ie6235a503591ab42b2eb55142ad3932394b40b71
Signed-off-by: Saniya Hill xxx@xxx.xxx


COMMENTS

author: Saniya Hill
date: 2015-11-03 10:52:29.000000000

Uploaded patch set 3.

-------------------------------------
author: Brenden Conley
date: 2015-11-03 10:52:36.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/jgit/job/jgit.gerrit/7368/

-------------------------------------
author: Brenden Conley
date: 2015-11-03 11:01:27.000000000

Patch Set 3: Verified+1

Build Successful 

https://hudson.eclipse.org/jgit/job/jgit.gerrit/7368/ : SUCCESS

-------------------------------------
author: Douglas Trujillo
date: 2015-12-15 10:12:39.000000000

Patch Set 3: Code-Review+1

-------------------------------------
author: Eden Lin
date: 2015-12-16 21:57:40.000000000

Patch Set 3: Code-Review-1

(1 comment)

Sorry for the slow review. I'm not sure I understand what this change does yet. An example in the commit message would help.

Line:222, org.eclipse.jgit/src/org/eclipse/jgit/lib/RefDatabase.java -> Are these semantics different in the RefDirectory subclass? Maybe the doc comment should say "of the search path".

-------------------------------------
author: Eden Lin
date: 2015-12-16 22:07:10.000000000

Patch Set 3:

(6 comments)

Line:86, org.eclipse.jgit/src/org/eclipse/jgit/lib/RefDatabase.java -> What is a gitRoot? Other javadoc comments don't use that term.

Line:138, org.eclipse.jgit/src/org/eclipse/jgit/lib/BaseRepositoryBuilder.java -> nit: s/refSearchPaths/refSearchPath/

Line:350, org.eclipse.jgit/src/org/eclipse/jgit/lib/BaseRepositoryBuilder.java -> Likewise.

Line:147, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> nit: s/refSearchPaths/refSearchPath/

Even though there are multiple pathnames in a search path, common usage is to refer to the entire collection in the singular (see for example https://gcc.gnu.org/onlinedocs/cpp/Search-Path.html).

Line:178, org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java -> Likewise.

Line:10, /COMMIT_MSG -> Can you explain this further? Looking at the git-worktree manpage, it looks like that feature works similarly to GIT_OBJECT_DIR --- it changes the path to the packed-refs file and the directory containing all refs, not the list of prefixes by which refnames are implicitly expanded when looking them up. In the context of JGit, it should affect both exactRef and getRef.

Did you mean the gitnamespaces feature? (That also doesn't change the SEARCH_PATH behavior, but it prepends all ref lookups with a common string, which is a little closer.)

-------------------------------------
author: Eden Lin
date: 2015-12-16 22:42:12.000000000

Patch Set 3:

(1 comment)

Line:9, /COMMIT_MSG -> Ah, that is what I was missing before.

Quick thoughts:
- this is supposed to be for lookups of HEAD, FETCH_HEAD, etc and not apply to ref lookups under refs/. See [1] for a list describing which files are shared between worktrees.
- one good place to handle it would be in fileFor:

 if (name.startsWith(R_REFS)) {
   ...
 }
 if (worktreeHome != null) {
   return new File(worktreeHome, name);
 }
 return new File(gitDir, name);

That way, if I run

 git clone https://example.com/something
 git worktree add ../something-wt2
 cd ../something-wt2

then jgit will read HEAD from ../something/.git/worktrees/something-wt2/HEAD instead of being confused by ../something/.git/HEAD that it finds earlier in the search path.

Other files read from the git directory ('config', etc) would need the same treatment. That can happen in separate changes --- this is a fine place to start.

[1] https://kernel.googlesource.com/pub/scm/git/git/+/b1cda70fff23/path.c#94

-------------------------------------
author: Saniya Hill
date: 2015-12-21 16:07:58.000000000

Patch Set 3:

(1 comment)

Line:9, /COMMIT_MSG -> Thanks, Jonathan, for your ideas and pointers. So I think my first approach was conceptually wrong. For patch set #4, I've changed code to the way Git works (at least as I understand):

Repository.gitDir will now be .git/worktree/foo and there is an additional Repository.gitCommonDir which should be used according to the definition from your reference [1].

The patch already works fine for resolving HEAD and refs/-refs and solves issues with reading MERGE_HEAD, ... I've deprecated Repository.getDirectory() which should be replaced by Repository.getGitDir() for which you will *always* have to specify whether the gitCommonDir should be considered. Does that make sense?

-------------------------------------
