DESCRIPTION

Remove unnecessary inflate stride in DfsBlock

OpenJDK 7 does not benefit from using an inflate stride on the input
array. The implementation of java.util.zip.Inflater supplies the
entire input byte[] to libz, with no regards for the bounds supplied.
Slicing at 512 byte increments in DfsBlock no longer has any benefit.

In OpenJDK 6 the native portion of Inflater used GetByteArrayRegion
to obtain a copy of the input buffer for libz. In this use case
supplying a small stride made sense, it avoided allocating space
for and copying data past the end of the object's compressed stream.

In OpenJDK 7 the native code uses GetPrimitiveArrayCritical,
which tries to avoid copying by freezing Java garbage collection
and accessing the byte[] contents in place. On OpenJDK 7 derived
JVMs it is likely more efficient to supply the entire DfsBlock.

Since OpenJDK 5 and 6 are deprecated and replaced by OpenJDK 7
it is reasonable to suggest any consumers running JGit with DFS
support use an OpenJDK 7 derived JVM. However, JGit still targets
local filesystem support on Java 5, so it is still not reasonble to
apply this same simplification to the internal.storage.file package.

See: JDK bug 6751338
Change-Id: Ib248b6d383da5c8aa887d9c355a0df6f3e2247a5


COMMENTS

author: Yoselin Hanna
date: 2013-09-04 21:53:56.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2013-09-04 21:54:01.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/egit/job/jgit.gerrit/3985/

-------------------------------------
author: Brenden Conley
date: 2013-09-04 22:02:23.000000000

Patch Set 2: Verified+1

Build Successful 

https://hudson.eclipse.org/egit/job/jgit.gerrit/3985/ : SUCCESS

-------------------------------------
