DESCRIPTION

Support symbolic references in ReceiveCommand

Allow creating symbolic references with link, and deleting them or
switching to ObjectId with unlink.  How this happens is up to the
individual RefDatabase.

The default implementation detaches RefUpdate if a symbolic reference
is involved, supporting these command instances on RefDirectory.
Unfortunately the packed-refs file does not support storing symrefs,
so atomic transactions involving more than one symref command are
failed early.

Updating InMemoryRepository is deferred until reftable lands, as I
plan to switch InMemoryRepository to use reftable for its internal
storage representation.

Change-Id: Ibcae068b17a2fc6d958f767f402a570ad88d9151


COMMENTS

author: Yoselin Hanna
date: 2017-08-31 00:47:45.000000000

Uploaded patch set 7: Patch Set 6 was rebased.

-------------------------------------
author: Brenden Conley
date: 2017-08-31 01:01:05.000000000

Patch Set 7:

Build Started https://ci.eclipse.org/jgit/job/jgit.gerrit/11236/

-------------------------------------
author: Brenden Conley
date: 2017-08-31 01:19:15.000000000

Patch Set 7: Verified+1

Build Successful 

https://ci.eclipse.org/jgit/job/jgit.gerrit/11236/ : SUCCESS

-------------------------------------
author: Ariel Sawyer
date: 2017-09-05 17:10:09.000000000

Patch Set 7: Code-Review-1

(5 comments)

Line:390, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> We aren't asserting NonNull for name anywhere, but should we? I imagine it just blows up currently if null is passes so I don't think it is a functional API change.

Line:396, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> Either update the Javadoc to state this is another path to delete a non-symbolic reference or assert that newSymRef != null and drop this case. I prefer the latter.

Line:426, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> Similar concern here, the original ctors should work for any deletion, maybe just use these for their currently documented intents.

Line:454, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> Defining switching a symbolic ref's target to include creation and deletion feels like a natural API, so this is fine, but update the JavaDoc above to reflect it.

Line:656, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> This is counter to my intuition. We might be detaching a ref if oldSymRef != null && (type == DELETE || newSymRef == null). Can you add some comments or fix this?

-------------------------------------
author: Kash Ewing
date: 2017-10-03 02:03:14.000000000

MISMATCHED INLINE COMMENT
Line:390, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> Done

-------------------------------------
author: Kash Ewing
date: 2017-10-03 02:03:14.000000000

MISMATCHED INLINE COMMENT
Line:396, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> In existing constructors, newObjectId == zeroId() means DELETE.  Updated the javadoc.

-------------------------------------
author: Kash Ewing
date: 2017-10-03 02:03:14.000000000

MISMATCHED INLINE COMMENT
Line:426, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> Same as above.

-------------------------------------
author: Kash Ewing
date: 2017-10-03 02:03:14.000000000

MISMATCHED INLINE COMMENT
Line:454, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> Same, updated javadoc.

-------------------------------------
author: Kash Ewing
date: 2017-10-03 02:03:14.000000000

MISMATCHED INLINE COMMENT
Line:656, org.eclipse.jgit/src/org/eclipse/jgit/transport/ReceiveCommand.java -> detach = switch to new symref or deletion.

-------------------------------------
