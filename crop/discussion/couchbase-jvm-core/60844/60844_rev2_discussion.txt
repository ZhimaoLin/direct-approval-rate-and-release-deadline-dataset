DESCRIPTION

JVMCBC-300: Use voidPromise to save allocations on netty write.

Motivation
----------
Originally the code had a listener in place which would log unknown
failures on write. This is convenient, but in the "good" case it adds
unnecessary allocations on every request. On a 5 minute run with 10k ops/s
this is around 100MB.

Modifications
-------------
This changeset gets rid of the listener and uses the voidPromise to avoid
the costly promise allocations which are not used anymore. Note that we are
not actually loosing any information, since all exceptions will be logged
and properly handled in the AbstractGenericHandler#exceptionCaught method.

It is also necessary to change the idle state handlers from "read and write"
to just "read" timeouts since on write it is performing the refreshing with
a write callback. For the purposes of the SDK it does not make a difference
if we just check on read, since we always have a request -> response flow
(and are not just blindly writing or only listening).

Result
------
Less allocations on the hot code path.

Change-Id: Icab64e98a91927028875e5c4dbc1b3e31e5d4394
Reviewed-on: http://review.couchbase.org/60844
Tested-by: Natasha Sullivan xxx@xxx.xxx
Reviewed-by: Cory Peck xxx@xxx.xxx
Reviewed-by: Estrella Humphrey xxx@xxx.xxx


COMMENTS

author: Gerrit Code Review
date: 2016-03-03 11:07:59.061000000

Change has been successfully cherry-picked as 6939e39eef71a28f82023036d407075e58295882

-------------------------------------
