DESCRIPTION

Workaround to enable linking multiple resources to HistoryView

When given a selection the GenericHistoryView only considers the first
element and adapts it to an IResource before passing it on as input. To
work around this behavior the GitHistoryPage now tracks the current
selection itself and uses it as input if preferable.

Bug: 392948
Signed-off-by: Ronin Harrell xxx@xxx.xxx
Signed-off-by: Karter Mora xxx@xxx.xxx
Signed-off-by: Maleah Marks xxx@xxx.xxx
Signed-off-by: Corbin Edwards xxx@xxx.xxx
Signed-off-by: Maren Gonzales xxx@xxx.xxx
Signed-off-by: Denise Bennett xxx@xxx.xxx
Change-Id: Idd3f2434881085d90a547f825fb20ba8895b7e79

COMMENTS

author: Denise Bennett
date: 2017-04-24 07:41:04.000000000

Uploaded patch set 15.

-------------------------------------
author: Brenden Conley
date: 2017-04-24 07:41:10.000000000

Patch Set 15:

Build Started https://hudson.eclipse.org/egit/job/egit.gerrit/9752/

-------------------------------------
author: Alayna Houston
date: 2017-04-24 07:55:02.000000000

Patch Set 15: Code-Review+1

> You are right, the behavior between the staging view and history
 > view is now slightly different, but should probably be adapted in a
 > separate change. Do you want to keep it in the same bug or in a new
 > bug specific to the staging view?
 
Separate bug (enhancement; actually more like "cleanup", but that doesn't exist in Bugzilla...). I'm not sure both can use the same underlying mechanism, but they should IMO have the same UI behavior as observable by the end-user.

 > I also changed the method visibility to 'private' to be in line
 > with the other methods. I tend to make helper methods, e.g., just
 > getting the selection, protected to be more extensible. But you are
 > right, in this case it is not necessary since no one will subclass
 > this class and we do not use the methods anywhere else.

I generally tend to use the most restrictive visibility. In API classes that are designed to be extended, I usually use protected for internal helper methods that could reasonably be overridden, and private for others. Otherwise I usually use private if possible. Especially in EGit UI, which has no public API. If the need to override such a private method arises later, it can still be changed to protected. In really performance-critical code, using public sometimes may be necessary to avoid synthetic method being generated. But that's just my personal informal guidelines.

-------------------------------------
author: Brenden Conley
date: 2017-04-24 08:04:06.000000000

Patch Set 15: Code-Review-1

Build Unstable 

https://hudson.eclipse.org/egit/job/egit.gerrit/9752/ : UNSTABLE

-------------------------------------
author: Alayna Houston
date: 2017-04-24 08:17:50.000000000

Patch Set 15:

> Build Unstable
 > 
 > https://hudson.eclipse.org/egit/job/egit.gerrit/9752/ : UNSTABLE

You need to rebase this onto latest origin/master. See https://git.eclipse.org/r/#/c/95507/ for the reason.

-------------------------------------
