DESCRIPTION

Improve support for logical models in Compare With operation

When comparing a file with another branch, tag or reference, take the
model providers into account and launch the synchronize perspective
instead of comparing the single, selected file into a compare editor
if this file is part of a model spanning more than one resource.

Bug: 393225
Change-Id: Id113b941afa44109b899c17957baa053bd75158f
Signed-off-by: Rocco Fowler xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2012-11-07 09:13:31.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/egit.gerrit/3561/ 

-------------------------------------
author: Brenden Conley
date: 2012-11-07 09:43:54.000000000

Patch Set 1: Fails

Build Failed 

https://hudson.eclipse.org/sandbox/job/egit.gerrit/3561/ : ABORTED

-------------------------------------
author: Danika Greer
date: 2012-11-07 13:27:42.000000000

Patch Set 1: I would prefer that you didn't submit this

(4 inline comments)

See inline comments.

General comments:

- Please add missing copyright statements according to this: http://www.eclipse.org/legal/copyrightandlicensenotice.php

- I see you did some changes, please add yourself as "Also-by: ..." to the commit message trailer.

- Please remove the unrelated formatting changes.

- Is there an easy way to test this with standard Eclipse? I've never used the modeling stuff before.

Line:722, org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/actions/RepositoryActionHandler.java -> Style nit: We don't use braces for simple single-line blocks.

Line:225, org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/synchronize/GitModelSynchronizeParticipant.java -> Please separate the changes from this file into a separate change with a commit message which explains why this is to be removed.

Line:64, org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/synchronize/GitChangeSetModelProvider.java -> This was also in a separate patch in the bug report, right? Please also move that to a separate change and explain why it's done.

Line:162, org.eclipse.egit.core/src/org/eclipse/egit/core/internal/util/ResourceUtil.java -> Style nit: We don't use braces for simple single-line blocks.

-------------------------------------
author: Douglas Trujillo
date: 2012-11-07 22:58:43.000000000

Patch Set 1: Unclean IP, do not check in

we need Laurent to assert the contribution questions [1] since he is the author and not a committer

[1] http://wiki.eclipse.org/EGit/Contributor_Guide#Legal_Paperwork

-------------------------------------
author: Brenden Conley
date: 2012-11-08 07:18:41.000000000

Patch Set 1:

Build Started https://hudson.eclipse.org/sandbox/job/egit.gerrit/3567/ 

-------------------------------------
author: Brenden Conley
date: 2012-11-08 07:35:25.000000000

Patch Set 1: I would prefer that you didn't submit this

Build Unstable 

https://hudson.eclipse.org/sandbox/job/egit.gerrit/3567/ : UNSTABLE

-------------------------------------
author: Rocco Fowler
date: 2012-11-08 12:16:46.000000000

Patch Set 1: (1 inline comment)

See in-line comment for GitModelSynchronizeParticipant.

Line:225, org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/synchronize/GitModelSynchronizeParticipant.java -> Is there an easy way to do this via Gerrit? I'm afraid that I'll end up in rebase hell when trying to implement and maintain separate commits for a change. Currently I always amend the previous commit in order to maintain a single change id for a bug.

What's the recommended strategy here?

-------------------------------------
author: Danika Greer
date: 2012-11-08 14:16:03.000000000

Patch Set 1: (1 inline comment)



Line:225, org.eclipse.egit.ui/src/org/eclipse/egit/ui/internal/synchronize/GitModelSynchronizeParticipant.java -> You would have to manually separate the parts out into a new commit, which would receive a new Gerrit change ID.

To edit the previous-to-last commit later, you would have to do an interactive rebase and specify "edit" for the commit and then you can amend and if it's ok, continue rebasing. Then push the rebased commits to review again.

But if it's too much work for you, it's ok for once. Just make sure to explain why this here is needed in the commit message.

-------------------------------------
