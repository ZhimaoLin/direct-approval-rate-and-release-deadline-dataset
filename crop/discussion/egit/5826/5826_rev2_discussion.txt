DESCRIPTION

Don't catch, swallow, and reschedule on RuntimeException

Previously IndexDiffCacheEntry would go into a non-stop
scheduling loop if calculating the IndexDiff raised
any RuntimeException or IOException.

This change now only catches the IOException thrown by
IndexDiff and does not reschedule when this exception
occurs.

Change-Id: I1924477a9b59fe961a5e53d93b37485156e92eeb


COMMENTS

author: Jaidyn Nichols
date: 2012-05-04 16:31:45.000000000

Uploaded patch set 2.

-------------------------------------
author: Brenden Conley
date: 2012-05-04 16:49:25.000000000

Patch Set 2:

Build Started https://hudson.eclipse.org/sandbox/job/egit.gerrit/2913/ 

-------------------------------------
author: Brenden Conley
date: 2012-05-04 17:07:19.000000000

Patch Set 2: I would prefer that you didn't submit this

Build Unstable 
 
https://hudson.eclipse.org/sandbox/job/egit.gerrit/2913/ : UNSTABLE

-------------------------------------
author: Douglas Trujillo
date: 2012-05-05 07:16:42.000000000

Patch Set 2: Verified; Looks good to me, but someone else must approve; IP review completed



-------------------------------------
author: Juliet Cantu
date: 2012-05-05 13:12:27.000000000

Patch Set 2:

Why should we reschedule after an IOException?

-------------------------------------
author: Jaidyn Nichols
date: 2012-05-05 15:30:14.000000000

Patch Set 2:

This change removes rescheduling after an IOException

-------------------------------------
author: Juliet Cantu
date: 2012-05-05 19:13:03.000000000

Patch Set 2: Looks good to me, approved



-------------------------------------
author: Juliet Cantu
date: 2012-05-05 19:13:05.000000000

Change has been successfully merged into the git repository.

-------------------------------------
author: Marlie Beasley
date: 2012-05-07 07:29:02.000000000

Patch Set 2:

I think re-scheduling makes sense because otherwise the cached IndexDiff becomes outdated in case of an error. Errors can always occur. E.g. IndexDiff calculation might crash if an other thread performs deletions in the workspace. Perhaps we need a more intelligent retry logic that only performs a limited number of retries in a given amount of time.

-------------------------------------
author: Jaidyn Nichols
date: 2012-05-07 16:18:42.000000000

Patch Set 2:

But the job will still be scheduled the next time the index, refs, or resource event fires so presumably it will retry then and possibly succeed.

I'm not sure explicit retry logic is the right move unless there are explicit exception cases that can be recovered from.

-------------------------------------
