DESCRIPTION

CBQE-0: added tests skeleton for lwwXDCR test

Change-Id: I1dc0d7b943a48d82e4d0d0cae2d090cc2597802d


COMMENTS

author: Fisher Vargas
date: 2015-01-21 11:52:15.232000000

Uploaded patch set 3.

-------------------------------------
author: Hugo Blankenship
date: 2015-01-21 11:52:20.834000000

Patch Set 3:

Build Started http://factory.couchbase.com/job/testrunner-Jasmin Rangel-master/3889/

-------------------------------------
author: Fisher Vargas
date: 2015-01-21 11:52:42.213000000

Patch Set 3: Code-Review-1

Changes are in progress. Intermediate review only.

-------------------------------------
author: Hugo Blankenship
date: 2015-01-21 12:06:58.981000000

Patch Set 3: Verified+1

Build Successful 

http://factory.couchbase.com/job/testrunner-Jasmin Rangel-master/3889/ : SUCCESS

-------------------------------------
author: Angelina Mayer
date: 2015-01-24 00:04:51.361000000

Patch Set 3:

(6 comments)

Added comments. thanks!

Line:13, pytests/xdcr/lwwXDCR.py -> The concept of src and dest will not allow for flexibility on complex topologies. It's ok to use src_cluster and dest_cluster for porting 2 cluster tests but it's better new classes have a generic design.

Line:16, pytests/xdcr/lwwXDCR.py -> time_sync_flag - can we name this time_sync_enabled? 
there's an internal time_synced flag which can confuse.

Line:20, pytests/xdcr/lwwXDCR.py -> how to specify C2 is faster? Is it better to take delay the way we accept topology? Say
1. ctopology=chain, chain_length=3 (C1->C2->C3), clocks=+60:-10:0
meaning clocks in C1 are 60 mins ahead of C3. C2 is 10 mins behind C3.

You can take any cluster with 0 as reference. 

2. In cases like C1<-->C2, clocks=+30:-40.

Of course before we do any of this moving clock forward/backward, we must sync up wall clocks on all clusters during setup()

Line:24, pytests/xdcr/lwwXDCR.py -> maybe we can call __setup_wall_clocks() here in setup() itself?  __setup_time_sync_flag() (can it be renamed- enable_time_sync()?) can also be called before that.

Line:60, pytests/xdcr/lwwXDCR.py -> In tests where we expect xdcr to do time sync, we have to load some data. And let's make sure "items" is scalable. As unit tests, we can run with say items=1 and later we should be able to run with items=50000. Same goes for updates/deletes before/after resuming replication.

Line:1802, pytests/xdcr/xdcrnewbasetests.py -> would a simple ntpdate ntp.ubuntu.com do?
Also ntp won't work on Windows, how do we sync time on windows?

-------------------------------------
author: Fisher Vargas
date: 2015-01-29 04:59:47.461000000

Patch Set 3:

(5 comments)

Line:13, pytests/xdcr/lwwXDCR.py -> Done

Line:16, pytests/xdcr/lwwXDCR.py -> Done

Line:20, pytests/xdcr/lwwXDCR.py -> Yes, I will request to get NTPServer Time e.g. it is x then set the time using "date command" on linux as:

C1= x+60
C2= x-10
C3= x

Line:24, pytests/xdcr/lwwXDCR.py -> Done

Line:60, pytests/xdcr/lwwXDCR.py -> Couldn't get your point here?

-------------------------------------
