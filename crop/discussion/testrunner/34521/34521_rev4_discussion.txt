DESCRIPTION

CBQE-2108 Automation for P1 pause-resume tests

Change-Id: Iddc892e6d5d3fdc9a84afc70ce68f505bfee4ce1


COMMENTS

author: Hugo Blankenship
date: 2014-03-19 05:10:28.400000000

Patch Set 4:

Build Started http://factory.couchbase.com/job/testrunner-Jasmin Rangel-master/737/

-------------------------------------
author: Fisher Vargas
date: 2014-03-19 05:15:16.390000000

Patch Set 4:

This is what, I meant to:

                # rebalance-in?
                if self.rebalance_in != None:
                    self._rebalance = self.rebalance_in
                    tasks += self._async_rebalance_in()

                # rebalance-out/failover
                if self.rebalance_out != None or self._failover!= None:
                    self._rebalance = self.rebalance_out
                    tasks += self._async_rebalance_out()

                # swap rebalance?
                if self.swap_rebalance != None:
                    self._rebalance = self.swap_rebalance
                    tasks += self._async_swap_rebalance()

                # delete all destination buckets and recreate them?
                if self.delete_bucket == 'destination':
                    dest_buckets = self._get_cluster_buckets(self.dest_master)
                    for bucket in dest_buckets:
                        RestConnection(self.dest_master).delete_bucket(bucket.name)
                        # Avoid ValueError
                        self.buckets.remove(bucket)
                    self._create_buckets(self.dest_nodes)

                # reboot nodes?
                if self.reboot == "dest_node":
                    self.reboot_node(self.dest_nodes[len(self.dest_nodes) - 1])
                elif self.reboot == "dest_cluster":
                    threads = []
                    for node in self.dest_nodes:
                        threads.append(Thread(target=self.reboot_node, args=(node,)))
                    for thread in threads:
                        thread.start()
                    for thread in threads:
                        thread.join()

            self.sleep(self.pause_wait)

            # resume all bidirectional replications
            self.resume_xdcr()
            count += 1

        # wait for rebalance/failover to complete
        for task in tasks:
            task.result()

-------------------------------------
author: Hugo Blankenship
date: 2014-03-19 05:37:40.737000000

Patch Set 4: Verified+1

Build Successful 

http://factory.couchbase.com/job/testrunner-Jasmin Rangel-master/737/ : SUCCESS

-------------------------------------
author: Angelina Mayer
date: 2014-03-19 14:28:27.034000000

Patch Set 4:

But here resume_xdcr starts before rebalance starts. I want it the other way around. Appending tasks does not ensure tasks are kicked off, right? task.result() is when rebalance is initiated and forced to wait.

-------------------------------------
author: Fisher Vargas
date: 2014-03-19 14:30:46.452000000

Patch Set 4:

No, it immediately starts.

-------------------------------------
author: Tate Garrett
date: 2014-03-19 16:25:53.352000000

The change could not be merged due to a path conflict.

Please rebase the change locally and upload the rebased commit for review.

-------------------------------------
