DESCRIPTION

CBD-140: Changed hot item base to favor new items

Change-Id: I5541d20784920f380d1665053a5da6fcb84fd266


COMMENTS

author: Hugo Blankenship
date: 2012-05-15 00:32:17.168000000

Patch Set 1:

Build Started http://qa.hq.northscale.net/job/testrunner-Jasmin Rangel-master/181/ 

-------------------------------------
author: Hugo Blankenship
date: 2012-05-15 00:37:50.214000000

Patch Set 1: Verified

Build Successful 

http://qa.hq.northscale.net/job/testrunner-Jasmin Rangel-master/181/ : SUCCESS

-------------------------------------
author: Nora Conway
date: 2012-05-15 00:41:10.370000000

Patch Set 1: (1 inline comment)



Line:363, pytests/performance/mcsoda.py -> For even more safety, I think you should always modulus the retval by num_items.

-------------------------------------
author: Nora Conway
date: 2012-05-15 00:46:41.429000000

Patch Set 1: (1 inline comment)



Line:342, pytests/performance/mcsoda.py -> num_init_items night be <= 0 sometimes?  possible divide by zero error during the modulus?

-------------------------------------
author: Nora Conway
date: 2012-05-15 00:52:47.111000000

Patch Set 1: (1 inline comment)



Line:346, pytests/performance/mcsoda.py -> wondering about a simplification, in the case of the hit_hot_range, could retval just be the following for one or more cases (especially when num_creates > num_hot_items)?  (e.g., go backwards and reallly favor the newest guys, even right at the start?)

  retval = num_items - offset

-------------------------------------
author: Daniel Blair
date: 2012-05-15 01:43:50.895000000

Patch Set 1: (3 inline comments)



Line:342, pytests/performance/mcsoda.py -> Done

Line:346, pytests/performance/mcsoda.py -> Both implementations are the same from favoring newguys perspective

yes. By counting from the back, we can remove one condition/

Line:363, pytests/performance/mcsoda.py -> Done

-------------------------------------
