DESCRIPTION

send acks to upstream via separate process

This fixes some rare cases where upstream memcached tries to send TAP
data and does not receive ACKS/NACKS we're trying to send it. This
leads to deadlock where we're waiting for ack to be sent (blocking on
memcached consuming some of it's queued nacks/acks) and memcached waiting on
us receiving TAP data.

TAP ack design requires us to be able to queue up to tap_ack_interval
nacks. So doing downstream -> upstream path asynchronously achieves
that. Without, hopefully, introducing any really excessive
queuing. Because of, seemingly, limited amount of queued acks/nacks
required.

NOTE: when we're shutting ebucketmigrator down, we're dropping queued
to-upstream data on the floor. But that's what essentially happened
before anyways.

Change-Id: I1a518e55e3a539976f921dea1afc0c7ccff15f48


COMMENTS

author: Nathalie Landry
date: 2011-12-23 18:44:41.842000000

Uploaded patch set 2.

-------------------------------------
author: Nathalie Landry
date: 2011-12-23 18:44:54.098000000

Patch Set 2: Verified



-------------------------------------
author: Meghan Vazquez
date: 2011-12-23 18:48:56.824000000

Patch Set 2: Looks good to me, approved



-------------------------------------
author: Nathalie Landry
date: 2011-12-23 19:24:05.325000000

Change has been successfully cherry-picked as e9a0164643a5b0f679ada6ac5180d32b9200a0c9.

-------------------------------------
