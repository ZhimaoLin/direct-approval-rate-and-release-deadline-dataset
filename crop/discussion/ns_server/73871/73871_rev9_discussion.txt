DESCRIPTION

Purely ets based mru cache.

Eviction strategy:

 - group all items in the cache into two sets: recent items and stale
   items

 - when item is added or read, it always ends up in the "recent" set;
   when item is updated, it stays in the set it's already in (if any)

 - if on adding new item to the "recent" set we reach max capacity and
   have no stale items, we move all the items that were in the
   "recent" set prior to the operation to the "stale" set; the item
   that triggered this rearrangement is left in the "recent" set

 - all of this guarantees that whenever we need to evict, we always
   have at least one item in the "stale" set

 - we pick the victim according to what ets:first returns; for hash
   based ets tables it should be pretty random

The benefits over the lru:

 - requires less book keeping at the expense of a little less
   precision when a victim needs to be found for eviction

 - allows for more concurrency; access to recent items is independent
   for each key; only when a stale item is accessed or a new one
   added does a global housekeeping lock need to be acquired

 - flush is simpler

 - all ets tables used are hash tables

 - crash recovery is simpler (not implemented yet)

Change-Id: Iecd606f3f42599b6c5cf355ea3634cfb1f9a4004
Reviewed-on: http://review.couchbase.org/73871
Tested-by: Meghan Vazquez xxx@xxx.xxx
Reviewed-by: Philip Lara xxx@xxx.xxx


COMMENTS

author: Philip Lara
date: 2017-03-04 04:58:08.394000000

Change has been successfully cherry-picked as 65a91db72e6ef899af27a6dd90bffdcdada567a8 by Philip Lara

-------------------------------------
