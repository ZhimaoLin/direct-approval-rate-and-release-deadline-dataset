DESCRIPTION

MB-7960: XDCR on pipelined memcached binary protocol

This commit implements XDCR over binary memcached binary protocol
(MBP), namely, "xmem" replication mode. We keep current XDCR to
CAPI, namely "capi". The default replication mode will be "xmem",
but users can switch back to "capi" through ns_server parameter:

"xdcr_replication_mode",

or, environtment parameter:

XDCR_REPLICATION_MODE

e.g.  export XDCR_REPLICATION_MODE="capi"

Like existent XDCR parameters, env parameter will always override
ns_server paraemeter.

In "xmem" mode XDCR, each vb replicator creates a server process
(xmem_srv), which may create one or multiple child worker process
(xmem_worker) responsible for all communications to remote memcached,
e.g, connect, select_bucket, build and send memcahced request via
MBP, and disconnect. The server process will relay request from vb
replicator worker (vb_rep_worker) to xmem worker process, and return
results back to vb replicator worker. The xmem_srv process is also
repsonsible for load balancing, stats collection and report, and
replay errors from child xme_worker process to vb replicator. The
default num of xmem_worker created by xmem_srv is 1, which can be
adjusted by ns_server parameter "xdcr_xmem_worker" and environemnt
paraemeter "XDCR_XMEM_WORKER".

This enhancement provides an alternative replication mode along
with current CAPI mode. It is completely a lower level data commutation
protocol change and has no impact to upper level XDCR protocol. The
benefit is mostly performance-wise: increased throughput, improved
scalability, etc. It should be completely transparent to users, in
particular, we maintain these invariants:

no change to current replication protocol;
no change to current XDCR stats;
no change to current XDCR checkpoint behavior;
no change to current XDCR behavior during topology change;
all current XDCR functional tests shall pass.

Change-Id: I3c6acb885baed33bdcbeb4d2f5165d036146d080


COMMENTS

author: Macie Morton
date: 2013-08-07 02:30:14.089000000

Uploaded patch set 13.

-------------------------------------
author: Broderick Chavez
date: 2013-08-07 06:11:45.735000000

Patch Set 13: Code-Review+1

(5 comments)

Line:14, include/xdc_replicator.hrl -> What's this for?

Line:38, src/xdc_vbucket_rep_xmem_worker.erl -> Style issue, just return the result directly. If not {ok, _}, this throws a match error, potentially obfuscating the real return.

Line:11, /COMMIT_MSG -> if using xmem to replicate to an older 2.1 replica, will it work correctly?

Line:171, src/xdc_vbucket_rep.erl -> These could be replaced with a simpler API that returns true if it should log something now. something like:
xdc_rep_utils:invprob_do_trace_dump(), or even xdc_rep_utils:invprob_do_trace_dump(Format, Data) to be even more concise in the calling code.

Line:250, src/xdc_vbucket_rep.erl -> Might want to add a nil arg function head match to the disconnect function, and not do the nil check here. It's style issue, so it's up to you.

-------------------------------------
author: Macie Morton
date: 2013-08-07 17:38:01.861000000

Patch Set 13: Verified+1

(3 comments)

Line:14, include/xdc_replicator.hrl -> This is to avoid repeated inclusion of header file. Usually when codebase becomes more complicated, it is possible to repeatedly include a header file and fail compiler. Actually I hit hit issue and have done this for couchdb.hrl in master branch.

Line:171, src/xdc_vbucket_rep.erl -> Yes, this is exactly I planned to do but have not got chance to do in this commit. It is anyway independent of XMEM.

Over tracing has some bad consequences, like loss of early trace, bloated log files, performance impacts, etc. 
I am thinking to create a flexible, leveled tracing API to allow users to dump traces and control the detailedness of traces.

Line:250, src/xdc_vbucket_rep.erl -> good idea, will do. Since majority of these two functions (nil and non-nil arg) are the same, thus probably we need to create a new function called by these two. I will do that in a commit under MB-7766.

-------------------------------------
