DESCRIPTION

abstract common stats collectors code into base_stats_collector.erl

Change-Id: I0878a1f197ddce2860b58592662d8afd1b04a094


COMMENTS

author: Philip Lara
date: 2015-05-20 23:48:44.693000000

Uploaded patch set 1.

-------------------------------------
author: Philip Lara
date: 2015-05-20 23:58:12.707000000

Patch Set 1: Verified+1

-------------------------------------
author: Ella Beltran
date: 2015-05-26 21:31:53.418000000

Patch Set 1:

(3 comments)

I looked at base_stats_collector and goxdcr_stats_collector and had some questions.
Will be good to have answer to those before I look at the remaining files.

Line:82, src/base_stats_collector.erl -> NewCount logic is not clear. It appears that if grab_stats_every_n_ticks is set to anything other than 0, then NewCount will always be 1?
Can you please add a comment explaining the bahaviour?

Line:88, src/base_stats_collector.erl -> The old code in goxdcr_stats_collector first called "latest_tick"
and then grabbed the stats. My understanding is that this is so that when we grab stats it is associated with the latest tick TS.

This code has reversed those steps.  So, would it cause issues with the timestamp - in the sense that the collected stats might not correspond with the latest tick TS.

Line:94, src/base_stats_collector.erl -> The old goxdcr stats collector code generated only one event notification. This code generates one for each value in the stats list.

Is that intended?

-------------------------------------
author: Philip Lara
date: 2015-05-27 01:14:13.364000000

Patch Set 1:

(3 comments)

Line:82, src/base_stats_collector.erl -> not exactly. we start from Count = 0. So NewCount will be Count + 1 = 1
Next time Count will be 1 and NextCount will be Count + 1 = 2.
And so on until it reaches grab_stats_every_n_ticks. Then it will be reset to 0 again. So it works as intended.

Though now I see another problem in this code: if we decrease reaches grab_stats_every_n_ticks the code can go into the infinite loop. I'll fix it in the next patch.

Line:88, src/base_stats_collector.erl -> I don't think it really that much matters when we cleanup the queue, before we grab the stats or after. I'm following the order in stats_collector: grab stats, get the last tick, process the stats.

Line:94, src/base_stats_collector.erl -> It is still just one notification for goxdcr stats. goxdcr_stats_collector:process_stats returns list of just one element.

The loop here is needed to cover the logic in index_stats_collector where one process grabs the stats for multiple buckets.

-------------------------------------
author: Roselyn Villegas Code Review
date: 2015-05-28 01:01:44.718000000

Change has been successfully cherry-picked as b975b758f8207f4fd4d782eb3d33c2be3dfbd790

-------------------------------------
