DESCRIPTION

MB-13285: Search in /usr/lib before our shipped libs

There was a problem with libsqlite3.dylib that is installed
by default on macosx with an incompatible version with the
libsqlite3.dylib being built from the sqlite homepage.
libsqlite3.dylib is referenced from:
otool -L /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData
/System/Library/Frameworks/CoreData.framework/Versions/A/CoreData:
	/System/Library/Frameworks/CoreData.framework/Versions/A/CoreData (compatibility version 1.0.0, current version 526.1.0)
	/System/Library/Frameworks/Security.framework/Versions/A/Security (compatibility version 1.0.0, current version 57031.10.6)
	/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 1152.12.0)
	/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1152.0.0)
	/usr/lib/libsqlite3.dylib (compatibility version 9.0.0, current version 168.0.0)
By searching /usr/lib _before_ our shipped version we'll avoid such
problems in the future.

Change-Id: Ib164d685c2c0c6ed47983637c184e5f85fe12016


COMMENTS

author: Johan Savage
date: 2015-02-04 10:59:03.003000000

Patch Set 2: Commit message was updated

-------------------------------------
author: Jasmin Rangel
date: 2015-02-04 10:59:03.628000000

Patch Set 2:

New patchset patch-id matches previous patchset, but commit message has changed.

-------------------------------------
author: Nathalie Landry
date: 2015-02-04 19:34:01.206000000

Patch Set 2:

From description I am not able to understand precisely which "such" problems are being prevented here.

It is also particularly unclear why "CoreData" gets loaded at all in one of our processes.

And last question is what changed recently so that problem started occuring.

Thus I'm not able to give you +2 for this commit. But maybe others can.

-------------------------------------
author: Asher Vang
date: 2015-02-04 19:54:47.375000000

Patch Set 2:

When starting erlang one of its components is trying to load up CodeData (I haven't tried to dig into the building of erlang to see where this is, and if we need it or not or if it may be skipped). 

The problem is that we are changing the runtime linkers search path so that it'll try to look in "our" directory before the system libraries. Unfortunately when Apple installed libsqlite3.dylib it contains other symbols than what you'll get if you try to build one of the official releases of sqlite3 (on Unix/Linux this would have been properly solved by using different major, minor and revision sonames). Since we changed the runtime linkers search path in our startup script we'll pick up our version of this library. Now this library isn't needed by any of our server processes (it is only the backup tools that use sqlite3). We've now stopped building sqlite3 for macos (so we can use the system provided library), this is more a "safetynet" to avoid this problem happening again with "another" library. Ideally we should just remove the DYLD_LIBRARY_PATH and build all of our binaries and libraries with a correct RPATH attribute (All the new dependencies we build these days (and the our software) is now built with a proper $RPATH, so at one point we can remove all of this)

-------------------------------------
author: Ashlee Kent
date: 2015-02-16 09:37:44.436000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Asher Vang
date: 2015-02-16 14:42:42.967000000

Patch Set 3: Patch Set 2 was rebased

-------------------------------------
author: Roselyn Villegas Code Review
date: 2015-02-16 16:39:55.850000000

Change has been successfully cherry-picked as 742fa87bea9b68faea9ee94ad82aa0cea378bc2e

-------------------------------------
