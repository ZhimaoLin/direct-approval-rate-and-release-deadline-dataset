DESCRIPTION

WIP: HTML/CSS rewrite

Change-Id: I8d1fdf2a34e053bf7d9335161cdb2ffd625c79fc


COMMENTS

author: Marcus Petersen
date: 2012-04-09 17:27:57.842000000

Uploaded patch set 6.

-------------------------------------
author: Marcus Petersen
date: 2012-04-10 15:26:04.034000000

Patch Set 6:

Logs should be working now.

-------------------------------------
author: Meghan Vazquez
date: 2012-04-12 14:18:07.808000000

Patch Set 6: I would prefer that you didn't submit this

Why does it have auto_failover.erl and ns_config_default.erl changes?

-------------------------------------
author: Marcus Petersen
date: 2012-04-12 14:27:59.192000000

Patch Set 6:

I honestly have no idea.

/me glares at repo...

I'll look into it.

-------------------------------------
author: Shaniya Barton
date: 2012-04-19 14:30:13.009000000

Patch Set 6: I would prefer that you didn't submit this

follow by the link - http://dl.dropbox.com/u/17402685/review-I8d1fdf2a.html

-------------------------------------
author: Shaniya Barton
date: 2012-04-19 14:46:38.829000000

Patch Set 6: No score

For the history I repeat it here

Summary

It goes without saying, that the code become better, more neat and precise. It is oriented to support modern browsers. Also this changes is a step forward for mobile compatibility. If not to take into consideration minor moments, I think that it is great job and it's definitely better than the previous code. Probably some parts should be revised (worked over) before merging, that's why I put -1.
At first I started analizing code whitout looking at new.html changes.
Here is my code review for index.html

Things, that I didn't like:

Too many unnecessary classes and tags.

for example:
auth markup now looks like http://jsfiddle.net/pavel_blagodov/zYrAQ/18/
and here is how I see it http://jsfiddle.net/pavel_blagodov/UQJXG/37/

comments:
- if it's possible tag form shouldn't have styles
- it's better to use lightweight selectors for css rules: ".login_form button" instead of "#login_form input.submit"
- it's better to use "button type='submit'" instead of "input type='submit'"
- in my opinion .alert_red should be global class

Too much repeated rules for classes such as .alert_red

w3c validation errors:
- line 12: Bad value X-UA-Compatible for attribute http-equiv on element meta.
- line 443: Duplicate ID manage_buckets_top_bar.
- line 1305: Duplicate ID view_filter_connection_timeout.
- line 2156: Stray end tag fieldset.
- line 2443: An img element must have an alt attribute, except under certain conditions. For details, consult guidance on providing text alternatives for images.
new.html code review

Things, that I didn't like:

Css looks much better and html not far behind but still have several issues http://jsfiddle.net/pavel_blagodov/zE7TN/6/

comments:
- if it's possible tag form shouldn't have styles
- better to use "button type='submit'" instead of "input type='submit'"
- unessesary tags still have <section>, <fieldset>

Probably, html5 tags are not needed in our case, it's more for search engines, but if it reduce the number of classes then it's ok.

I am not sure about some places in bootstrap.css

-	too much pieces of rules like " input.span4, textarea.span4, .uneditable-inpuoading Java applett.span4 { width: 290px; } .input-large {width: 210px;} ", I am not sure if it is a good approach, because:
- more difficult to introduce new developers (this point is most important)
- it's likely that you repeat yourself
- requires additional classes on tags "<div class="row pull-right span9 progress-multi"></div>"

In general it is a controversial matter. I think sections for classes should be more general. Also this approach is good for global elements like buttons, errors, controls etc. Probably you used this approach on some other reasons for example probably it's needed for responsive design. Correct me, please, If I am wrong

w3c validation errors
- line 200: No space between attributes.
- line 200: Saw " when expecting an attribute name. Probable cause: = missing immediately before.
- line 200: Attribute " is not serializable as XML 1.0.
- line 200: Attribute " not allowed on element span at this point.
- line 407: Bad value tooltip for attribute rel on element a: Keyword tooltip is not registered.
- line 415: Bad value tooltip for attribute rel on element a: Keyword tooltip is not registered.
- line 1383: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1392: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1401: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1410: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1419: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1428: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1437: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1446: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1455: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1464: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1473: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1482: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- Using Direct Input mode: UTF-8 character encoding assumed
- line 1491: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1500: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1513: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1597: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1609: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1613: The first occurrence of ID spatial_filter_connection_timeout was here.
- line 1618: Any button descendant of a label element with a for attribute must have an ID value that matches that for attribute.
- line 1622: Duplicate ID spatial_filter_connection_timeout.
- line 1844: Bad value tooltip for attribute rel on element a: Keyword tooltip is not registered.
- line 1852: Bad value tooltip for attribute rel on element a: Keyword tooltip is not registered.
- line 1984: Attribute type not allowed on element section at this point.
- line 2702: Bad value popover for attribute rel on element a: Keyword popover is not registered.
- line 2711: Element legend not allowed as child of element fieldset in this context. (Suppressing further errors from this subtree.)
- line 2715: An img element must have an alt attribute, except under certain conditions. For details, consult guidance on providing text alternatives for images.

Keeping you template organized something like this http://www.jblotus.com/2011/05/24/keeping-your-handlebars-js-templates-organized/

I recommend to use ace instead of CodeMirror.

Things, that I like:

Good practice:
- to use code style for css rules
- to write css rules style in-line
- to keeping css organized 
- step to responsive design

-------------------------------------
author: Ayla Reynolds
date: 2012-04-19 15:00:17.090000000

Patch Set 6:

As I did some work on the (old) UI as well, I'd like to comment on a few things (take the things I don't comment on as "yay, way to go!":

>> Too many unnecessary classes and tags. for example: auth markup now looks like http://jsfiddle.net/pavel_blagodov/zYrAQ/18/ and here is how I see it http://jsfiddle.net/pavel_blagodov/UQJXG/37/

I agree with too many classes, but I think using fieldset and a list (I'd use <ol> as it is an ordered list and not an unordered list) makes styling forms way easer. For me more (sematic) tags means, that you can style it easier, without the need of many classes.


>> I recommend to use ace instead of CodeMirror.

I'd keep using CodeMirror. I've created a JSON mode for it (I should really polish an publish it) and it was really a joy. I've tried to customize ACE once, and it seemed really over-engineered to me.

Though, if you've good experience with ACE, you should go for it, you are the UI guy :)

-------------------------------------
author: Shaniya Barton
date: 2012-04-19 15:28:42.687000000

Patch Set 6:

>> I'd keep using CodeMirror. I've created a JSON mode for it (I should really polish an publish it) and it was really a joy. I've tried to customize ACE once, and it seemed really over-engineered to me.

Did you mean this ? https://github.com/ajaxorg/ace/tree/master/lib/ace/mode/json

-------------------------------------
author: Ayla Reynolds
date: 2012-04-19 15:35:34.194000000

Patch Set 6:

Nice, ACE modes seem to be similar to the CodeMirror ones. Here's mine https://github.com/Ayla Reynolds/CodeMirror2/tree/json-couchbase/mode/json (I didn't know that I pushed it to Github :)

The comment about "over-engineering" was not about modes, but about the core. But as we probably will never touch it, ACE might be fine as well.

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:17:48.043000000

Patch Set 6:

just to put you guys a bit on the ground: we will _not_ replace _any_ major piece of JS in this commit.

We _can not_ do all fixing in one big leap. We need to proceed in smallest possible bites. It just happened that we discovered that we are unable to fix markup and css slowly in a series of clean and meaningful refactorings. So we've decided on full html & css rewrite. But I insist on this rewrite to be as minimal and un-intrusive as possible.

Regarding editor. I'm open in general to replacing editor. Particularly because current one (or it's integration) have really ugly bugs, that people who originally put this code in never bothered to fix. But any editor or any other JS improvements are outside of scope of _this particular_ work.

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:26:05.368000000

Patch Set 6:

Pavel, I think you should remove (or more clearly separate section about old markup, we already know it's going to be removed) and particularly because with your current text there's "bug" with some heading confused with list item. See this: http://i.imgur.com/avZwF.png

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:35:49.840000000

Patch Set 6:

Also looks like issues raised by Pavel is mostly about whether we should use bootstrap.css at all.

Given our UI is not big do we really need some (or this particular) css framework? Also if we consider css framework why bootstrap? There are many existing css frameworks that give you grid but otherwise get out of the way.

I think having some in-principle agreement on general direction of our CSS is quite important at this point. Do we care about more semantic markup or things like class="pull-right do-x do-y do-z <tons of other 'classes' to apply>" is okay (which is clearly not so semantic)? In general size of markup and css files is not big deal for us so some unused classes and size-suboptimal files are ok.

Also I'd seriously consider having lesscss used. It allows semantic classes but without requiring you to repeat yourself too much (or at all). Basically, IMHO, pure CSS sucks badly not really giving you any way to create reusable abstractions and lesscss fixes that IMHO.

Actually at one point it was used, but Egveny Matveev (Altoros css guy) was against continued usage and I wanted his help of css. So we removed it.

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:38:44.070000000

Patch Set 6:

Also. Benjamin I want to upload commit without that new.html thing but with everything on it's final place and old stuff (if unused) removed. Particularly I need to see what's changed in JS land very clearly and your current thing makes it unnecessarily harder.

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:39:21.935000000

Patch Set 6: I would prefer that you didn't submit this

docs/new.html needs to be removed

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:41:07.777000000

Patch Set 6:

-1 on upgrading jquery as well. I'm not against in principle but that's separate work. And there were some known backwards-incompatibilities AFAIK in 1.7.x

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:44:33.189000000

Patch Set 6:

It is interesting and weird that upgraded jquery is minified (why?) and new excanvas (upgraded?) is not, versus old excanvas minified. Why?

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:51:18.077000000

Patch Set 6:

For diff below (see now why I want stuff in it's normal place so that I can comment using gerrit's facilities directly in files?):

* why event names were refactored? How this is about just markup rewrite?

* why staleness handling was removed ?

--- /root/src/altoros/moxi/ns_server/priv/public/js/analytics.js	2012-04-19 10:39:52.114370952 -0700
+++ analytics.js	2012-04-19 10:39:52.138370393 -0700
@@ -55,9 xxx@xxx.xxx
         async.cancel();
       }
       function unbind() {
-        $(mainAsync).unbind('cancelled', onCancel);
+        $(mainAsync).unbind('mainAsync.cancelled', onCancel);
       }
-      $(mainAsync).bind('cancelled', onCancel);
+      $(mainAsync).bind('mainAsync.cancelled', onCancel);
 
       var async;
       return async = getCPS({url: statsURL, data: data, missingValue: mark404}, cancelMark, function (value, status, xhr) {
@@ -78,7 xxx@xxx.xxx
       nonRealtimeLoop(deliverValue);
     });
     mainAsync.cancel = function () {
-      $(this).trigger('cancelled');
+      $(this).trigger('mainAsync.cancelled');
     }
 
     return mainAsync;
@@ -120,9 xxx@xxx.xxx
         unbind();
       }
       function unbind() {
-        $(mainAsync).unbind('cancelled', onCancel);
+        $(mainAsync).unbind('mainAsync.cancelled', onCancel);
       }
-      $(mainAsync).bind('cancelled', onCancel);
+      $(mainAsync).bind('mainAsync.cancelled', onCancel);
 
       realTimeLoop(deliverValue, value, realTimeRestorer);
     }
@@ -876,11 xxx@xxx.xxx
       StatsModel.configurationExtra.setValue({});
     });
 
-    IOCenter.staleness.subscribeValue(function (stale) {
-      $('.stats-period-container')[stale ? 'hide' : 'show']();
-      $('#analytics .staleness-notice')[stale ? 'show' : 'hide']();
-    });
-

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 17:55:35.390000000

Patch Set 6:

How the following is about markup rewrite?


--- /root/src/altoros/moxi/ns_server/priv/public/js/app-misc.js	2012-04-19 10:39:52.114370952 -0700
+++ app-misc.js	2012-04-19 10:39:52.138370393 -0700
@@ -257,7 xxx@xxx.xxx
 
     var value = cell.value;
     if (value == undefined) {
-      return prepareAreaUpdate($(toGetter()));
+      return overlayWithSpinner($(toGetter()));
     }
 
     if (options.valueTransformer) {
@@ -483,16 xxx@xxx.xxx

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 18:14:49.411000000

Patch Set 6:

Also I'm mildly opposed to that selectivizr thing. What is exactly a reason for using it. What exactly pseudo classes we need? Can't we do without them ?

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 18:32:50.930000000

Patch Set 6:

pauseAjax thing in cells.js is broken. It'll just drop requests on the floor causing leak. What is the point of this? Why it can't be implemented correctly? Why it can't be implemented separately?

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 18:34:17.889000000

Patch Set 6:

against addition of whole bunch of bootstrap.js files. Some of them are unused.

My biggest concern remains. Why we're adding some new widgets library when the goal of this is just to make html & css easier to work with ?

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 18:34:59.077000000

Patch Set 6:

also please remove that final <script> from html and put it somewhere else. Historically app.js is the place for stuff like that.

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 18:44:53.295000000

Patch Set 6: (1 inline comment)



Line:9, priv/public/css/app.css -> WAT?

-------------------------------------
author: Nathalie Landry
date: 2012-04-19 19:06:20.085000000

Patch Set 6:

Still seeing whole bunch of UI issues:


spacings look weird http://i.imgur.com/xqV38.png

another spacing and alignment issue http://i.imgur.com/maqjI.png

http://i.imgur.com/YpILc.png

http://i.imgur.com/o5L6K.png

and most sadly that "jumpiness" when expanding server details is still there

I'm seeing a bunch of TODOs in CSS that's also raising questions.

tabindex tweaks on add server dialog are killed by this. After entering server host:port, pressing Tab moves me to "what's this?" link. Something that we specifically disabled previously.

See also this:

http://i.imgur.com/iM367.png


http://i.imgur.com/La3ox.png

That's shaking my confidence we're actually improving things here.

-------------------------------------
author: Nathalie Landry
date: 2012-07-27 15:37:33.129000000

Patch Set 6: Abandoned

we'll revive it if/when needed. Removing from list of stuff being reviewed/discussed/worked on

-------------------------------------
