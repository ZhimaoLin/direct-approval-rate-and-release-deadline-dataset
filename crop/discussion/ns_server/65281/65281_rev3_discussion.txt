DESCRIPTION

fixed minification of all non library JS files

The proposed new UI structure moves JS files into directories
under priv/public/ui as follows:
* base - contains files that are used by both the new (spock)
  and classic UIs. Most commonly this directory will contain
  filters, constants and services that wrap server side REST
  APIs, but will also contain common directives and controllers
  that happen not to change
* app - contains the spock-only UI javascripts (mostly controller
  Javascripts, but also spock-specific directives)
* app-classic - contains the current UI

As such, let's change the minification tool to consider all
non-library JS files (those residing under libs/) as
application javascripts that should be minified.

Change-Id: Ie7b62e8cdbd4717afa9a746bb9d9dd4b89e58d31


COMMENTS

author: Shaniya Barton
date: 2016-06-28 14:23:57.283000000

Uploaded patch set 3.

-------------------------------------
author: Kian Santos
date: 2016-06-29 05:05:41.379000000

Patch Set 3:

Would like this change to happen first.

-------------------------------------
author: Kian Santos
date: 2016-06-29 05:06:57.761000000

Patch Set 3: Code-Review-1

(2 comments)

Line:17, deps/gocode/src/minify/minify.go -> unnecessary change

Line:64, deps/gocode/src/minify/minify.go -> this should be in the result struct (if we end up doing the <base> thing -- I'd prefer not to I think.) See my comment on the first of this list of code reviews.

-------------------------------------
author: Shaniya Barton
date: 2016-06-29 08:29:04.471000000

Patch Set 3:

(2 comments)

Line:17, deps/gocode/src/minify/minify.go -> This change is necessary in accordance with DRY rules. As you ca see we can use like 
getHtmlNodeAttr(child, "script", "src")
getHtmlNodeAttr(child, "base", "href")

Line:64, deps/gocode/src/minify/minify.go -> keeping IndexHtmlBase in the result struct makes code more complicated
e.g.
we will have to add something like this in switch default: statement
if rv.IndexHtmlBase == "" && childResult.IndexHtmlBase != "" {
            rv.IndexHtmlBase = childResult.IndexHtmlBase
}

Is it bad practice to use global vars  in Go or you just want to keep all in one place?

-------------------------------------
author: Kian Santos
date: 2016-06-30 01:56:52.951000000

Patch Set 3:

(2 comments)

Line:17, deps/gocode/src/minify/minify.go -> ok, didn't see the second use, that's fine

Line:64, deps/gocode/src/minify/minify.go -> Sometimes globals are ok, often not. In this case it's more that we should follow the established pattern of doMinify(). Yes you'll need to merge the minification result from a child node with the minification result from the parent. How about adding a merge() function, as follows:

func (r1 *result) merge(r2 *result) {
	if r1.IndexHtmlBase == "" {
		r1.IndexHtmlBase = r2.IndexHtmlBase
	}
	r1.AppScripts = append(r1.AppScripts, r2.AppScripts...)
	r1.PluggableInjectionCount += r2.PluggableInjectionCount
}

I wrote this code originally and I guess I'd like it this way. :-)

-------------------------------------
author: Roselyn Villegas Code Review
date: 2016-07-01 17:02:24.643000000

Change has been successfully cherry-picked as 820754d8a5923755c95fbed3e455240a4d529f1a by Kian Santos

-------------------------------------
