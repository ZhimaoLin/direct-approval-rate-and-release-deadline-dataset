DESCRIPTION

Bug 519888 - DialogSettings should not throw Exception if key is not set 

* adds default get methods to IDialogSettings that takes a default value
* updates JavaDoc
* adds api_filters
* increases bundle version
* xxx@xxx.xxx tags

Change-Id: I378a606122f0935af1892091a4606738ae540034
Signed-off-by: Nevaeh Wu Ellison xxx@xxx.xxx

COMMENTS

author: Nevaeh Wu Ellison
date: 2017-07-24 10:24:32.000000000

Uploaded patch set 3.

-------------------------------------
author: Nevaeh Wu Ellison
date: 2017-07-24 10:25:31.000000000

Patch Set 3:

Thanks for your remarks. I needed to access a private field of DialogSettings in the default methods (the map with the key-values). So I used the "old" interface methods and only react to the NumberFormatException. Is it correct to do it this way? I also increased the bundle version to 3.14.0 (I think it was only increased to 3.13.100 in 4.8), but Eclipse still wanted me to add problem filters (see .api_filters file).

-------------------------------------
author: Mariela Flores
date: 2017-07-24 10:43:39.000000000

Patch Set 3: Code-Review+1

The code changes IMHO now look good. For the API-Filters please ask Dani, it might be that the API-Tooling does not understand default-methods?

-------------------------------------
author: Brenden Conley
date: 2017-07-24 10:54:37.000000000

Patch Set 3:

Build Started https://hudson.eclipse.org/platform/job/eclipse.platform.ui-Gerrit/13258/

-------------------------------------
author: Brenden Conley
date: 2017-07-24 11:00:54.000000000

Patch Set 3: Verified-1

Build Failed 

https://hudson.eclipse.org/platform/job/eclipse.platform.ui-Gerrit/13258/ : FAILURE

-------------------------------------
author: Sebastian Porter
date: 2017-07-24 16:18:02.000000000

Patch Set 3: Code-Review-2

If you change the version, you must also change it in the pom.xml.

Adding a default method is in general a breaking change unless you are very very sure you don't break a client. See the version guidelines for details.

The changes include lots of unrelated whitespace changes which are noise. Please remove that

-------------------------------------
author: Mariela Flores
date: 2017-07-25 06:28:51.000000000

Patch Set 3: Code-Review-1

> Adding a default method is in general a breaking change unless you
 > are very very sure you don't break a client. See the version

I don't fully agree with this statement adding default methods can:
* never break binary compat
* only break source compat if the visibility of the subclass methods is different to the interface ones or the return type differs

Bottom line we break we'd for sure never break consumers, we most likely won't break subclassers.

I'm still -1 on the patch because DialogSettings should implement the methods most likely who does not rely on exception catching

-------------------------------------
author: Mariela Flores
date: 2017-07-25 06:32:33.000000000

Patch Set 3:

> > Adding a default method is in general a breaking change unless
 > you
 > > are very very sure you don't break a client. See the version
 > 
 > I don't fully agree with this statement adding default methods can:
 > * never break binary compat
 > * only break source compat if the visibility of the subclass
 > methods is different to the interface ones or the return type
 > differs
 > 

Ok I now read https://wiki.eclipse.org/Evolving_Java-based_APIs_2 it's up to Dani to decide if the change is too likely to break someone

-------------------------------------
author: Sebastian Porter
date: 2017-07-25 10:45:15.000000000

Patch Set 3:

> > > Adding a default method is in general a breaking change unless
 > > you
 > > > are very very sure you don't break a client. See the version
 > >
 > > I don't fully agree with this statement adding default methods
 > can:
 > > * never break binary compat
 > > * only break source compat if the visibility of the subclass
 > > methods is different to the interface ones or the return type
 > > differs
 > >
 > 
 > Ok I now read https://wiki.eclipse.org/Evolving_Java-based_APIs_2
 > it's up to Dani to decide if the change is too likely to break
 > someone

I wanted to draw the attention to the exact compatibility rules. In this particular case I think we can add the default methods, but the other two points need to be addressed.

-------------------------------------
author: Sebastian Porter
date: 2017-07-25 10:53:49.000000000

Patch Set 3:

> > Adding a default method is in general a breaking change unless
 > you
 > > are very very sure you don't break a client. See the version
 > 
 > I don't fully agree with this statement adding default methods can:
 > * never break binary compat
 > * only break source compat if the visibility of the subclass
 > methods is different to the interface ones or the return type
 > differs
 > 
 > Bottom line we break we'd for sure never break consumers, we most
 > likely won't break subclassers.
 > 
 > I'm still -1 on the patch because DialogSettings should implement
 > the methods most likely who does not rely on exception catching

And this is valid as well. You will have to add an IDialogSettingsExgension interface to add the new methods.

-------------------------------------
author: Sebastian Porter
date: 2017-07-25 10:55:46.000000000

Patch Set 3:

Ignore the previous scrambled comment. What I wanted to say:

 > I'm still -1 on the patch because DialogSettings should implement
 > the methods most likely who does not rely on exception catching

And this is valid as well. You will have to add an IDialogSettingsExtension interface to add the new methods.

-------------------------------------
