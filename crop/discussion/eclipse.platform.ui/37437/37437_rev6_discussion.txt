DESCRIPTION

Bug 451687: - Executing EarlyStartup extensions in parallel using JobGroup API.

Change-Id: Ie371d04ef5ef37522f32fe1c75b19a7df978b520
Signed-off-by: Virginia Riley xxx@xxx.xxx


COMMENTS

author: Virginia Riley
date: 2014-12-02 21:02:19.000000000

Uploaded patch set 6.

-------------------------------------
author: Rocco Fowler
date: 2014-12-02 21:08:37.000000000

Patch Set 6:

(1 comment)

Line:2803, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> Why times 2?

-------------------------------------
author: Zaid Mosley
date: 2014-12-02 21:09:11.000000000

Patch Set 6:

I send an email to cross to see if anyone sees an issue with this change.

-------------------------------------
author: Zaid Mosley
date: 2014-12-02 21:09:52.000000000

Patch Set 6:

Gunnar, see the comment in the code, we assume the action is 50 % CPU bound and 50% IO.

-------------------------------------
author: Rocco Fowler
date: 2014-12-02 21:10:42.000000000

Patch Set 6:

I see. But shouldn't you leave some room for other activation going on in the background?

-------------------------------------
author: Rocco Fowler
date: 2014-12-02 21:11:24.000000000

Patch Set 6:

other == bundles/plug-ins doing crazy stuff in their activator or spinning of jobs we don't know about

-------------------------------------
author: Zaid Mosley
date: 2014-12-02 21:16:01.000000000

Patch Set 6:

Gunnar, I suggest we test the real CPU for Mars with this setting and decide based on this.

-------------------------------------
author: Rocco Fowler
date: 2014-12-02 21:20:38.000000000

Patch Set 6:

Sounds good. Do you have some heavy weight users of early startup in mind for testing?

-------------------------------------
author: Jayvion Booth
date: 2014-12-02 22:26:34.000000000

Patch Set 6:

(3 comments)

Line:356, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> typo: starttup -> startup

Line:2804, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> "1" needs explanation. Why not 42 or at least extensions.length?

Line:2822, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> I think we should check for monitor.isCancelled() *in* the job run() method *before* calling the SafeRunner.run().

-------------------------------------
author: Virginia Riley
date: 2014-12-02 22:39:15.000000000

Patch Set 6:

(4 comments)

Line:356, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> Done

Line:2803, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> Done

Line:2804, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> Done

Line:2822, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> Done

-------------------------------------
author: Brenden Conley
date: 2014-12-02 22:39:16.000000000

Patch Set 6:

Build Started https://hudson.eclipse.org/platform/job/eclipse.platform.ui-Gerrit/3845/

-------------------------------------
author: Brock Pruitt
date: 2014-12-02 22:39:58.000000000

Patch Set 6:

(2 comments)

Line:2803, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> The optimal number of concurrent threads is 1/cpu_utilization, where cpu_utilization is percent of CPU used by a single thread.

Line:2822, bundles/org.eclipse.ui.workLeon Ochoach/Eclipse UI/org/eclipse/ui/internal/Workbench.java -> Checking for cancellation at the beginning of the run method is redundant since the job is extremely unlikely to be cancelled at this point.

-------------------------------------
author: Brenden Conley
date: 2014-12-02 23:09:27.000000000

Patch Set 6: Verified+1

Build Successful 

https://hudson.eclipse.org/platform/job/eclipse.platform.ui-Gerrit/3845/ : SUCCESS

-------------------------------------
