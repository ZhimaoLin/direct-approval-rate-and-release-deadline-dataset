DESCRIPTION

Bug 478456 - Implement the SideEffect class

Change-Id: I22820059a2aaaf8e11647d8de37b9edc61c55fe1
Signed-off-by: Kelly Potter xxx@xxx.xxx


COMMENTS

author: Brenden Conley
date: 2015-11-03 22:51:05.000000000

Patch Set 8:

Build Started https://hudson.eclipse.org/platform/job/eclipse.platform.ui-Gerrit/7241/

-------------------------------------
author: Brenden Conley
date: 2015-11-03 23:06:45.000000000

Patch Set 8: Verified+1

Build Successful 

https://hudson.eclipse.org/platform/job/eclipse.platform.ui-Gerrit/7241/ : SUCCESS

-------------------------------------
author: Krista Shepherd
date: 2015-11-04 01:53:28.000000000

Patch Set 8:

(2 comments)

When using AtomicReference the contents of the runOnce method would look like this:
AtomicReference<ISideEffect> result = new AtomicReference<>();

		Runnable theRunnable = () -> {
			T value = supplier.get();

			if (value != null) {
				ObservableTracker.setIgnore(true);
				try {
					consumer.accept(value);
				} finally {
					ObservableTracker.setIgnore(false);
				}

				result.get().dispose();
			}
		};

		result.set(ISideEffect.createPaused(theRunnable));
		result.get().resume();

		return result.get();

Line:264, bundles/org.eclipse.core.databinding.observable/src/org/eclipse/core/databinding/observable/ISideEffect.java -> it should be "returned by the supplier"

Line:271, bundles/org.eclipse.core.databinding.observable/src/org/eclipse/core/databinding/observable/ISideEffect.java -> Here you might want to use 		AtomicReference<ISideEffect> result = new AtomicReference<>(); rather than the new ISideEffect[1];

-------------------------------------
author: Kelly Potter
date: 2015-11-05 01:37:06.000000000

Patch Set 8:

(2 comments)

Line:264, bundles/org.eclipse.core.databinding.observable/src/org/eclipse/core/databinding/observable/ISideEffect.java -> Done

Line:271, bundles/org.eclipse.core.databinding.observable/src/org/eclipse/core/databinding/observable/ISideEffect.java -> No. AtomicReference makes use of volatile state which would introduce unwanted memory barriers. This code is strictly single-threaded, so that would be an unnecessary performance penalty.

-------------------------------------
author: Gerrit Code Review
date: 2015-11-12 01:43:47.000000000

Change has been successfully merged into the git repository by Kelly Potter

-------------------------------------
