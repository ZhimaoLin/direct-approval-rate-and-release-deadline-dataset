DESCRIPTION

Bug 8519 - keystroke macros recording and playing capability

Change-Id: I3f548fc00d82a847a2591c06ff6387fa23204a76
Signed-off-by: Sienna Tate xxx@xxx.xxx

COMMENTS

author: Sienna Tate
date: 2017-03-01 17:57:05.000000000

Uploaded patch set 14.

-------------------------------------
author: Brenden Conley
date: 2017-03-01 17:57:12.000000000

Patch Set 14:

Build Started https://hudson.eclipse.org/platform/job/eclipse.platform.ui-Gerrit/12169/

-------------------------------------
author: Brenden Conley
date: 2017-03-01 18:22:12.000000000

Patch Set 14: Verified-1

Build Failed 

https://hudson.eclipse.org/platform/job/eclipse.platform.ui-Gerrit/12169/ : FAILURE

-------------------------------------
author: Sienna Tate
date: 2017-03-01 18:27:44.000000000

Patch Set 14:

Hi Brian,

I've just posted an update to the macro recording based on the comments you sent previously through e-mail:

* Scoping the application of macros: use various listeners to abort record and playback when the user does something that cannot be supported:
    - The macros now attach an IExecutionListener to the CommandManager to deal with commands not executed through the keybindings and notifies users that no recording is taking place in this case.

* UI indications — even if just beeps — to indicate macro state and situation changes like macro aborted, cannot record.
    - Beeping in case of errors and showing messages in the IStatusLineManager to indicate things that go wrong and what's being recorded.

* UI activations:
    - Now, if some macro instruction is added and the current editor changes, the user is properly warned about it (and asked whether to break the recording or not).

* Hook ups for non-AbstractTextEditor
    - It should be already possible for anyone to get the EMacroService and add commands as needed or hook an IMacroStateListener as needed.

* Mechanisms to disable the macro functionality either on a per-editor basis or overall, in case of errors in the field.
    - Related to this, the macro will now only be attached to editors which adapt to StyledText controls, so, I think it should already cover what's needed. Also, any error that can possibly happen should only happen when the user actually requests a macro to be recorded, so, hopefully it should be already self-contained.

* Don't require that the AbstractTextEditor requires the macro plugin (i.e.: make macros optional)
    - Everything is now done through an IPartListener which attaches to the existing editors.
    
You also mentioned that maybe it should start in the e4 incubator, but I'm not sure this would be ideal, since it probably won't get enough testing being there (and we're in March, so, there are already 4 months available to harden it being in the platform -- the only major issue is that API changes are only available for 2 more weeks, but I believe that the public API should be good and the private API can still be tweaked as needed during those 4 months).

General note:
I still haven't removed the part of the keybinding dispatcher (which is also in https://git.eclipse.org/r/#/c/91792/) so that it can still be built by hudson -- and it still requires https://git.eclipse.org/r/#/c/89956/ to add macro support for text editors.

-------------------------------------
author: Sienna Tate
date: 2017-03-08 13:53:58.000000000

Abandoned

-------------------------------------
