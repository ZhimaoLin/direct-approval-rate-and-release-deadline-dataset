DESCRIPTION

Release allocated resources by cJSON

> ::findleaks
BYTES             LEAKED         VMEM_SEG CALLER
8192                   6 fffffd7ffc360000 MMAP
8192                   1 fffffd7ffcf6d000 MMAP
8192                   1 fffffd7ffcd6e000 MMAP
8192                   1 fffffd7ffc95d000 MMAP
8192                   1 fffffd7ffc75e000 MMAP
8192                   1 fffffd7ffc55f000 MMAP
------------------------------------------------------------------------
           Total       6 oversized leaks, 49152 bytes

CACHE             LEAKED           BUFCTL CALLER
0000000000485028       1 0000000008977380 ep.so`MemoryTracker::MemoryTracker+0x6b
00000000004a5028       1 000000001000b9a0 ep.so`EventuallyPersistentEngine::setClusterConfig+0x5f
000000000048a668    2046 000000000a0579a0 libcJSON.so.1.0.0`cJSON_New_Item+0x17
000000000048a668    2048 000000000a057c40 libcJSON.so.1.0.0`cJSON_New_Item+0x17
000000000048a668    2047 000000000a057b60 libcJSON.so.1.0.0`cJSON_New_Item+0x17
000000000048a668    2046 000000000a057a80 libcJSON.so.1.0.0`cJSON_New_Item+0x17
0000000000485668    2046 000000000a053540 libcJSON.so.1.0.0`parse_string+0x8a
0000000000485668    2046 000000000a053620 libcJSON.so.1.0.0`parse_string+0x8a
000000000048a028     512 000000000fb3e0e0 libstdc++.so.6.0.17`operator new+0x1e
------------------------------------------------------------------------
           Total   12793 buffers, 761400 bytes
> 000000000a053620::bufctl -v
            ADDR          BUFADDR        TIMESTAMP           THREAD
                            CACHE          LASTLOG         CONTENTS
         a053620          a04dca0    c3978651e3b4b               14
                           485668                0                0
                 libumem.so.1`umem_cache_alloc_debug+0xfd
                 libumem.so.1`umem_cache_alloc+0xb3
                 libumem.so.1`umem_alloc+0x64
                 libumem.so.1`malloc+0x3f
                 libcJSON.so.1.0.0`parse_string+0x8a
                 libcJSON.so.1.0.0`parse_object+0x8f
                 libcJSON.so.1.0.0`parse_value+0xbe
                 libcJSON.so.1.0.0`parse_array+0xa6
                 libcJSON.so.1.0.0`parse_value+0x9b
                 libcJSON.so.1.0.0`cJSON_Parse+0x41
                 ep.so`FailoverTable::loadFromJSON+0x24
                 ep.so`FailoverTable::FailoverTable+0x65
                 ep.so`Warmup::createVBuckets+0x152
                 ep.so`WarmupCreateVBuckets::run+0x29
                 ep.so`ExecutorThread::run+0x262

Change-Id: I20f4d46d39996df04b60545e72e5250e8ef2e533


COMMENTS

author: Asher Vang
date: 2014-06-23 11:26:45.694000000

Uploaded patch set 3.

-------------------------------------
author: Ashlee Kent
date: 2014-06-23 12:25:08.301000000

Patch Set 3: Code-Review+1

(1 comment)

Line:184, src/failover-table.cc -> can the argument be made const?

-------------------------------------
author: Asher Vang
date: 2014-06-23 12:27:05.098000000

Patch Set 3:

(1 comment)

Line:184, src/failover-table.cc -> No... the cJSON_* methods below does not accept const..

-------------------------------------
author: Ashlee Kent
date: 2014-06-23 12:35:44.973000000

Patch Set 3: Code-Review+2

-------------------------------------
author: Asher Vang
date: 2014-06-23 12:55:46.648000000

Patch Set 3: Verified+1

-------------------------------------
