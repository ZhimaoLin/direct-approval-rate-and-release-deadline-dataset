DESCRIPTION

Account for a deleted item in unlocked_restoreValue

When we do a background fetch to read an item from
disk, if the item were deleted from a front end
operation and it wasn't persisted yet, we shouldn't
decrement nonResidentItemCount as it is already done
as part of unlocked_softDelete, and this could cause
an underflow of the stat.

Change-Id: I47978c539a04b52240aa3d8a3806cc407d25da59


COMMENTS

author: Emerson Nolan
date: 2014-10-31 18:07:20.002000000

Patch Set 2: Commit message was updated

-------------------------------------
author: Jasmin Rangel
date: 2014-10-31 18:07:20.585000000

Patch Set 2:

New patchset patch-id matches previous patchset, but commit message has changed.

-------------------------------------
author: Hugo Blankenship
date: 2014-10-31 18:07:25.785000000

Patch Set 2:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-250/23/

-------------------------------------
author: Hugo Blankenship
date: 2014-10-31 18:07:34.496000000

Patch Set 2: Verified-1

Build Failed 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-250/23/ : FAILURE

-------------------------------------
author: Abby Duran
date: 2014-10-31 18:13:36.752000000

Patch Set 2: Code-Review-1

(2 comments)

Line:98, src/stored-value.cc -> This still seems wrong. If an item is marked as deleted, then we shouldn't restore a value using setValue call above. I think we already check if an item is deleted or not before calling this function. Please double check it.

Line:105, src/stored-value.cc -> Same as above comment.

-------------------------------------
author: Emerson Nolan
date: 2014-10-31 18:23:51.079000000

Patch Set 2:

(1 comment)

Line:98, src/stored-value.cc -> Looks like we do not check if the item is deleted before calling unlocked_restoreValue, i'll push in another patch set.

-------------------------------------
