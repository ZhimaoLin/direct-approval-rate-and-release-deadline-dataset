DESCRIPTION

MB-18095: Refactor dcp_stream() in ep_testsuite_dcp

Refactor the way arguments are passed to dcp_stream(..,..,)
in ep_testsuite_dcp. This is to assist in adding tests in the
future to facilitate streaming from multiple vbuckets under the
umbrella of a single producer.

Change-Id: I3c5562e5ee690cc992471fc3cbb94ccbbcb5a181


COMMENTS

author: Emerson Nolan
date: 2016-02-16 00:40:33.098000000

Uploaded patch set 3.

-------------------------------------
author: Hugo Blankenship
date: 2016-02-16 00:48:48.511000000

Patch Set 3:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1743/ (2/2)

-------------------------------------
author: Hugo Blankenship
date: 2016-02-16 01:11:29.059000000

Patch Set 3: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1743/ : SUCCESS

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/2473/ : SUCCESS

-------------------------------------
author: Adrianna Holmes
date: 2016-02-17 01:47:50.315000000

Patch Set 3: Code-Review+2

-------------------------------------
author: Ashlee Kent
date: 2016-02-17 15:34:50.749000000

Patch Set 3: Code-Review-1

(4 comments)

Line:37, tests/ep_testsuite_dcp.cc -> Style: Suggest you put each initialiser list item on a separate line - makes it much easier to deal with adding / removing elements and conflicts down the line.

Line:54, tests/ep_testsuite_dcp.cc -> Given this is C++, maybe just go the whole way and make this a proper class (DCP_Stream), then change the dcp_stream() function below to be a method on the new class.

This would also remove the need for all the `ctx->` additions below.

Line:56, tests/ep_testsuite_dcp.cc -> Can this be made const (and passed by reference)?

Line:1125, tests/ep_testsuite_dcp.cc -> IMHO this is pretty ugly - how about making a constructor which sets sensible defaults for most common arguments (vbid, flags, start=0, end=~0 etc) and then just overriding the arguments which are different. For example, maybe something like this:

 DCP_Stream stream;
 stream.seqnos = {95, 209};
 stream.snap_seqnos = {95, 209};
 stream.expected_mutations = 105;
 stream.expected_deletions = 100;
 stream.expected_markers = 2;
 stream.run();

-------------------------------------
author: Emerson Nolan
date: 2016-02-17 17:00:09.835000000

Patch Set 3:

(1 comment)

Line:54, tests/ep_testsuite_dcp.cc -> This makes sense, it would look a lot clearer too.

However, the whole reason why I moved the attributes to a separate struct context was so as to have the capability to feed in multiple such contexts to dcp_stream. This is so that we can create multiple streams under the same producer. See dependent patch.

Can I get some thoughts on how I could make this look cleaner so that I could achieve the above capability?

-------------------------------------
author: Ashlee Kent
date: 2016-02-17 17:02:44.087000000

Patch Set 3:

(1 comment)

Line:54, tests/ep_testsuite_dcp.cc -> Sure, keep the DCP_Stream class (which represents a single stream), and then modify the existing dcp_stream() function to represent a producer - say create Test_DCP_Producer / Test_DCP_Consumer classes, with a run() method or similar which takes a std::vector of DCP_Stream objects. The run() method will essentially be what dcp_stream() function does today.

-------------------------------------
author: Emerson Nolan
date: 2016-02-17 19:08:19.420000000

Patch Set 3:

(3 comments)

Line:37, tests/ep_testsuite_dcp.cc -> Done

Line:54, tests/ep_testsuite_dcp.cc -> Done

Line:56, tests/ep_testsuite_dcp.cc -> Done

-------------------------------------
author: Tate Garrett
date: 2016-02-19 20:51:18.984000000

Change has been successfully cherry-picked as 755dfd53e20aa3f92ce9b82e2b3ba8f583c2ab98

-------------------------------------
