DESCRIPTION

MB-22041 [2/N]: Add ExecutorPool tests

Testing that readers, writers, auxIO and nonIO threads can be limited.

Only tests which are valid prior to dynamic thread changes can be added
here - e.g., can't test that the number of workers can be increased
beyond the original value, because it can't yet.

Change-Id: I48b1b0bbd46eba35c82d28243c2c36d791871a67


COMMENTS

author: Jace Townsend
date: 2017-02-15 13:26:31.722000000

Uploaded patch set 10.

-------------------------------------
author: Jace Townsend
date: 2017-02-15 13:32:47.389000000

Patch Set 10:

(11 comments)

-------------------------------------
author: Hugo Blankenship
date: 2017-02-15 13:55:49.757000000

Patch Set 10: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/2511/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/3286/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/3685/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3894/ : SUCCESS

-------------------------------------
author: Kymani Ramirez
date: 2017-02-15 14:16:28.614000000

Patch Set 10:

(1 comment)

Thanks for addressing the comments - just have one outstanding issue with the test

Line:102, tests/module_tests/executorpool_test.cc -> problem with using explicit time is that if it gets delayed on heavily loaded machine - can get intermittent failures.  Its better to wait for explicit task to be scheduled and run - and then have a timeout so if not happened after extended time e.g. 30 seconds then report error.

-------------------------------------
author: Kymani Ramirez
date: 2017-02-15 14:16:39.310000000

Patch Set 10: Code-Review-1

-------------------------------------
author: Jace Townsend
date: 2017-02-15 14:46:27.033000000

Patch Set 10:

(1 comment)

Line:102, tests/module_tests/executorpool_test.cc -> True - I've been wondering about this. For the tasks where it /will/ run I'll sort it out to be a bit more explicit, but for proving a task /won't/ run I've been a bit uncertain about. May bin the cases where a task should /not/ run and do a set of tests of smaller components.

-------------------------------------
author: Kymani Ramirez
date: 2017-02-15 16:34:03.877000000

Patch Set 10:

(1 comment)

Line:102, tests/module_tests/executorpool_test.cc -> where do you have the case where a task should /not/ run?

-------------------------------------
author: Adrianna Holmes
date: 2017-02-15 23:41:28.505000000

Patch Set 10: Code-Review-1

(1 comment)

Line:231, CMakeLists.txt -> Do we need this .h ?

-------------------------------------
author: Jace Townsend
date: 2017-02-16 10:15:18.883000000

MISMATCHED INLINE COMMENT
Line:102, tests/module_tests/executorpool_test.cc -> Probably wasn't very well structured - but at line 94 it was expected that one task would be waiting in the ThreadGate, but the second task couldn't have run yet (changed the tests since though). It seemed more relevant prior to dynamic threads, where the worker thread is there, but not allowed to take up work if it would exceed the maximum ¯\_(ツ)_/¯ Gonna aim for tests of smaller chunks that will hopefully be more robust wrt. timing

-------------------------------------
author: Jace Townsend
date: 2017-02-16 10:15:18.883000000

MISMATCHED INLINE COMMENT
Line:231, CMakeLists.txt -> oops, no. Removed

-------------------------------------
