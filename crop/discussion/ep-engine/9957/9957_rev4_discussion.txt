DESCRIPTION

WIP: Implement the observe registry

I have done my first iteration of the observe table that will
be held in every server. In the final commit I will include
tests that go along with this (although I have done a fair
amount of testing with my java client already). I plan on
getting the callbacks hooked into this this weekend so I
am looking for any major design issues with my current
implementation. Performance issues are welcome, but what is
most important is that the basic structure is correct so I
can begin implementing the next phase of the observe command.

Note This commit doesn't include.

- A way for observe tables to timeout.
- Any callback hooks. We can just add and remove from tables.
- A way to get a delta of changes.
- Unit tests (Will be in the final commit of this)
- Has not been fine tuned for performance.

All of the above will come in future commits.

This is for comments only!

DO NOT COMMIT

Change-Id: I25502bed66afcd5eaa7f5da465805abf1a2b8938


COMMENTS

author: Kenny Maynard
date: 2011-10-07 19:57:55.032000000

Uploaded patch set 4.

-------------------------------------
author: Nora Conway
date: 2011-10-07 21:37:33.255000000

Patch Set 4: (6 inline comments)



Line:30, observe_registry.cc -> Contrary to your instructions, here's an optimization: you can avoid the 2 calls to find() by having only 1 call.

Line:42, observe_registry.cc -> Here's another 2 calls to find() when a single one should be enough (and I see this also further down the file, too).

Line:103, observe_registry.cc -> What if the objs_key is already on the list?  That is, when client observes the same key+cas more than once?

Line:113, observe_registry.cc -> This early return skips the unlock()?

In general, passing around all the LockHolders bothers me.  The early unlocking optimization doesn't feel like enough of a win compared to the overloaded API signatures?

Line:3242, ep_engine.cc -> Wondering if the getObsereSetState() should just return the iterator.  That way the client won't care whether there's a state_map or different data structure "behind the scenes" for less coupling.

Line:3620, ep_engine.cc -> Minor API style thing -- it looks like the API for observeKey() isn't symmteric with unobserveKey() ?

One takes a observe_key_t, and the other takes a string and cas.  Should both just take the same thing?

-------------------------------------
author: Kenny Maynard
date: 2011-10-11 18:09:01.121000000

Patch Set 4: (6 inline comments)



Line:30, observe_registry.cc -> Yeah, something I was already planning on doing.

Line:42, observe_registry.cc -> Will do.

Line:103, observe_registry.cc -> This is a bug left over from when this was a map. I'll fix it.

Line:113, observe_registry.cc -> Done

Line:3242, ep_engine.cc -> I don't really like the idea of an iterator here at the moment. The reason is because I would have to lock each list until the iterator made it all of the way through the list and this open up the potential for something dumb to happen. For example reading half of the list and then stopping for a while. This will block other operations from completing.

Line:3620, ep_engine.cc -> I'll make them both similar.

-------------------------------------
