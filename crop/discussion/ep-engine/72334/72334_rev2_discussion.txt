DESCRIPTION

[Refactor]: Split add() across KVBucket and VBucket classes

VBucket and HT related functions in KVBucket are moved to VBucket class.

Change-Id: I303835de504aaafd6ece427b2c8bbf37baf50506


COMMENTS

author: Adrianna Holmes
date: 2017-01-23 05:43:00.797000000

Uploaded patch set 2.

-------------------------------------
author: Hugo Blankenship
date: 2017-01-23 05:43:09.004000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3111/ (1/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-23 05:45:45.718000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/2949/ (2/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-23 05:47:28.981000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/2576/ (3/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-23 05:47:41.727000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/1781/ (4/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-23 06:04:03.437000000

Patch Set 2: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/2949/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/2576/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/1781/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3111/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-01-23 09:26:32.277000000

Patch Set 2: Code-Review+1

(2 comments)

Functionality looks good, couple of improvements which could be made:

Line:1656, src/vbucket.cc -> I'm seeing a common idiom here - we lookup a HT bucket, then find on it, then do somthing with the result.

I suggest you create a helper function which does this functionality and returns a pair of:

 {StoredValue*, std::unique_lock<>}

In the case of success, this would be a non-null pointer, on fail it would be null; but in both cases the lock is kept, so callers can then insert a new element (as long as the lock is in scope).

This is actually similar to Will's suggestion the other day about a object which holds a StoredValue and the lock.

Line:1703, src/vbucket.cc -> Might as well just move the return to the end of this case - that makes all the case statements consistent.

-------------------------------------
author: Adrianna Holmes
date: 2017-01-24 23:21:43.466000000

Patch Set 2:

(2 comments)

Line:1656, src/vbucket.cc -> We have a refactor task https://issues.Piper Jefferson.com/browse/MB-22384. We can do it in this

Line:1703, src/vbucket.cc -> Done

-------------------------------------
author: Tate Garrett
date: 2017-01-25 12:25:53.737000000

Change has been successfully cherry-picked as af3b9166f708e2ad52c15ae3b3c1a16da0ca68bd by Ashlee Kent

-------------------------------------
