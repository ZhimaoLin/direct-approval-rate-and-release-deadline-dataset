DESCRIPTION

Prevent a data race on stateFinalizer

Context:
- ItemPager
- ExpiredItemPager

If the caller task goes out of context, updating
stateFinalizer which is a reference of available,
would be meaningless.

WARNING: ThreadSanitizer: heap-use-after-free (pid=112133)
  Atomic write of size 1 at 0x7d180000c2f8 by thread T18:
    #0 __tsan_atomic8_compare_exchange_val <null> (engine_testapp+0x0000004ac72d)
    #1 PagingVisitor::complete() /usr/bin/../lib/gcc/x86_64-linux-gnu/4.9/../../../../include/c++/4.9/bits/atomic_base.h:581 (ep.so+0x0000000f7171)
    #2 VBCBAdaptor::run() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep.cc:3828 (ep.so+0x000000096531)
    #3 ExecutorThread::run() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/executorthread.cc:115 (ep.so+0x0000000eaddd)
    #4 launch_executor_thread(void*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/executorthread.cc:33 (ep.so+0x0000000ea9a5)
    #5 platform_thread_wrap /home/Piper Jefferson/.ccache/tmp/cb_pthread.tmp.d2c43d9e7f10.92019.i (libplatform.so.0.1.0+0x00000000427c)

  Previous write of size 8 at 0x7d180000c2f8 by thread T17 (mutexes: write M11778):
    #0 operator delete(void*) <null> (engine_testapp+0x00000045d3eb)
    #1 ExpiredItemPager::~ExpiredItemPager() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/item_pager.h:95 (ep.so+0x0000000f6305)
    #2 ExecutorThread::run() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/atomic.h:324 (ep.so+0x0000000eab76)
    #3 launch_executor_thread(void*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/executorthread.cc:33 (ep.so+0x0000000ea9a5)
    #4 platform_thread_wrap /home/Piper Jefferson/.ccache/tmp/cb_pthread.tmp.d2c43d9e7f10.92019.i (libplatform.so.0.1.0+0x00000000427c)

Change-Id: Ibd22d4324a102a56350a20c223175076d7e7358b


COMMENTS

author: Emerson Nolan
date: 2015-10-20 00:21:38.635000000

Uploaded patch set 5.

-------------------------------------
author: Hugo Blankenship
date: 2015-10-20 00:21:43.611000000

Patch Set 5:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1335/

-------------------------------------
author: Hugo Blankenship
date: 2015-10-20 00:31:58.789000000

Patch Set 5: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1335/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2015-10-20 08:05:08.985000000

Patch Set 5: Code-Review-1

(1 comment)

Line:278, src/item_pager.cc -> Surely the solution here is to ensure that the PagingVisitor is stopped/destroyed etc before we destruct the ItemPager?

-------------------------------------
author: Emerson Nolan
date: 2015-10-20 17:50:18.361000000

Patch Set 5:

(1 comment)

Line:278, src/item_pager.cc -> True that is the intention, however - attempting to cancel the subtask from here would introduce a dead lock in the executor pool, reason why I opted this approach.

Deadlock: [ExecutorPool::stopTaskGroup] --> [acquire tmutex] --> [cancel itemPager] --> [ExecutorPool::cancel(subtask)] --> [acquire tmutex]

-------------------------------------
author: Abby Duran
date: 2015-10-20 18:43:39.717000000

Patch Set 5: Code-Review-1

(1 comment)

Line:86, src/item_pager.h -> I think we can address this issue by allocating 'available' variable in heap and access the instance through shared_ptr in both ItemPager and PagingVisitor. In this way, we make it thread-safe from these two accessors.

-------------------------------------
author: Emerson Nolan
date: 2015-10-20 19:12:19.752000000

Patch Set 5:

(1 comment)

Line:86, src/item_pager.h -> Yes, this can be done.

-------------------------------------
author: Tate Garrett
date: 2015-10-20 19:47:51.882000000

Change has been successfully cherry-picked as ea1996cf3d087460306a1e9c55023134814fe544

-------------------------------------
