DESCRIPTION

MB-11524 Check pendingQueue on poll to avoid starvation

We limit number of threads that can work on a task queue by
blocking excess tasks in a pendingQueue.
However in mixed priority scenarios, we can end up with
starvation if tasks are blocked in low priority pendingQueue
while capacity is released to a high priority task queue.

Fix is to release capacity when task finishes execution, and
have the task queues poll the pendingQueue.

This avoids starvation and also reduces mutex contentions.

Change-Id: Iaeb08a53d31d21b463502085198d07923c0731c7


COMMENTS

author: Ellie Kidd
date: 2014-06-26 07:03:10.783000000

Uploaded patch set 1.

-------------------------------------
author: Abby Duran
date: 2014-06-26 08:08:30.191000000

Patch Set 1: Code-Review+2

Sundar,

Did you verify this fix?

Btw, we need to increase the test coverage for global thread pool scheduling as a separate task.

As another future improvement, we need to move a shard pending queue to the global thread pool because it can cause some confusions with future queue, ready queue, and pending queue inside the global thread pool.

-------------------------------------
author: Ellie Kidd
date: 2014-06-26 18:31:34.847000000

Patch Set 1: Verified+1

Thanks Chiyoung, I agree with your comments completely. In fact I started on a comprehensive module test for Global IO thread pool but was abandoned due to high priority bugs. 
I will also think of a way to move the shard pending Queue into the global thread pool for a cleaner approach as a separate commit.

This fix solves the bug in my local testing and no regressions with unit tests or simple test

-------------------------------------
