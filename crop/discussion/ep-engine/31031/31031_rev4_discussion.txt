DESCRIPTION

MB-9723: Spawn threads based on CPU core count

Spawn fixed number of threads based on the number of CPU
cores present in each machine and allocate these threads
to the various Task Groups as follows...
1. Spawn 2 X number of cpu cores threads in total
2. ceil(10 % of total threads) are aux io threads
3. ceil(10 % of total threads) are non io threads
4. floor (half of the remaining threads) are writer threads
5. finally the remaining threads are reader threads
Examples:
CPU COUNT | # READERS | # WRITERS | # AUX IO | # NON IO
2         | 1         | 1         | 1        | 1
4         | 3         | 3         | 1        | 1
8         | 6         | 6         | 2        | 2
Change-Id: I9c572cfc4e2ff051b87b27e652b467d5087baf37


COMMENTS

author: Ellie Kidd
date: 2013-12-14 21:27:38.360000000

Uploaded patch set 4.

-------------------------------------
author: Ellie Kidd
date: 2013-12-14 21:28:23.711000000

Patch Set 4:

Hi Chiyoung, Patchset 4 has all your comments addressed.
thanks

-------------------------------------
author: Abby Duran
date: 2013-12-15 02:48:15.940000000

Patch Set 4: Code-Review-1

(1 comment)

Line:308, src/scheduler.cc -> Why the numer of max threads for the non-io and aux-io tasks is set to max number of global threads? Does it mean that we can have all the threads work on auxio or non-io tasks?

-------------------------------------
author: Ellie Kidd
date: 2013-12-15 07:05:51.040000000

Patch Set 4:

(1 comment)

Line:308, src/scheduler.cc -> No, Chiyoung. This is only meant for uniform initialization of the class members. We appropriately set the max number of workers for the aux io and non-io when we actually allocate the threads in startWorkers() function below...

-------------------------------------
author: Abby Duran
date: 2013-12-16 05:02:58.948000000

Patch Set 4: Verified+1 Code-Review+2

-------------------------------------
