DESCRIPTION

Fix to the memory over-accounting issue caused by shared pointers.

There was a memory over-accounting issue because we account the
memory usage of a value pointed by both hashtable and checkpoint
twice. This fixes the above issue by accounting the memory usage
of values in Blob constructor and deconstructor.

Change-Id: I574f8a4444da2f3cb04689b0a8770adb79980052


COMMENTS

author: Abby Duran
date: 2011-03-23 18:39:48.488000000

Patch Set 1: Verified



-------------------------------------
author: Abby Duran
date: 2011-03-23 18:48:45.975000000

Patch Set 1:

I don't know why git shows more changes than I actually did.

For item.hh, the following are the main changes:

~Blob() {
    if (stats) {
        stats->currentSize.decr(size);
        assert(stats->currentSize.get() < GIGANTOR);
    }
}

static void init(EPStats *st) {
    stats = st;
}

private:

explicit Blob(const char *start, const size_t len) :    size(static_cast<uint32_t>(len)) {
    std::memcpy(data, start, len);
    if (stats) {
        stats->currentSize.incr(size);
        assert(stats->currentSize.get() < GIGANTOR);
    }
}

explicit Blob(const char c, const size_t len) : size(static_cast<uint32_t>(len)) {
    std::memset(data, c, len);
    if (stats) {
        stats->currentSize.incr(size);
        assert(stats->currentSize.get() < GIGANTOR);
    }
}

-------------------------------------
