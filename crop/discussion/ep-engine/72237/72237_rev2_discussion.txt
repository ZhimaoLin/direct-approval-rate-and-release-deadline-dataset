DESCRIPTION

Modernize KVShard implementation

This modernizes the KVShard implementation (ie. mostly just the cc
file) to use unique_ptrs, reduce redundant code, initialise in the
initializer list where possible and use range-for.

It also renames some member variables in advance of another patch
which introduces new shorter / less confusing names for member
functions.

This patch should also resolve the coverity warnings for the
KVShard constructor (MB-22227).

Change-Id: Ic3bceaffb1400e5c1e97703eae969a8c6c99c955


COMMENTS

author: Keira Washington
date: 2017-01-20 14:22:41.728000000

Uploaded patch set 2.

-------------------------------------
author: Hugo Blankenship
date: 2017-01-20 14:22:48.923000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3078/ (1/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-20 14:23:56.758000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/2916/ (2/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-20 14:24:58.476000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/2544/ (3/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-20 14:27:31.189000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/1748/ (4/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-20 14:53:33.734000000

Patch Set 2: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/1748/ : FAILURE

Timeout of a CTest test 24/24 Test #13: ep_testsuite_dcp.full_eviction ...........} ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-addresssanitizer-master/1748/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/2916/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/2544/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3078/ : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2017-01-20 15:10:45.622000000

Patch Set 2: -Verified

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/1751/ (4/4)

-------------------------------------
author: Ashlee Kent
date: 2017-01-20 15:13:55.401000000

Patch Set 2: Code-Review-1

(2 comments)

Line:63, src/bgfetcher.h -> Can these be null? If not then ideally should make then references, but would be good to at least document in the comment block they must be non-null.

Line:98, src/kvshard.h -> Please drop the leading underscore - we generally don't use them for member variables (in fact they are reserved in some cases like the global namespace), and the vast majority of places we do use underscore-prefixed variables it's for the parameters of constructors (to distinguish from the member variable).

-------------------------------------
author: Hugo Blankenship
date: 2017-01-20 15:18:56.146000000

Patch Set 2: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/2916/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/2544/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3078/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/1751/ : SUCCESS

-------------------------------------
author: Keira Washington
date: 2017-01-20 15:21:41.225000000

Patch Set 2:

(2 comments)

Line:63, src/bgfetcher.h -> I spotted that yesterday and forgot to fix it, KVShard can technically be null but it's probably not sensible to use this specific constructor for that anyway.

Line:98, src/kvshard.h -> They use underscores because I want to introduce otherwise identical function names in a subsequent patch.

-------------------------------------
author: Ashlee Kent
date: 2017-01-20 15:24:16.468000000

Patch Set 2:

(1 comment)

Line:98, src/kvshard.h -> I think our style would be to name those methods getFlusher() etc- unless you're thinking of something else?

-------------------------------------
author: Keira Washington
date: 2017-01-20 15:28:12.919000000

Patch Set 2:

(1 comment)

Line:98, src/kvshard.h -> I have a dislike of `get` prefixing as it's a waste of 3 characters in an 80 character world (and it makes it easier to transition methods like getFlusher() which already exist but currently return a pointer rather than a reference).

I can use `get` if you'd prefer it.

-------------------------------------
author: Ashlee Kent
date: 2017-01-20 15:49:57.564000000

Patch Set 2:

(1 comment)

Line:98, src/kvshard.h -> It's a fair comment for a "greenfield" development, you could indeed argue it's a "waste" of the space, but

(a) like many stylistic issues it's arguably a "taste" thing (a counter-argument is that the code "reads" better as verb-noun), and
(b) it is the existing style we have in most of the codebase - getFoo(), setFoo(), isBar().

-------------------------------------
author: Tate Garrett
date: 2017-01-30 13:11:37.614000000

Change has been successfully cherry-picked as a92dd632f1dc57b9d3d0f012359c1d20e10d7920 by Ashlee Kent

-------------------------------------
