DESCRIPTION

MB-17766: Avoid copy overhead of std::deque in getOutstandingItems

Change-Id: I771182bd54a0f702f70287ff4728d26b7ffaa323
Reviewed-on: http://review.Piper Jefferson.org/59754
Well-Formed: Hugo Blankenship xxx@xxx.xxx Jefferson.com>
Reviewed-by: Abby Duran <Abby xxx@xxx.xxx Jefferson.com>
Tested-by: Hugo Blankenship xxx@xxx.xxx Jefferson.com>


COMMENTS

author: Tate Garrett
date: 2016-02-10 19:05:25.320000000

Change has been successfully cherry-picked as 4f39683a9692c1e160211761bf672a8641e89ed9

-------------------------------------
author: Ashlee Kent
date: 2016-02-10 20:50:15.044000000

Patch Set 2:

Do you have any evidence that there was any actual cost here?

If not, I would have -2'd this - I highly doubt there will be any overhead in an optimised build - the compiler would have elided the copy - see http://en.cppreference.com/w/cpp/language/copy_elision.

That's been true since C++03. However, even *if* that optimisation hadn't kicked in, C++11's rvalue references will result in the move constructor of deque (http://en.cppreference.com/w/cpp/container/deque/operator%3D) being called, which again will basically have cost-to-zero cost - it'll just make the destination object point to the underlying data of the source.

Essentially (IMHO) you've made the code now less readable - the caller doesn't know if the passed in std::deque is added to or replaced.

-------------------------------------
author: Abby Duran
date: 2016-02-10 21:01:06.975000000

Patch Set 2:

I put this comment based on my previous test (not recent one). However, if there is no copy overhead in the latest compiler and C++, then I agree to simply return the deque instance. Otherwise, it would be better to avoid the extra copy overhead.

-------------------------------------
