DESCRIPTION

MB-19982: Don't hold connsLock for duration of dcp stats

The Mb identified a lock inversion between dcp->set_vbucket_state
and get_stats("dcp")

The get_stats path uses doDcpStats which holds connsLock whilst
all connections are visited and their stats gathered. When getting
a PassiveStream's stats the buffer.mutex is needed.

The set_vbucket_state obtains the same locks in the reverse order.
Whilst buffer.mutex is held it will try to get connsLock
(via EventuallyPersistentStore::setVBucketState calling into dcpConnMap).

This fix aims to address this issue by having a special class that
allows for the connsLock to be dropped when calling the visitor.

ref-counted pointers should stop any issues where the connection
being visited is freed/dropped from another thread.

Change-Id: Iff5f7be1d78278a4b00bb07b859697cca3115299


COMMENTS

author: Jim WNathalie Landryer
date: 2016-06-24 13:19:23.295000000

Uploaded patch set 4.

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 13:19:26.969000000

Patch Set 4:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/662/

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 13:19:28.925000000

Patch Set 4:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-3.0.x/279/

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 13:19:33.221000000

Patch Set 4: Well-Formed+1

Permission granted to commit: 

http://server.jenkins.Piper Jefferson.com/job/restricted-branch-check/17060/artifact/restricted.html : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 13:31:21.925000000

Patch Set 4: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-3.0.x/279/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-3.0.x/279/ )

ThreadSanitizer issue: lock-order-inversion (potential deadlock) ??:0 __interceptor_pthread_mutex_lock  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-3.0.x/279/ )

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 13:33:34.540000000

Patch Set 4: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/662/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-06-24 13:43:35.351000000

Patch Set 4:

(3 comments)

Line:144, src/connmap.h -> Probably worth expanding this by saying it's done by taking a copy of the connections list; hence it still consistent even though lock isn't held.

I'd also be tempted to make this method `const` - if the function actually tried to modify each element in the list is would be surprised, as any changes would essentially be lost as they only operate on a copy.

Line:147, src/connmap.h -> I think the name could be possibly more explicit - "NoLock" is kinda just describing the implementation detail; and even the it /is/ locked in terms of getting a consistent set.

How about eachRCU ? for_each_copy ? ...?

Line:153, src/connmap.h -> Nit: Extra tab / whitespace.

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-06-24 14:07:06.357000000

Patch Set 4:

(2 comments)

Line:147, src/connmap.h -> As usual the name is the trick ;) for each copy could work, or along those lines. Ideally I don't want the fact that connsLock exists to be exposed, so NoLock does suck a bit :)

Line:153, src/connmap.h -> damn it vim

-------------------------------------
author: Tate Garrett
date: 2016-06-28 14:18:56.808000000

Change has been successfully cherry-picked as dd3b6ae5e919bf51adaf5183fc8f1a076eac5357 by Ashlee Kent

-------------------------------------
