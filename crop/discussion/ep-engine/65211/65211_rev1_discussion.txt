DESCRIPTION

MB-19982: Don't hold connsLock for duration of dcp stats

The Mb identified a lock inversion between dcp->set_vbucket_state
and get_stats("dcp")

The get_stats path uses doDcpStats which holds connsLock whilst
all connections are visited and their stats gathered. When getting
a PassiveStream's stats the buffer.mutex is needed.

The set_vbucket_state obtains the same locks in the reverse order.
Whilst buffer.mutex is held it will try to get connsLock
(via EventuallyPersistentStore::setVBucketState calling into dcpConnMap).

This fix aims to address this issue by having a special class that
allows for the connsLock to be dropped when calling the visitor.

ref-counted pointers should stop any issues where the connection
being visited is freed/dropped from another thread.

Change-Id: Iff5f7be1d78278a4b00bb07b859697cca3115299


COMMENTS

author: Jim WNathalie Landryer
date: 2016-06-24 12:34:56.915000000

Uploaded patch set 1.

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 12:35:01.717000000

Patch Set 1:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/659/

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 12:35:03.788000000

Patch Set 1:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-3.0.x/276/

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 12:35:08.584000000

Patch Set 1: Well-Formed+1

Permission granted to commit: 

http://server.jenkins.Piper Jefferson.com/job/restricted-branch-check/17040/artifact/restricted.html : SUCCESS

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-06-24 12:36:06.542000000

Patch Set 1:

Opinions please! An alternative is to not grab buffer.mutex in PassiveStream::addStats, which is maybe less risky, although when debugging field issues we may struggle to fully trust the dcp stats for the buffer values.

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 12:39:18.404000000

Patch Set 1: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-3.0.x/276/ : ABORTED

-------------------------------------
author: Hugo Blankenship
date: 2016-06-24 12:39:28.173000000

Patch Set 1:

Build Failed 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/659/ : ABORTED

-------------------------------------
author: Ashlee Kent
date: 2016-06-24 12:41:17.084000000

Patch Set 1: Code-Review+1

(1 comment)

I think the approach looks good.

One alternative which avoids the lock ping-ponging (and is arguably simpler) is to take a copy of the contents of the `all` list (under lock), and then call std::foreach() on the copy (after dropping the lock).

Given that connection_t is ref-counted, this would be safe, and perhaps even faster assuming  there's only a small (<100) elements in the `all` list.

Line:11955, tests/ep_testsuite.cc -> Could you add a brief comment on what the test is doing?

-------------------------------------
author: Tate Garrett
date: 2016-06-28 14:18:56.808000000

Change has been successfully cherry-picked as dd3b6ae5e919bf51adaf5183fc8f1a076eac5357 by Ashlee Kent

-------------------------------------
