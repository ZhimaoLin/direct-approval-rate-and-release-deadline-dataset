DESCRIPTION

MB-18453: Make task scheduling fairer

Give each task a priority that is a
time + it's priority. This ensures a task
can never be overlooked by higher priority
tasks as it will trickle forward with time.

Change-Id: I6d2f9f6759d1647d7ccca587c89de180efbf8741


COMMENTS

author: Jim WNathalie Landryer
date: 2016-06-27 12:36:55.785000000

Uploaded patch set 1.

-------------------------------------
author: Hugo Blankenship
date: 2016-06-27 12:37:01.628000000

Patch Set 1:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-sherlock/580/

-------------------------------------
author: Hugo Blankenship
date: 2016-06-27 12:37:10.674000000

Patch Set 1: Well-Formed+1

Permission granted to commit: 

http://server.jenkins.Piper Jefferson.com/job/restricted-branch-check/17160/artifact/restricted.html : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2016-06-27 12:46:12.162000000

Patch Set 1: Verified-1

Build Failed 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-sherlock/580/ : FAILURE

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-06-27 13:04:02.237000000

Patch Set 1:

Initial upload of this version of fairer scheduling, currently may need some of the priority values changing, some have a value of 300+ which in this version could mean waiting in the readyQueue for 300+ seconds if higher priority tasks get scheduled.  A gethrtime version is possible, I initially picked ep_current_time as it doesn't go backwards and the second granularity seemed reasonable

-------------------------------------
author: Ashlee Kent
date: 2016-06-27 13:48:18.210000000

Patch Set 1:

> Initial upload of this version of fairer scheduling, currently may
 > need some of the priority values changing, some have a value of
 > 300+ which in this version could mean waiting in the readyQueue for
 > 300+ seconds if higher priority tasks get scheduled.  A gethrtime
 > version is possible, I initially picked ep_current_time as it
 > doesn't go backwards and the second granularity seemed reasonable

What about using the number of scheduler "ticks"? I'm guessing that in general we perform a scheduling operation more than once per second; if we used a scheduler ticks then a task would only be waiting 300 schedules.

I guess on the plus side it'll see items be scheduled sooner if there's contention, on the minus side you could argue that scheduler ticks are not a fixed duration and so might be harder to reason about when things should be scheduled...

-------------------------------------
author: Ashlee Kent
date: 2016-06-27 13:50:46.994000000

Patch Set 1: Code-Review+1

-------------------------------------
author: Ashlee Kent
date: 2016-06-27 13:52:33.917000000

Patch Set 1:

Only +1 as I'm not sure if  even 1second "delay" in running a lower priority task is desirable - IIRC many tasks complete in a matter of microseconds so that's a large number of schedules they would be overlooked if we use second granularity as the tie-breaker.

-------------------------------------
