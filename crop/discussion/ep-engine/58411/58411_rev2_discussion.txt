DESCRIPTION

[DCP Consumer]: Grab streamMutex when transitioning to 'dead' on DCP_STREAM_END

Passive stream should grab streamMutex lock before transitioning to dead
state upon processing the DCP_STREAM_END packet. Lock needs to be acquired
before any state transitions, as transitionState() function can be called
from multiple threads and all those can change the 'state_' member in the
stream object

Change-Id: If17b41555c26555a6fb3fd983768d758221a239d


COMMENTS

author: Adrianna Holmes
date: 2016-01-09 00:14:49.101000000

Patch Set 2: Commit message was updated

-------------------------------------
author: Hugo Blankenship
date: 2016-01-09 00:14:53.204000000

Patch Set 2:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1186/

-------------------------------------
author: Hugo Blankenship
date: 2016-01-09 00:43:14.764000000

Patch Set 2: Verified-1

Build Failed 

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1186/ : FAILURE

-------------------------------------
author: Hugo Blankenship
date: 2016-01-09 00:44:46.154000000

Patch Set 2: -Verified

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1187/

-------------------------------------
author: Hugo Blankenship
date: 2016-01-09 00:57:28.265000000

Patch Set 2: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1187/ : SUCCESS

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-01-11 11:38:19.496000000

Patch Set 2: Code-Review-1

(1 comment)

Line:1357, src/dcp/stream.cc -> Can PassiveStream::transitionState not acquire the lock instead of the caller? Also note that _state is an atomic which may help reduce the locked scope

-------------------------------------
author: Adrianna Holmes
date: 2016-01-11 19:33:44.207000000

Patch Set 2:

(1 comment)

Line:1357, src/dcp/stream.cc -> With current way of using locks  PassiveStream::transitionState is called after the streamMutex lock is held by the caller.
We can change that in a separate commit. This commit tries to address a bug in the current way of handling the locks.

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-01-13 14:08:12.031000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Abby Duran
date: 2016-01-13 15:30:40.352000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Tate Garrett
date: 2016-01-13 15:30:43.067000000

Change has been successfully cherry-picked as d3c82e818cf6f556b0109c01955dee03e2841951

-------------------------------------
