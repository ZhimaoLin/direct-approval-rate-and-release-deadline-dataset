DESCRIPTION

Address deadlock due to lock-inversion in DcpConsumer/DcpStream

Getting rid of the logic to process all the buffered messages
in the setDead function of the passive stream (in case of normal
shutdown) invoked from the destructor of DcpConsumer. This should
rather be done by the ProcessorTask, whose completeBeforeShutdown
flag is now set to True.

WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=131310)
Cycle in lock order graph: M25975 (0x7d5000016940) => M12635 (0x7d5000018120) => M25975

  Mutex M12635 acquired here while holding mutex M25975 in main thread:
    #0 pthread_mutex_lock <null> (engine_testapp+0x00000047f130)
    #1 cb_mutex_enter /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/platform/src/cb_pthreads.cc:189 (libplatform.so.0.1.0+0x000000004d92)
    #2 Mutex::acquire() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/mutex.cc:31 (ep.so+0x00000010a199)
    #3 ExecutorPool::_wake(unsigned long) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/locks.h:71 (ep.so+0x0000000e22a6)
    #4 ExecutorPool::wake(unsigned long) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/executorpool.cc:345 (ep.so+0x0000000e23d1)
    #5 Flusher::wake() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/flusher.cc:158 (ep.so+0x0000000ef466)
    #6 EventuallyPersistentStore::queueDirty(RCPtr<VBucket>&, StoredValue*, LockHolder*, unsigned long*, bool, bool, bool, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/flusher.h:89 (ep.so+0x00000007ff73)
    #7 EventuallyPersistentStore::setWithMeta(Item const&, unsigned long, unsigned long*, void const*, bool, bool, unsigned char, bool, ExtendedMetaData*, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep.cc:2305 (ep.so+0x00000008d664)
    #8 PassiveStream::processMutation(MutationResponse*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/stream.cc:1301 (ep.so+0x000000073d91)
    #9 PassiveStream::messageReceived(DcpResponse*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/stream.cc:1176 (ep.so+0x000000073862)
    #10 DcpConsumer::mutation(unsigned int, void const*, unsigned short, void const*, unsigned int, unsigned long, unsigned short, unsigned int, unsigned char, unsigned int, unsigned long, unsigned long, unsigned int, unsigned char, void const*, unsigned short) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/consumer.cc:291 (ep.so+0x00000005728b)
    #11 EvpDcpMutation(engine_interface*, void const*, unsigned int, void const*, unsigned short, void const*, unsigned int, unsigned long, unsigned short, unsigned int, unsigned char, unsigned long, unsigned long, unsigned int, unsigned int, void const*, unsigned short, unsigned char) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep_engine.cc:1633 (ep.so+0x0000000ae41a)
    #12 mock_dcp_mutation(engine_interface*, void const*, unsigned int, void const*, unsigned short, void const*, unsigned int, unsigned long, unsigned short, unsigned int, unsigned char, unsigned long, unsigned long, unsigned int, unsigned int, void const*, unsigned short, unsigned char) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/memcached/programs/engine_testapp/engine_testapp.cc:618 (engine_testapp+0x0000004c6195)
    #13 test_consumer_backoff_stat(engine_interface*, engine_interface_v1*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/tests/ep_testsuite.cc:5396 (ep_testsuite.so+0x000000073d33)
    #14 execute_test(test, char const*, char const*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/memcached/programs/engine_testapp/engine_testapp.cc:1090 (engine_testapp+0x0000004c4192)
    #15 __libc_start_main /build/buildd/eglibc-2.15/csu/libc-start.c:226 (libc.so.6+0x00000002176c)

  Mutex M25975 acquired here while holding mutex M12635 in main thread:
    #0 pthread_mutex_lock <null> (engine_testapp+0x00000047f130)
    #1 cb_mutex_enter /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/platform/src/cb_pthreads.cc:189 (libplatform.so.0.1.0+0x000000004d92)
    #2 Mutex::acquire() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/mutex.cc:31 (ep.so+0x00000010a199)
    #3 PassiveStream::processBufferedMessages(unsigned int&) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/locks.h:71 (ep.so+0x000000072453)
    #4 PassiveStream::setDead_UNLOCKED(end_stream_status_t, LockHolder*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/stream.cc:1033 (ep.so+0x000000071d4a)
    #5 PassiveStream::setDead(end_stream_status_t) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/stream.cc:1056 (ep.so+0x000000072ce7)
    #6 DcpConsumer::closeAllStreams() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/consumer.cc:874 (ep.so+0x000000055cc1)
    #7 DcpConsumer::~DcpConsumer() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/consumer.cc:112 (ep.so+0x000000055751)
    #8 DcpConsumer::~DcpConsumer() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/consumer.cc:110 (ep.so+0x000000055e35)
    #9 Processer::~Processer() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/atomic.h:271 (ep.so+0x000000054bfd)
    #10 ~SingleThreadedRCPtr /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/atomic.h:271 (ep.so+0x0000000e6202)
    #11 ExecutorPool::stopTaskGroup(unsigned long, task_type_t, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/executorpool.cc:585 (ep.so+0x0000000e694e)
    #12 EventuallyPersistentStore::~EventuallyPersistentStore() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep.cc:471 (ep.so+0x00000007e246)
    #13 EventuallyPersistentEngine::~EventuallyPersistentEngine() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep_engine.cc:6342 (ep.so+0x0000000cac4a)
    #14 EvpDestroy(engine_interface*, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep_engine.cc:144 (ep.so+0x0000000acef7)
    #15 mock_destroy(engine_interface*, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/memcached/programs/engine_testapp/engine_testapp.cc:98 (engine_testapp+0x0000004c4c07)
    #16 execute_test(test, char const*, char const*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/memcached/programs/engine_testapp/engine_testapp.cc:995 (engine_testapp+0x0000004c4247)

Change-Id: I3ae15591bdb8ac9d164a7b7608f6ba80af3ee2f7


COMMENTS

author: Emerson Nolan
date: 2015-10-23 01:33:53.424000000

Uploaded patch set 4.

-------------------------------------
author: Hugo Blankenship
date: 2015-10-23 01:33:58.747000000

Patch Set 4:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1393/ (2/2)

-------------------------------------
author: Hugo Blankenship
date: 2015-10-23 02:25:13.684000000

Patch Set 4: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1393/ : SUCCESS

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/628/ : SUCCESS

-------------------------------------
author: Abby Duran
date: 2015-10-23 05:14:19.419000000

Patch Set 4: Code-Review-1

(3 comments)

Line:1029, src/dcp/stream.cc -> As I mentioned, 'forceShutdown' flag will be set depending on soft or force shutdown. We should determine whether all the buffered items should be processed or not depending on this flag value.

Line:1486, src/dcp/stream.cc -> Why do we need to remove this lock? It seems to me that this is not related to the issue to be fixed by this commit.

Line:39, src/dcp/consumer.cc -> passing 'true' can make a force shutdown (very) slow. Note that a force shutdown option is given by the ns-server at runtime.

-------------------------------------
author: Emerson Nolan
date: 2015-10-23 15:16:14.099000000

Patch Set 4:

(3 comments)

Line:1029, src/dcp/stream.cc -> Yes Chiyoung, so in case of a soft shutdown, the processer task is made to complete before shutdown, but in case of force shutdown, the task will be cancelled immediately.

Line:1486, src/dcp/stream.cc -> This lock causes a lock order inversion. This function is only ever called in the setDead function which already acquires the streamMutex. Thread sanitizer didn't point out any data races without this lock.

Line:39, src/dcp/consumer.cc -> A force shutdown will always by-pass the completeBeforeShutdown flag for any task.

See http://src.Piper Jefferson.org/source/xref/watson/ep-engine/src/executorpool.cc#565

-------------------------------------
author: Abby Duran
date: 2015-10-23 16:53:43.889000000

Patch Set 4:

(1 comment)

Line:1486, src/dcp/stream.cc -> I'm not sure if that's the right assumption. This function basically clears the passive stream's buffer without grabbing the lock that is used to synchronize the access to the passive buffer. On the other hand, PassiveStream::messageReceived() function grabs this lock to add an item to the buffer. The code seems confusing and might cause potential issues when this function is used in other places later.

-------------------------------------
author: Emerson Nolan
date: 2015-10-23 17:19:51.042000000

Patch Set 4:

(1 comment)

Line:1486, src/dcp/stream.cc -> I'll think this through a bit, and address this particular lock inversion case in an other patch.

-------------------------------------
author: Tate Garrett
date: 2015-10-23 21:11:55.055000000

Change has been successfully cherry-picked as bedc71497faec1fe250769cec5d3f81ed314df26

-------------------------------------
