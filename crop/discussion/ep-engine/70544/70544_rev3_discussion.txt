DESCRIPTION

[Ephemeral Bucket]: Refactor seqno generation and ht.unlocked_set()

Currently we generate seqno in checkpoint. Seqno is for a partition
(vbucket) and there may be other modules, other than checkpoint, in the
vbucket that expect a monotonically increasing order of items (for example
if we decide to store an in-memory sequence of items permanently).
Hence generating sequence number outside the checkpoint helps us
develop those modules independent of the checkpoint logic.

Further, this commit refactors the unlocked_set() in hash_table which is
currently loaded with stuff that is not actually related to adding item
to the hash table.

This is code refactor for only set, setWithMeta, addTAPBackfillItem
and replace. Refactoring for delete, item expiry etc will be done
later.

Change-Id: Iac66eef62ee370fda7f297f6d2ab6bc2ca6c9db4


COMMENTS

author: Adrianna Holmes
date: 2016-12-02 04:36:14.053000000

Uploaded patch set 3.

-------------------------------------
author: Hugo Blankenship
date: 2016-12-02 04:36:23.627000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/1618/ (1/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-12-02 04:36:23.769000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/2011/ (2/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-12-02 04:36:23.898000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/786/ (3/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-12-02 04:36:24.033000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1936/ (4/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-12-02 04:51:52.967000000

Patch Set 3: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/786/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/1618/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1936/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/2011/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-12-02 16:31:56.258000000

Patch Set 3: Code-Review-1

(12 comments)

Line:75, src/ep_types.h -> Should document what this class is for.

Line:1279, src/dcp/stream.cc -> Is it safe to remove this lock? We modify the stream just below

Line:710, src/vbucket.cc -> This whole "pass a pointer to the class which originally called us all the way down into the VBuket" feels wrong.

If you really need to do this (which I'm not convinced you do, I'd suggest instead passing in a std::function<> callback - which the caller essentially "owns" the code for. However I don't think that's necessary - can't you just have the KVBucket itself call notifyItem once it's called htUnlockedSet() ?

Line:1881, tests/ep_testsuite_dcp.cc -> delete.

Line:66, src/vbucket.h -> I'm not really sure this actually makes the code any better, it just hides a bunch of stuff - and it will make it harder down the line to remove any extra arguments.

It would be better if the methods which take this (::set()?) were split into a number of smaller methods, each of which only took the information it needed.

Line:211, src/vbucket.h -> Suggest you pass in a reference to a lock_guard here to ensure it's called with the lock held.

Line:589, src/stored-value.h -> I'd probably just revert this - isn't anything to do with your code, and you're just changing whitespace.

Line:610, src/stored-value.h -> ditto

Line:942, src/ep.cc -> While this might be correct, I'd probably include it in a separate patch (as it's nothing to do with Ephemeral).

Line:1195, src/ep.cc -> Nit: This should be unnecessary - as soon as you throw the current execution flow is interrupted.

Line:2574, src/ep.cc -> Ditto

Line:3292, src/ep.cc -> If we truly optionally notify flusher and replication separately, I don't see the value in keeping this a single function - just split it into a notifyFlusherOnNewSeqno() and notifyReplicationOnNewSeqno() or similar.

-------------------------------------
author: Adrianna Holmes
date: 2016-12-02 17:14:05.998000000

Patch Set 3:

(12 comments)

DaveR, my responses to your comments.. 
(As discussed will not work on them immediately)

Line:75, src/ep_types.h -> Will do

Line:1279, src/dcp/stream.cc -> I thought it is safe because it is constructor..
But will remove as it is not critical for refactor

Line:710, src/vbucket.cc -> Yes will do that. Just that rv will have to be returned (need an extra return param).

Line:1881, tests/ep_testsuite_dcp.cc -> Will do

Line:66, src/vbucket.h -> That would be pretty hard the way we have our code today..

Line:211, src/vbucket.h -> ok

Line:589, src/stored-value.h -> Done

Line:610, src/stored-value.h -> Done

Line:942, src/ep.cc -> This is part of refactoring. Nothing to do with Ephemeral.
I am explicitly not expecting a FALLTHROUGH with next cases.

Line:1195, src/ep.cc -> Done

Line:2574, src/ep.cc -> Done

Line:3292, src/ep.cc -> Done

-------------------------------------
author: Adrianna Holmes
date: 2016-12-02 21:43:52.698000000

Patch Set 3:

(1 comment)

Line:710, src/vbucket.cc -> Further adding my thoughts, returning rv would be better than callback

-------------------------------------
