DESCRIPTION

Clear engine specific data when destroying data stored there.

I also added an assertion to ensure we aren't overwriting data here
when we set it.

Change-Id: I9f7ad73c22d0cf6426ead9c0cb199073e0bb7c45


COMMENTS

author: Noah Dean
date: 2011-06-04 00:08:25.046000000

Patch Set 1:

I'm pretty sure this is what led to the most recent crash (I don't have a bug number for it).

There was a condition where we weren't clearing user data.  That would mean we were reusing the previous one them.  It's harder to do that in a unit test since it was probably just reusing the same memory address.

-------------------------------------
author: Asher Vang
date: 2011-06-04 05:39:38.339000000

Patch Set 1: (1 inline comment)



Line:376, sync_registry.cc -> Since this is called from the dispatcher, the cookie may or may not be deleted from another thread. I would guess that you would need to reserve the cookie and release it when you're done? or would the client represented by the cookie be in "ewouldblock" state upstream until this code runs? (I don't know the code good enough)

-------------------------------------
author: Noah Dean
date: 2011-06-04 05:58:52.149000000

Patch Set 1: (1 inline comment)



Line:376, sync_registry.cc -> I don't quite know, either.  There was one place where it cleared it and another where it didn't.  I don't know much about reserving it.

Please take a look at how sync does store and get and help understand whether this is doing the right thing.  We've had two crashes in this code so far, both rather subtle.  This one (I don't know the bug number, Farshid collected some data) seemed to occur when the engine specific was not NULL, but also not a valid SyncListener object.  Farshid made it happen with three invalid syncs (bad vbucket, key, etc...) in a row.  I can't completely prove it, but strongly suspect we had freed one of the SyncListeners, left it in the engine specific, and then tried to use it on a subsequent call.

-------------------------------------
author: Zackery Barr
date: 2011-06-04 21:04:29.828000000

Patch Set 1: Verified; Looks good to me, approved

I ran same set of tests ( automated so it was faster ) and did not see the crash anymore.

in the reported crash yesterday memcached returned Memcached Error #134 first and crashed immediately afterwards but now it returns 134# for invalid vbuckets instead of  returning ["event":"invalid_key"] ( a different minor bug)

-------------------------------------
author: Tate Garrett
date: 2011-06-05 18:51:54.424000000

Your change could not be merged due to a path conflict.

Please merge (or rebase) the change locally and upload the resolution for review.

-------------------------------------
author: Noah Dean
date: 2011-06-05 18:54:57.111000000

Patch Set 1:

Farshid:  This requires the dependent change that fixed the previous sync bug.

-------------------------------------
author: Zackery Barr
date: 2011-06-05 18:57:58.124000000

Change has been successfully cherry-picked as 4abedcde0cdc8e61431e8661099567da35e7d560.

-------------------------------------
