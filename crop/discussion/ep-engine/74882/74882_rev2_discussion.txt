DESCRIPTION

Add a method to copy an OrderedStoredValue

When we have to create a copy of an OrderedStoredValue in soft
deletes, we do not have the luxury of creating the copy from an
Item object. Hence we need a way to copy it from the existing
OrderedStoredValue object.

Soft deleted need a copy of OrderedStoredValue when the
OrderedStoredValue object being deleted needs to be around for the
concurrent point-in-time snapshot (backfill).

Change-Id: I5c7fc5e1d26cf05157b7563dc6f7e9fda9a52621


COMMENTS

author: Adrianna Holmes
date: 2017-03-09 03:18:47.498000000

Uploaded patch set 2: Patch Set 1 was rebased.

-------------------------------------
author: Hugo Blankenship
date: 2017-03-09 03:41:07.430000000

Patch Set 2: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/4755/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/3351/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/4532/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/4101/ : SUCCESS

-------------------------------------
author: Adrianna Holmes
date: 2017-03-09 06:10:59.852000000

Topic set to Ephemeral

-------------------------------------
author: Ashlee Kent
date: 2017-03-09 10:25:51.592000000

Patch Set 2: Code-Review-1

(2 comments)

Surely it doesn't make sense to have two elements in the HashTable with the same key? This breaks the hashTable's invariant!

Maybe think about a different API - instead of copying a new value, have a replaceStoredValue() method which inserts a new (replacement) value into the HashTable, and returns the old StoredValue which was in it's place (e.g. via unique_ptr). The seqList would then take ownership of this old, stale Value.

That should remove the need to have the two elements both in the HashTable at the same time. You should also be able to change.

It may also be cleaner to separate the creation of StoredValue objects from wiring them into the HashTable - as i the case of the proposed replace() method you don't actually want to have both present, you just want to swap out one element with a different one in the same place.

Line:779, src/stored-value.h -> Don't use this anymore - we can use C++11 `OrderedStoredValue(...) = delete` instead.

Line:358, src/hash_table.h -> Please document this method.

-------------------------------------
author: Adrianna Holmes
date: 2017-03-09 22:22:43.186000000

Patch Set 2:

(2 comments)

Line:779, src/stored-value.h -> Done

Line:358, src/hash_table.h -> Done

-------------------------------------
