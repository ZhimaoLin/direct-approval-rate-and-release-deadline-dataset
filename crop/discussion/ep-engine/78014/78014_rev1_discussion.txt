DESCRIPTION

Prevent duplicate items in an inMemoryBackfill

Have rangeRead ignore stale items if their replacement also appears in
the requested range.

This is a basic solution. It would be better to not have to take the
writeLock, but improvements of that form will be done in a separate
patch.

Change-Id: Id743da606e009d17f5e5af6f9344223a95aa4a38


COMMENTS

author: Jace Townsend
date: 2017-05-11 11:04:07.085000000

Uploaded patch set 1.

-------------------------------------
author: Hugo Blankenship
date: 2017-05-11 11:38:01.449000000

Patch Set 1: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/6439/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/5629/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/4935/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/180/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-05-11 11:50:58.139000000

Patch Set 1: Code-Review-1

(13 comments)

Line:567, tests/module_tests/ephemeral_vb_test.cc -> Would be great if you could expand these tests to say show the sequence of events using those ASCII art diagrams - also would be good to add some more complex tests - say some of the scenarios we discussed where there's multiple stale docs with the same key.

Line:7, /COMMIT_MSG -> Isn't there an MB for this?

Line:14, /COMMIT_MSG -> Would be useful to expand this - give a brief overview of the existing problem (maybe with one of your nice ASCII-art diagrams?), and then explain the solution we are using for it.

Line:155, src/seqlist.h -> New parameter needs documenting.

Line:386, tests/module_tests/basic_ll_test.cc -> This should probably use a valid "replacement" - as this test looks like it's checking stale handling, not deleted.

Line:706, src/stored-value.h -> Probably worth mentioning in this case the pointer is non-owning.

Line:707, src/stored-value.h -> Suggest renaming this - to say `chain_next_or_replacement` - this is deliberately long and verbose (see lock_expiry_or_delete_time) to make people "stop and think" about it. Most people should probably access it via an accessor method anyways (which say checks the correct tag to determine which should be accessed).

Line:783, src/stored-value.h -> Long line.

Line:784, src/stored-value.h -> Missing space between ) and {

Line:860, src/stored-value.h -> Don't mix the order of public/protected/private - move this up to the top of the class.

Line:863, src/stored-value.h -> This probably warrants a brief commit - otherwise on first glance it looks like a leak.

Line:158, src/linked_list.cc -> I'd be tempted to add an inline comment above this paragraph; explaining what we are checking for. (You kinda imply it in the middle of the if() statement, but until one reads that far you don't know what's being done).

Line:198, src/linked_list.cc -> Long line

-------------------------------------
author: Jace Townsend
date: 2017-05-11 13:30:13.392000000

Patch Set 1:

(12 comments)

Line:7, /COMMIT_MSG -> Done

Line:14, /COMMIT_MSG -> Done I think?

Line:155, src/seqlist.h -> Done

Line:386, tests/module_tests/basic_ll_test.cc -> Done

Line:706, src/stored-value.h -> Done

Line:707, src/stored-value.h -> Done

Line:783, src/stored-value.h -> Done

Line:784, src/stored-value.h -> Done

Line:860, src/stored-value.h -> Didn't spot this - I blame clion!!

Line:863, src/stored-value.h -> Done

Line:158, src/linked_list.cc -> Done

Line:198, src/linked_list.cc -> Done

-------------------------------------
