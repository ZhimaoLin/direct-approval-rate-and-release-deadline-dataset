DESCRIPTION

MB-4202 Avoid using std::string in prepend/append operations.

We observed that as C++ STL and string classes use their own
memory pool allocators, it sometimes shows a quite bad behavior
in its memory pooling. Especially, the current prepend/append
APIs use std::string as temporary storage, which can result in
a number of destructed objects that are not immediately freed
and returned back to OS, if the client invokes prepend/append
APIs frequently with large values.

To mitigate this issue, we temporarily allocate a memory segment
through the underlying memory allocator (e.g., tcmalloc in linux),
and then explictly free it at the end of prepend/append
operations.

Change-Id: I6b128e437b3ffbcc9d981f8aa215324c1d89b7e8


COMMENTS

author: Tatiana Sheppard
date: 2011-09-07 01:16:29.269000000

Patch Set 1: Looks good to me, approved



-------------------------------------
author: Asher Vang
date: 2011-09-08 08:21:23.723000000

Patch Set 1: Looks good to me, approved

Btw. Wouldn't it be better to just create the new blob with the correct size initially, and move the data in there instead of going through a temporary (Adrianna Holmesal) allocation?

-------------------------------------
author: Abby Duran
date: 2011-09-08 09:28:57.039000000

Patch Set 1:

Yeah, good point. For this, I think Blob class should have additional methods to support prepend/append operations.

-------------------------------------
