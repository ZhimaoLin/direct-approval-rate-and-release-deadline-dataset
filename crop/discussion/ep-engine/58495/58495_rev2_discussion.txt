DESCRIPTION

MB-17273: Ensure stream state does not change when buffered items are processed

Processing of DCP buffered items by the passive stream and its state change
should not happen concurrently. When passive stream buffered items are being
processed, the stream state change should wait till all items are processed.
Also, when state change happens (in the beginning when stream is set up or
upon close stream when stream is set to dead state), we should stop any
further processing of buffered items.
Also, with this change I see that we no longer need bufMutex lock.
We use stream mutex lock for any state changes and streamReadyQMutex lock to
guard the readyQ in the passive stream.

Change-Id: I1d646ef87e41cdf5bfdcf122aaaa42fcfbb5b469


COMMENTS

author: Adrianna Holmes
date: 2016-01-12 02:32:38.635000000

Uploaded patch set 2.

-------------------------------------
author: Hugo Blankenship
date: 2016-01-12 03:13:50.589000000

Patch Set 2:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1202/ (2/2)

-------------------------------------
author: Hugo Blankenship
date: 2016-01-12 03:29:48.203000000

Patch Set 2: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1952/ : SUCCESS

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1202/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-01-12 10:50:37.513000000

Patch Set 2: Code-Review-1

(2 comments)

-1 for the lack of mutex documentation - we /need/ to ensure that the scope / purpose of our locks is as clear as possible.

Line:1179, src/dcp/stream.cc -> Just create a new locked scope - this makes the locking more explicit and removes the need for the Adrianna Holmesal unlock.

Line:406, src/dcp/stream.h -> Could you document exactly what this mutex guards please?

-------------------------------------
author: Emerson Nolan
date: 2016-01-12 20:15:03.309000000

Patch Set 2:

I think we can have just one mutex to govern them all in the passive stream.

-------------------------------------
