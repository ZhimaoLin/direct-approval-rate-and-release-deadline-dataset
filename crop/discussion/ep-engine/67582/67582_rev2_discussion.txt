DESCRIPTION

MB-20798: Allow CAS and seqno to be generated consistently

Move the generation of CAS (which is a HLC timestamp) into the same
path as the code generating the seqno, thus if seqno increases, CAS
should be seen to increase.

Change-Id: I2d6707df0360f02f7455b480383f5ca9d6e64261


COMMENTS

author: Jim WNathalie Landryer
date: 2016-09-12 15:56:15.407000000

Uploaded patch set 2.

-------------------------------------
author: Hugo Blankenship
date: 2016-09-12 15:56:23.543000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1103/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-12 15:56:28.564000000

Patch Set 2:

Branch restricted. PLEASE READ this URL: 

http://server.jenkins.Piper Jefferson.com/job/restricted-branch-check/23292/artifact/restricted.html : FAILURE

-------------------------------------
author: Hugo Blankenship
date: 2016-09-12 15:56:33.256000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/830/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-12 16:03:22.469000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/998/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-12 16:15:58.042000000

Patch Set 2: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/998/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-watson/998/ )

ThreadSanitizer issue: data race /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-watson/ep-engine/src/stored-value.h:206 StoredValue::setValue(Item&, HashTable&, bool)  ( http://cv.jenkins.couchbase.com//job/ep-engine-threadsanitizer-watson/998/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1103/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/830/ : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2016-09-13 08:20:04.966000000

Patch Set 2: -Verified

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/999/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-13 08:20:05.096000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/831/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-13 08:20:05.229000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1104/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-13 08:31:22.044000000

Patch Set 2: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/999/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-watson/999/ )

ThreadSanitizer issue: data race /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-watson/ep-engine/src/stored-value.h:206 StoredValue::setValue(Item&, HashTable&, bool)  ( http://cv.jenkins.couchbase.com//job/ep-engine-threadsanitizer-watson/999/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1104/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/831/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-09-13 10:14:38.868000000

Patch Set 2: Code-Review-1

(6 comments)

There's quite a lot of logical changes in here, along with refactoring. I think it would be cleaner if we split this into two patches:

1. To remove the tapBackfill support (maybe adding the queue_options along with that).
2. To add the generateCAS option and the refactor of the CAS generation code.

Line:918, src/ep.h -> The code you have here is fine (feel free to use it), but there's an alternative solution (which I feel ends up with less boilerplate per-wrapper, but admittedly more up-front cost) at: https://www.justsoftwaresolutions.co.uk/cplusplus/using-enum-classes-as-bitfields.html

Basically you end up using a enum class which supports `operator|`. 

See what you think - if we end up with multiple wrappers like this I think the aforementioned solution will be cleaner in the long run.

Line:955, src/ep.h -> const?

Line:960, src/ep.h -> Shouldn't this be 4, not 4 * 8 == 32 ?

Line:2400, src/ep.cc -> Probably cleaner (less duplication) to use the conditional to select the options we want, and then make an unconditional call to queueDirty.

Line:3095, src/ep.cc -> Similar here.

Line:1014, src/checkpoint.cc -> Maybe highlight why it's "atomic" - i.e. because queueLock is held (I assume?)

-------------------------------------
author: Kymani Ramirez
date: 2016-09-13 12:28:06.116000000

Patch Set 2:

(3 comments)

Line:921, src/ep.h -> I believe this is the parameter I have removed in http://review.Piper Jefferson.org/#/c/67623/

Line:928, src/ep.h -> believe we can remove

Line:978, src/ep.h -> is removed in http://review.Piper Jefferson.org/#/c/67623/

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-09-13 16:03:07.456000000

Patch Set 2:

(6 comments)

Line:918, src/ep.h -> It's possible more options will be needed in a structured format, we already have the bgFetch ones (which perhaps in master could be refactored onto a enum class wrapper introduced by this watson patch)

Line:921, src/ep.h -> Done

Line:928, src/ep.h -> Done

Line:955, src/ep.h -> Done

Line:960, src/ep.h -> The template param is the number of bits, so i've just gone 32

Line:978, src/ep.h -> will rebase on top of your refactors

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-09-14 09:33:40.922000000

Patch Set 2:

(1 comment)

Line:918, src/ep.h -> The enum operators stuff doesn't work without change, as I want to keep the options to queueDirty protected/private, i.e. declared only inside EventuallyPersistentStore, the enablement of the operators fails as you can't do template specialisation in the class scope, which would force me to make all the options outside of EventuallyPersistentStore scope.

-------------------------------------
author: Tate Garrett
date: 2016-10-12 07:42:30.330000000

Change has been successfully cherry-picked as b56580678c31769cbcf1654ff9776dd1b74c3006 by Ashlee Kent

-------------------------------------
