DESCRIPTION

MB-19707: Test stats for SeqnoVbStats

Add new module test for the stats code.
Contains a test for ensuring we can
successfully add SeqnoVbStats.

Change-Id: Ia1dee0aa5146ef53393d7ad638fb49250072fdb4


COMMENTS

author: Kymani Ramirez
date: 2016-09-06 15:05:52.438000000

Uploaded patch set 7.

-------------------------------------
author: Hugo Blankenship
date: 2016-09-06 15:06:01.821000000

Patch Set 7:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/1273/ (1/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-06 15:06:01.972000000

Patch Set 7:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1181/ (2/4)

-------------------------------------
author: Ashlee Kent
date: 2016-09-06 15:25:46.219000000

Patch Set 7:

(6 comments)

Line:32, tests/module_tests/stats_test.cc -> Given this is all C code I doubt this needs to be "extern C" anymore.

Line:49, tests/module_tests/stats_test.cc -> Probably cleaner to make this a method on the StatTest class, then you don't have to pass in the handles.

Line:51, tests/module_tests/stats_test.cc -> How does this differ from the other testing base classes we have (e.g. EventuallyPersistentEngineTest?) Would be preferable to subclass from that to save duplication.

Additionally, unless you need all the background tasks, prefer to use a Synchronous test (i.e. subclass SingleThreadedEPStoreTest) as that significantly simplifies the amount of stuff going on in the background (and hence debugging etc).

Line:98, tests/module_tests/stats_test.cc -> Why are these static? You don't appear to call this method multiple times, so seems curious to make them static.

Line:114, tests/module_tests/stats_test.cc -> Style: personally I think it would be clearer to keep the string concatenation closer to the use of them, instead of creating a bunch of constants and then having to scan between them. For example:

 EXPECT_NE(vals.end(), vals.find(vbucket + ":high_seqno"));
 EXPECT_NE(vals.end(), vals.find(vbucket + ":abs_high_seqno"));

Also, if you put the expression directly in the EXPECT() macro then on failure I believe you'll get the string printed out, making the Adrianna Holmesal "Failed to find XXX" unnecessary.

Line:147, tests/module_tests/stats_test.cc -> I think all of this would be much nicer if you made it data-driven, and just looped for each element. For example:

 // Map of known stats -> if they are expected to be zero or not.
 std::map<std::string, bool> stats = {
     {vbucket + ":high_seqno", true},
     {vbucket + ":abs_high_seqno", true},
  ...
 };
 for (const auto& stat : stats) {
     auto it = vals.find(stat.name);
     EXPECT_NE(vals.end(), it) << "Failed to find stat '" + stat.name "'";
 };

You can do a similar thing when scanning the `keys` - for each kv, perform a find on `stats` - if present then check if the value if expected to be zero, if not found then _immediately_ flag an error.

-------------------------------------
author: Kymani Ramirez
date: 2016-09-07 13:34:28.784000000

Patch Set 7:

(6 comments)

Line:32, tests/module_tests/stats_test.cc -> removed

Line:49, tests/module_tests/stats_test.cc -> Done

Line:51, tests/module_tests/stats_test.cc -> Have subclassed from SingleThreadedEPStoreTest as suggested.

Line:98, tests/module_tests/stats_test.cc -> I have had a (bad?) habit of using "static const" when I would do a #define in C.

However I agree that as I'm not calling the method multiple times I can remove the static

Line:114, tests/module_tests/stats_test.cc -> good idea - done.

Line:147, tests/module_tests/stats_test.cc -> another good idea! - done

-------------------------------------
author: Tate Garrett
date: 2016-09-13 08:02:06.396000000

Change has been successfully cherry-picked as b2b5dd19944218fe261f81c6a16f90010470ebdf by Ashlee Kent

-------------------------------------
