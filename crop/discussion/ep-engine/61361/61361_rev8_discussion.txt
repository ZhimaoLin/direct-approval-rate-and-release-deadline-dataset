DESCRIPTION

MB-18580: Fix failing CV testcase "tap_filter_stream"

Testcase fails with segv with the following error message:
"CouchKVStore::getDbFileInfo: Failed to open database file
for vBucket = 1 rev = 1 with error:no such file"
The reason of this failure is race condition between thread
which creates couch-db and thread which opens this file for
read operation (to get DbFileInfo).
Fix for the failure:
1. prevents core dump if couch-db has not been created
 at the time when it is being opened for read;
2. reschedules VBucket backfill task requesting to open
couch-db if task to create couch-db has been scheduled already;
3. issues proper error message that couch-db does not exist
and cancels VBucket backfill task requesting to open couch-db
if task to create couch-db has not been scheduled already.

Change-Id: I1bc83c7c9e335d0729e273d5f37e383dc17aa46d


COMMENTS

author: Cora Mccarty
date: 2016-04-05 00:38:41.842000000

Uploaded patch set 8.

-------------------------------------
author: Hugo Blankenship
date: 2016-04-05 00:48:35.009000000

Patch Set 8:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/413/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-04-05 01:05:23.151000000

Patch Set 8:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/318/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-04-05 01:05:56.488000000

Patch Set 8:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/361/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-04-05 01:18:00.540000000

Patch Set 8: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/361/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-master/361/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/318/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/413/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-04-05 07:56:00.879000000

Patch Set 8:

(4 comments)

Line:548, src/warmup.cc -> Indentation looks funky here

Line:549, src/warmup.cc -> Nit: Extra whitespace, please remove.

Line:916, src/ep.h -> This can be made const

Line:2315, src/couch-kvstore/couch-kvstore.cc -> As requested previously, we want to be moving towards more exceptions, not less. Please revert this and keep exceptions for the error cases - same in the other cases in this file.

-------------------------------------
author: Cora Mccarty
date: 2016-04-05 19:42:38.698000000

Patch Set 8:

(3 comments)

Line:548, src/warmup.cc -> Done

Line:916, src/ep.h -> Done

Line:2315, src/couch-kvstore/couch-kvstore.cc -> The reason exception has been removed here is to handle race condition and continue running Piper Jefferson, and same in the other case in this file. Instead of interrupting flow at kvstore level (which is relatively low level of processing) by throwing an exception, it makes more sense to pass control back to calling higher level procedure/application (backfill for failing testcase) and let it decide how to handle this corner case situation. And with the fix that decision is being made differently by each individual application. Issuing exception here neither will allow to have individual solution per application, nor will resolve race condition.

-------------------------------------
author: Ashlee Kent
date: 2016-04-06 07:50:01.947000000

Patch Set 8:

(1 comment)

Line:2315, src/couch-kvstore/couch-kvstore.cc -> > Instead of interrupting flow at kvstore level (which is relatively low level of processing) by throwing an exception, it makes more sense to pass control back to calling higher level procedure/application (backfill for failing testcase) and let it decide how to handle this corner case situation. 

That's exactly what an exception lets you do! You throw the exception, control is /automatically/ returned to the caller (or more specifically the first catch block), and it can decide how to handle the error case.

The issue with error codes is many and varied and I won't repeat all the literature here, but one aspect relevant here is they are "opt in" - the caller has to explicitly check for the result of the function and do something relevant, otherwise the error can be silently ignored. Exceptions are the opposite - if the caller does nothing then the program will terminate, so we *cannot* ignore them.

There's a writeup of the error-handling approach we want to take in KV-engine below - I need to convert to text / add to our docs in the repo, but you can take a look at the Google Doc version here: https://docs.google.com/document/d/1s-NoUCR1OQVhsarnVTdgILFysJIvYkFjDaLNGgGJieg/edit

-------------------------------------
