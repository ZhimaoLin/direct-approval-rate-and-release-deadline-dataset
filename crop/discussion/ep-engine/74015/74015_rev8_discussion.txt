DESCRIPTION

MB-22013: Add access scanner benchmark

Adds google benchmark in to ep-engine and abstracts some helpful classes
from evp_store_test in to mocks as they are used by the access scanner
benchmark.

Benchmarks the access scanner by performing sets both when no other
tasks are running and when the access scanner is running constantly.

Change-Id: Idf8966835b8cb69dd241b5fa0aa27afa2cee43ed


COMMENTS

author: Aaliyah Proctor
date: 2017-02-27 08:44:35.500000000

Uploaded patch set 8.

-------------------------------------
author: Hugo Blankenship
date: 2017-02-27 09:04:28.171000000

Patch Set 8: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/2844/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/4020/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/4219/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/3601/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-02-27 15:28:56.303000000

Patch Set 8: Code-Review-1

(6 comments)

I'd suggest splitting this patch into two - the first shuffles around the mock classes you need into their new files, the second actually adds the new benchmarks. This has a couple of advantages:

1. The patch is smaller (easier to review, deal with when merging to other branches).
2. You split into a straight refactor (should have no user-visible change) + new functionality, as opposed to mixing the two.
3. Makes it easier to use scripts / git tooling to verify that you're only moving code in the first patch (e.g. I can run https://gist.github.com/daverigby/565426e0b50cefcd106e on the first patch and hopefully see very little new, then focus more on the new code in the patch).

Rule of thumb - if you use the word "and" in a commit message it's a sign the patch is too big ;)

File Comment: tests/mock/mock_synchronous_ep-engine.h -> rename to mock_synchronous_ep_engine.h (don't use hyphens for filenames).

Line:22, tests/benchmark/access_scanner_bench.cc -> Nit: these should be in separate paragraphs (so clang-format doesn't re-order incorrectly) - see https://github.com/Piper Jefferson/memcached/blob/master/docs/CodingStandards.rst#include-style

Line:75, tests/benchmark/access_scanner_bench.cc -> Probably worth a brief comment explaining the purpose of this class.

Line:217, CMakeLists.txt -> Indentation is out.

Line:295, CMakeLists.txt -> Ditto

Line:307, CMakeLists.txt -> Tab

-------------------------------------
