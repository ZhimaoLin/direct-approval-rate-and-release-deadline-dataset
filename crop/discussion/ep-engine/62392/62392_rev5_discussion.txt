DESCRIPTION

MB-9897: Handle slow stream by dropping cursor and switching to backfill state

There can be slow DCP streams which can hold cursors on the checkpoints
causing the memory usage to shoot up. This can also result in deadlocks.

Initially cursor dropping was implemented by closing and re-opening the
slow streams. The re-opening of slow streams caused problems because
ns-server also tried to re-open the closed streams.

This approach tries to solve the problem by switching to
backfilling state from in-memory state when we see the memory usage
in checkpoints going high due to slow streams.

This switch from in-memory to backfill state does not interfere with
a snapshot that is being sent to the client. The change in state
happens only after all the items in a current snapshot is sent.

Hence clients work with the existing DCP protocol without any change.

Change-Id: If4c128df60fc0249cadf08158a04911120de4c99


COMMENTS

author: Hugo Blankenship
date: 2016-05-05 17:57:32.585000000

Patch Set 5:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/707/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-05-05 18:02:45.494000000

Patch Set 5:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/667/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-05-05 18:10:03.513000000

Patch Set 5:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/540/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-05-05 18:35:43.207000000

Patch Set 5: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/707/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/667/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-master/667/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/540/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-05-06 08:26:18.031000000

Patch Set 5: Code-Review-1

(20 comments)

Approach looks good, just needs to be more robust IMHO.

Line:22, /COMMIT_MSG -> What happens if a client "pauses" - stops consuming mutations in the middle of a checkpoint? Does that prevent us from ever flipping to backfill (and hence are still at risk of deadlock/OOM?

Line:793, src/dcp/stream.cc -> Comment needs updating to include the backfilling state (and why it's ok to drop the items)

Line:1021, src/dcp/stream.cc -> Nit: You don't need this extra scope as there's no local variables.

Line:1028, src/dcp/stream.cc -> I suggest you make this throw an exception if this is a path which we don't expect to hit.

Line:1030, src/dcp/stream.cc -> Same

Line:1110, src/dcp/stream.cc -> I can't see any locks acquired here - what if the state has changed between the checks at like 1065... 1100 and this line?

Line:70, src/dcp/producer.h -> Please add a description to this function.

Line:757, src/dcp/producer.cc -> Does this need renaming? I'm not sure the current name accurately reflects the new purpose of it.

Line:240, src/dcp/stream.h -> Should probably expand the comment to explain what the function actually does (i.e. black-box description) - flips to backfill, etc.

Line:278, src/dcp/stream.h -> If so then it should probably be named _UNLOCKED

Line:290, src/dcp/stream.h -> As above.

Line:294, src/dcp/stream.h -> Comment needs updating (it is identical to the following variable).

Line:731, tests/ep_testsuite_dcp.cc -> size_t is a more accurate / standard type for a count of bytes.

Line:739, tests/ep_testsuite_dcp.cc -> You should assert / checkeq() that this returns ENGINE_SUCCESS

Line:744, tests/ep_testsuite_dcp.cc -> This all looks a bit unsafe - in test code (if not elsewhere) you should be ultra-paranoid. Check that err equals the value(s) you expect, and abort / fail if any unexpected value is encountered, not just the one value you think might happen.

(in other words switch on `err`, and check for all cases, or at least have a default: case which fails the test).

Line:774, tests/ep_testsuite_dcp.cc -> Style: You could just use std::string and std::to_string here

Line:778, tests/ep_testsuite_dcp.cc -> Paranoia - what happens if dcp_last_byseqno is somehow greater than end?

(check all your assumptions with asserts / check calls).

Line:2201, tests/ep_testsuite_dcp.cc -> What ensures that exactly 3 checkpoints are created in this test?

Line:2230, tests/ep_testsuite_dcp.cc -> name needs updating.

Might be worth creating a helper function to do this, given we are calling it in multiple places now.

Line:2704, tests/ep_testsuite_dcp.cc -> Given that cursor "dropping" is now transparent to the end-user (they should always get the correct sequence numbers), can we make the feature purely controlled by ep_engine (and hence remove the control message), and have it on for all streams?

-------------------------------------
author: Adrianna Holmes
date: 2016-05-25 02:18:36.462000000

Patch Set 5:

(12 comments)

Apart from addressing comments, I have also move the commit from master branch to watson branch

Line:22, /COMMIT_MSG -> 1) In this commit we only handle the case where there are lot of items sitting on the checkpoint, not on readyQ yet.
2) We are still prone to deadlock/OOM if the items are sitting on the readyQ and not received by the client due to a pause or due to operational deadlock.

Do we handle the case (2) in 4.5.x or in spock ?

The logic maybe more complicated because we need to drop items from the readyQ for which we have already sent a snapshot marker to the client.

Line:793, src/dcp/stream.cc -> Done

Line:1021, src/dcp/stream.cc -> Done

Line:1028, src/dcp/stream.cc -> This path is a NO-OP for now, not an exception

Line:1030, src/dcp/stream.cc -> This path is a NO-OP for now, not an exception

Line:1110, src/dcp/stream.cc -> transitionState() is actually transitionState_UNLOCKED(). expects streamMutex to be held when called.

We could rename the function in a separate commit

Line:70, src/dcp/producer.h -> Done

Line:757, src/dcp/producer.cc -> We do drop the checkpoint cursors. Initially we used to close the stream, now we intend to fall back to backfilling.

Line:240, src/dcp/stream.h -> Done

Line:278, src/dcp/stream.h -> Done

Line:290, src/dcp/stream.h -> Done

Line:294, src/dcp/stream.h -> Done

-------------------------------------
author: Adrianna Holmes
date: 2016-05-25 02:42:39.132000000

Patch Set 5:

(8 comments)

Line:731, tests/ep_testsuite_dcp.cc -> Done

Line:739, tests/ep_testsuite_dcp.cc -> Done

Line:744, tests/ep_testsuite_dcp.cc -> Copied this from TestDcpConsumer::run().

Will add proper checks in both places as part of separate commit

Line:774, tests/ep_testsuite_dcp.cc -> Done.
Crept in here because of copy paste of code.

Line:778, tests/ep_testsuite_dcp.cc -> Done

Line:2201, tests/ep_testsuite_dcp.cc -> We reach a checkpoint id of 3.
We start with 2. A checkpoint closes if it is kept open for a while.
#define DEFAULT_CHECKPOINT_PERIOD 5 // 5 sec.

Line:2230, tests/ep_testsuite_dcp.cc -> Yes will create helper func, as part of another commit though

Line:2704, tests/ep_testsuite_dcp.cc -> Yes we could.. This change was initially intended to have as less change as possible from initial cursor dropping change.

Shall we drop using the control message  from a subsequent commit after we have verified this change works fine ?

-------------------------------------
author: Adrianna Holmes
date: 2016-05-25 02:45:03.589000000

Patch Set 5:

Incorporated review comments and raised http://review.Piper Jefferson.org/#/c/64375/ for watson

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-05-25 07:58:45.209000000

Patch Set 5: Code-Review-2

(6 comments)

Line:955, src/dcp/stream.cc -> we should refactor scheduleBackfill to support both cases. Some of the code in this function is clearly C&P from scheduleBackfill, if we can have one function for scheduling backfills that would be desirable

Line:995, src/dcp/stream.cc -> I'm worried... if we need a delay something is broken, we should be able to operate fully asynchrounsly

Line:1110, src/dcp/stream.cc -> That could be a good thing for master branch, for transitionState and all the function it calls, can often get a little confusing when chasing a bug and you have to double check who called you and if the lock is held.

Line:1115, src/dcp/stream.cc -> this should call a single schedule method, yet have the oldState influence what values you pass into the function

Line:1120, src/dcp/stream.cc -> This should be caught above in the valid transition switch statement

Line:1223, src/dcp/stream.cc -> This looks like we should be moving to end the stream if we've gotten here but the VB doesn't exist

-------------------------------------
author: Adrianna Holmes
date: 2016-05-25 18:44:53.911000000

Patch Set 5:

(6 comments)

Line:955, src/dcp/stream.cc -> Ok would like to refactor only in master. In Watson want to reduce the risk involved in refactoring

Line:995, src/dcp/stream.cc -> Well, I just left a comment because I thought it might be good to slow down sending items as we have memory pressure.
But now I realized that we need not do this because we limit backfill memory usage with the help of backfill buffers. recordBackfillManagerBytesRead() is the func

Line:1110, src/dcp/stream.cc -> Ok will do for master branch

Line:1115, src/dcp/stream.cc -> Done

Line:1120, src/dcp/stream.cc -> OK will remove the redundant check

Line:1223, src/dcp/stream.cc -> Done

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-05-26 08:40:56.426000000

Patch Set 5:

(1 comment)

Line:955, src/dcp/stream.cc -> There's no rush yet for this patch, and it seems the least risk part of this patch? I'd prefer to do the refactor in both so that we support a single backfill function, and only have one place to debug

-------------------------------------
author: Ashlee Kent
date: 2016-05-26 10:07:18.333000000

Patch Set 5:

(1 comment)

Line:955, src/dcp/stream.cc -> Just to clarify/add context - as the ep-engine/watson branch now means 4.5.1; 4.5.1 isn't planned until 3 months after 4.5.0 GA; so we can take our time on this (and other patches targeted for 4.5.1)

-------------------------------------
author: Adrianna Holmes
date: 2016-05-27 01:14:18.976000000

Patch Set 5:

(1 comment)

Line:955, src/dcp/stream.cc -> Ok done. Code uploaded for review in watson branch
http://review.Piper Jefferson.org/#/c/64375/

-------------------------------------
author: Adrianna Holmes
date: 2016-06-13 21:54:01.533000000

Abandoned

Merged from watson to master. Hence abandoning this review on master

-------------------------------------
