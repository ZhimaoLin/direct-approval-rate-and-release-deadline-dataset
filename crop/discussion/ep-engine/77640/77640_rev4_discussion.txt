DESCRIPTION

MB-24151: Implement general range read iterator in seqlist

This commit implements range read iterator in sequence list, the ordered
data strucuture in Ephemeral buckets.

We need range read iterators because we have more than one client that
needs to do a range read (backfill, tombstone purger). Further the reads
can also have more involved constraints like memory management in backfills.
By having an API of read iterator we can just do the read from the sequence
list and additional stuff like memory management can be done outside by the
clients. That is, iterator clients can make progress at their own pace.

The iterator is unidirectional (forward only) and cannot be invalidated
while in use. That means reading the items in the iterator results in a
valid point-in-time snapshot. But this adds a caveat that while an
terator instance is active, certain invariants are to be met to get the
snapshot, and this happens at the expense of increased memory usage.

For now, only one iterator can be created at a time.

Change-Id: Idb320a148299255b74b7cf7e92cef35a20f483d4


COMMENTS

author: Adrianna Holmes
date: 2017-05-09 02:22:54.268000000

Uploaded patch set 4.

-------------------------------------
author: Hugo Blankenship
date: 2017-05-09 03:13:25.283000000

Patch Set 4: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/6352/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/109/ : FAILURE

Timeout of a CTest test 26/26 Test #26: ep_perfsuite.ephemeral ...................} ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-master/109/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/5552/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/4860/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-05-09 08:19:51.146000000

Patch Set 4:

(1 comment)

Line:522, tests/module_tests/basic_ll_test.cc -> You don't really need to reserve (vector will resize), but if you really want to then just combine these:

 std::vector<seqno_t> actualSeqno(numItems);

-------------------------------------
author: Adrianna Holmes
date: 2017-05-09 16:51:05.460000000

Patch Set 4:

(1 comment)

Line:522, tests/module_tests/basic_ll_test.cc -> Then the vector will be already filled with 'numItems' of default values and will have to use [] operator.
Using reserve, I can use push_back(), but there will not be resize of the vector.
And since it is just 3 elements, it doesn't really matter much however we do

-------------------------------------
author: Ashlee Kent
date: 2017-05-09 16:53:19.050000000

Patch Set 4:

(1 comment)

Line:522, tests/module_tests/basic_ll_test.cc -> Sure, but given this is test code the reserve() isn't really necessary.

-------------------------------------
author: Ashlee Kent
date: 2017-05-09 16:55:29.011000000

Patch Set 4: Code-Review+1

I think this looks good; but I'll review again tomorrow once all the CV tests are passing.

-------------------------------------
author: Adrianna Holmes
date: 2017-05-09 19:20:06.290000000

Patch Set 4:

(1 comment)

Line:522, tests/module_tests/basic_ll_test.cc -> Done

-------------------------------------
