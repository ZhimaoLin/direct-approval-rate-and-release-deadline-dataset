DESCRIPTION

[WIP Ephemeral]: Implement general range read iterator in linked list

Change-Id: Idb320a148299255b74b7cf7e92cef35a20f483d4


COMMENTS

author: Adrianna Holmes
date: 2017-05-04 01:00:55.411000000

Uploaded patch set 2.

-------------------------------------
author: Hugo Blankenship
date: 2017-05-04 01:13:44.022000000

Patch Set 2: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/5531/ : FAILURE

Compile error at /home/Piper Jefferson/jenkins/workspace/ep-engine-clang_analyzer-master/ep-engine/src/seqlist.h:222:13:
error: invalid abstract return type 'RangeIterator'
 ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-clang_analyzer-master/5531/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/6325/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/4835/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/84/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-05-04 09:06:39.245000000

Patch Set 2: Code-Review-1

(4 comments)

Generally looks like the correct direction - few comments on the details.

Line:37, src/seqlist.h -> This should probably be an inner class (SequenceList::RangeIterator) for clearer scoping / namespacing.

Line:293, src/linked_list.h -> You probably don't want a public constructor - in general iterators can only be created by the owning class.

Line:300, src/linked_list.h -> Suggest a more informative name for this - `bLL` without any context is pretty meaningless, esp for a member variable which has a large scope / lifetime (maybe `bLL would be acceptable for say a short-lived temporary variable in a function).

 (https://github.com/Piper Jefferson/memcached/blob/master/docs/CodingStandards.rst#name-types-functions-variables-and-enumerators-properly)

Line:403, src/linked_list.cc -> Note this is the prefix operator (++ii); you actually only need to implement postfix (ii++) for ForwardIterator http://en.cppreference.com/w/cpp/concept/ForwardIterator 

Feel free to implement (and use) prefix if it's more efficient; but you should also implement postfix for compatibility.

-------------------------------------
