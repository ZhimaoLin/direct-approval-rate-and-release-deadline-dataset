DESCRIPTION

[WIP Ephemeral]: Implement general range read iterator in linked list

This commit implements a range read on sequence list which gives a
point-in-time snapshot of items in the list.
It allows only 1 range read iterator at a time.
It is a forward only iterator.

Use:
1. Create iterator using Seqlist::makeRangeIterator()
2. Iterate from itr.curr() to itr.end()

[Formal/organized commit msg to follow if this approch is ok].
Change-Id: Idb320a148299255b74b7cf7e92cef35a20f483d4


COMMENTS

author: Adrianna Holmes
date: 2017-05-07 06:21:39.903000000

Uploaded patch set 3.

-------------------------------------
author: Adrianna Holmes
date: 2017-05-07 06:33:25.673000000

Patch Set 3:

(1 comment)

Also thought the other approach could be:
1. Use SequenceList::makeRangeIterator() to create an "iterator parent obj". This holds the readRange on the list.
2. Create as many iterators from the obj created at one. They will iterate from start to end of the range held by 1. We can support semantics like vector<int>::iterator begin() / vector<int>::iterator end()
3. When you are done with using the iterators delete the obj created in step1.

The downside of this is until the obj created in step 1 is deleted, we will hold the read range lock on the linked list which might result in more stale items.
Upside is we will get near STL iterator semantics; can have multiple iterators (though we must note that a simultaneous backfill iterator and purge iterator need more than this as purge iterator is NOT read only iterator).

We like to know your thoughts on this.

Line:141, src/seqlist.h -> Will implement the post increment operator as well in the next patch set

-------------------------------------
author: Hugo Blankenship
date: 2017-05-07 06:57:18.601000000

Patch Set 3: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/6339/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/5541/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/4846/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/96/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-05-08 17:04:15.744000000

Patch Set 3: Code-Review-1

(3 comments)

> (1 comment)
 > 
 > Also thought the other approach could be:
 > 1. Use SequenceList::makeRangeIterator() to create an "iterator
 > parent obj". This holds the readRange on the list.
 > 2. Create as many iterators from the obj created at one. They will
 > iterate from start to end of the range held by 1. We can support
 > semantics like vector<int>::iterator begin() / vector<int>::iterator
 > end()
 > 3. When you are done with using the iterators delete the obj
 > created in step1.
 > 
 > The downside of this is until the obj created in step 1 is deleted,
 > we will hold the read range lock on the linked list which might
 > result in more stale items.
 > Upside is we will get near STL iterator semantics; can have
 > multiple iterators (though we must note that a simultaneous
 > backfill iterator and purge iterator need more than this as purge
 > iterator is NOT read only iterator).
 > 
 > We like to know your thoughts on this.

Not sure I totally follow - the `iterator parent obj` can hold an arbitrary number of iterators, or just 2?

What I was originally thinking was having the Range iterator have two public members:

 class RangeIterator {
     iterator start;
     iterator end;
 }

... and exposing method so both `start` and `end` could be moved (although without reverse iterator moving end doesn't make much sense) - I was thinking that would allow more STL-like functionality.

However, looking at your current code I think what you have is probably better/simpler for - we only need to be able to move `start` (aka `curr`) anyways. 

The only caveat I'd add is that it would be cool if you could use range-based for - e.g. something like:

 auto rangeIt = seqList.makeRangeIterator();
 for (auto& item : rangeIt) {
     ...
 }

To support that you essentially need the following[1] to compile:

 {
     auto && __range = range_expression ; 
     for (auto __begin = __range.begin(), __end = __range.end(); 
            __begin != __end; ++__begin) { 
     range_declaration = *__begin; 
     loop_statement 
     } 
 } 

[1]: http://en.cppreference.com/w/cpp/language/range-for

Line:393, tests/module_tests/basic_ll_test.cc -> Probably worth adding a test with 1 element (I hit issues with the tombstone purger there).

Line:440, tests/module_tests/basic_ll_test.cc -> Suggest also adding a test where you create a range Iterator and then modify the seqList (i.e. add items).

Line:413, src/linked_list.cc -> Is this correct? Feels like this means that we are not guarding the range correctly - i.e. shouldn't this match `list.readRange` ?

-------------------------------------
author: Adrianna Holmes
date: 2017-05-09 02:21:56.158000000

Patch Set 3:

(3 comments)

Line:393, tests/module_tests/basic_ll_test.cc -> Done

Line:440, tests/module_tests/basic_ll_test.cc -> Done

Line:413, src/linked_list.cc -> This is correct. We need to get the semantics that iterator::end() is beyond the last element. Add more comments in the subsequent patch

-------------------------------------
