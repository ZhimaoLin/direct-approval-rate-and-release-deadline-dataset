DESCRIPTION

MB-10640 Improve UPR rollback during failover.

Stream request now has snap_start_seqno and snap_end_seqno.
(high_seqno is removed) which can be used to deal with
partial snapshot. failover check is based on start_seqno,
snap_start_seqno and snap_end_seqno.

Snapshot Marker now has start_seqno, end_seqno and flag.
start_seqno/end_seqno indicates sequence number ranges
of the stream.

The flag indicates if a stream is from disk or memory.
The current value are:
0: memory
1: disk

Change-Id: I4f7528f453e1f0c3021ab51f2173e111ed4a17e9


COMMENTS

author: Miley Adams
date: 2014-04-10 20:35:50.857000000

Uploaded patch set 4.

-------------------------------------
author: Hugo Blankenship
date: 2014-04-10 20:35:56.543000000

Patch Set 4:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-300/473/

-------------------------------------
author: Miley Adams
date: 2014-04-10 20:36:45.884000000

Patch Set 4:

updated based on Mike and Volker's comment.

-------------------------------------
author: Hugo Blankenship
date: 2014-04-10 21:04:04.528000000

Patch Set 4: Verified-1

Build Failed 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-300/473/ : FAILURE

need to update, install, or configure build tools, environment variables, ssh credentials (requires no code change)

-------------------------------------
author: Ayla Reynolds
date: 2014-04-11 11:04:07.268000000

Patch Set 4: Code-Review-1

(1 comment)

Documentation needs an update.

Line:84, src/failover-table.h -> The documentation wasn't updated. It still mentions high_seqno instead of snap_start_seqno and snap_end_seq.

-------------------------------------
author: Abby Duran
date: 2014-04-11 18:39:46.850000000

Patch Set 4: Code-Review-1

(3 comments)

I'm not sure if I understand this change correctly or not. There are some areas that are not clear to me as I mentioned in my comments.

Line:461, src/upr-stream.cc -> qi->getBySeq() means the start seqno of the new snapshot and endSeqno is the end seqno of the snapshot closed?

I'm a little confused with this function's logic.

Line:519, src/upr-stream.cc -> white space.

Line:861, src/checkpoint.cc -> I'm not sure why we need to set the end seqno every time we visit an item in the closed checkpoint. Instead, can we get the end seqno when the cursor hits the checkpoint_end item?

-------------------------------------
author: Kenny Maynard
date: 2014-04-11 18:50:08.550000000

Patch Set 4:

(2 comments)

Line:461, src/upr-stream.cc -> The checkpoint start message contains the sequence number that the snapshot starts with and the endSeqno is the sequence number of the last item in the snapshot. In the case of a closed checkpoint this matches up with the sequence number of the first and last item in the checkpoint. In the case of an open snapshot this is the first item in the checkpoint and -1 as the end seqno which was what we discussed for dealing with open checkpoints.

Line:861, src/checkpoint.cc -> We don't necessarily need it every time. We only need it when there the item returned by this function is a checkpoint start message or when the item returned is the first item that returned from the checkpoint manager for a given stream. The reason for this is that we need to send a snapshot marker and therefore need the start and end seqno for the snapshot being sent.

-------------------------------------
author: Abby Duran
date: 2014-04-11 19:12:12.114000000

Patch Set 4:

(1 comment)

Line:461, src/upr-stream.cc -> Then, i have one clarification question:

If a given cursor is currently sitting on the open checkpoint, which means that it already sent (start_seqno, -1) as the snapshot start and end seq numbers, respectively. The current open checkpoint is closed and a new checkpoint is created. Then how the above cursor sends the end seqno of the snapshot that corresponds to the closed checkpoint?

-------------------------------------
author: Miley Adams
date: 2014-04-15 21:36:21.310000000

Patch Set 4:

(1 comment)

Line:461, src/upr-stream.cc -> This patch is mainly target to the protocol change that's visible to the client. I think any additional internal checkpoint related changes if needed should be done separately.

-------------------------------------
author: Abby Duran
date: 2014-04-15 22:27:38.953000000

Patch Set 4:

(1 comment)

Line:461, src/upr-stream.cc -> I'm asking the correctness of this logic that is quite related to the protocol correctness.

-------------------------------------
author: Miley Adams
date: 2014-04-15 22:49:16.780000000

Patch Set 4:

(1 comment)

Line:461, src/upr-stream.cc -> I think Mike can answer you. He provided this logic to get end seqno from checkpoint module.

-------------------------------------
author: Kenny Maynard
date: 2014-04-25 06:24:13.247000000

Patch Set 4:

David,

Can you address some of the comments in this patch and rebase it? I will discuss the -1 end seqno issue with Chiyoung tomorrow. Also, this didn't appear to pass the upr make simple-test. Did you run those tests earlier?

-------------------------------------
author: Miley Adams
date: 2014-04-25 16:18:13.015000000

Patch Set 4: -Code-Review

simple-test was failing with or without the patch earlier. I will rebase and try it again.

-------------------------------------
author: Abby Duran
date: 2014-04-28 19:46:09.236000000

Patch Set 4:

(2 comments)

Line:461, src/upr-stream.cc -> I still would like to get an answer to the above question.

Line:861, src/checkpoint.cc -> Then, it seems to me that we can get the start / end seq numbers when this function returns a checkpoint_start message.

-------------------------------------
author: Kenny Maynard
date: 2014-04-28 20:50:47.550000000

Patch Set 4:

(2 comments)

Line:461, src/upr-stream.cc -> If the open checkpoint is closed after we have sent the snapshot marker then we won't currently do anything special in terms of resending a snapshot marker to indicate a new end seqno.

Line:861, src/checkpoint.cc -> We could add the end seqno into the Item returned, but we would need to overload some 64 bit field like the cas in order to do so.

-------------------------------------
