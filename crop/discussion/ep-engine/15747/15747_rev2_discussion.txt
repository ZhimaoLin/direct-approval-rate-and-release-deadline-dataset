DESCRIPTION

Convert item_metadata to CamelCase starting with a capital letter

Change-Id: I9b54a3c945fd2c579d927d1ecafb01048fd54745


COMMENTS

author: Macie Morton
date: 2012-05-08 23:07:59.873000000

Uploaded patch set 2.

-------------------------------------
author: Noah Dean
date: 2012-05-08 23:10:35.125000000

Patch Set 2: (1 inline comment)



Line:141, item.hh -> This would make a lot more sense as a constructor, and really, really needs to pass a size along.

-------------------------------------
author: Macie Morton
date: 2012-05-08 23:18:15.432000000

Patch Set 2: Verified



-------------------------------------
author: Abby Duran
date: 2012-05-09 02:28:06.350000000

Patch Set 2: I would prefer that you didn't submit this

(3 inline comments)



Line:141, item.hh -> As Dustin mentioned, please add another constructor with a pointer and size as parameters.

Line:371, item.hh -> We don't need to have decodeMeta function in Item class. As mentioned above, we should add the new constructor with a pointer and a size parameters to ItemMetaData class.

Line:1871, ep_engine.cc -> Where this memory is freed? It seems to me that it's a memory leak.

-------------------------------------
author: Macie Morton
date: 2012-05-09 02:35:37.577000000

Patch Set 2: (2 inline comments)



Line:141, item.hh -> How to use the size here? The parsing is hard coded here. If we check the size of *dta, this should be done in the caller.

Line:1871, ep_engine.cc -> This is a different issue. itemMeta will be freed when it is freed. This change set does not change the behavior.

-------------------------------------
author: Noah Dean
date: 2012-05-09 02:38:34.585000000

Patch Set 2: (2 inline comments)



Line:141, item.hh -> If this code assumes the data that's passed in is large enough, it should say so with an assert(data_size == expected_size).  Otherwise, it should do whatever you think should happen on a failure.  What it *shouldn't* do is just assume it's the exact right size.

If the size is implicitly "known" by things passing it around, someone's going to disagree one day and things will get ugly.

Line:1871, ep_engine.cc -> I agree with not changing the behavior here.  The next change should make this a stack allocated metadata.  :)

-------------------------------------
author: Macie Morton
date: 2012-05-09 19:58:25.188000000

Patch Set 2: (2 inline comments)



Line:141, item.hh -> Are you saying the only usage of this parameter size in this function is to check assert(size == 20)  ?

Line:371, item.hh -> This changeset is only to convert some approved code to CamelCase. Actually I think we have already gone a bit far.  I like the comment here and above (new constructor), but they are not related to this commit. We need another two commits to address them.

-------------------------------------
author: Noah Dean
date: 2012-05-09 20:14:05.791000000

Patch Set 2: (1 inline comment)



Line:141, item.hh -> That's the least you could do.  You're assuming it's the right size.  What would happen if it got slightly larger on this side than the other side?

Though I doubt I'd write it like this at all.  I'd probably write the whole constructor like this:

    assert(size == sizeof(ItemMetaData));
    memcpy(this, dta, size);
    cas = ntohll(cas);
    seqno = ntohl(seqno);
    flags = ntohl(flags);
    exptime = ntohl(exptime);

(except it looks like the metadata serialized form has the fields in the wrong order -- I'd either fix that, or create a new struct with the proper form so you don't have to make so many memcpy calls just to get the data aligned and in the correct location).

-------------------------------------
author: Abby Duran
date: 2012-05-09 20:27:41.295000000

Patch Set 2: (1 inline comment)



Line:371, item.hh -> I agree. Let's limit this changeset to what it is supposed to do. Please make two additional commits:
(1)  Add the new constructor to ItemMetaData class and remove Item::decodeMeta()
(2) Fix the memory leak issue that we discussed. ItemMetaData instance should be just stack-allocated.

-------------------------------------
author: Macie Morton
date: 2012-05-09 20:44:26.547000000

Patch Set 2: (1 inline comment)



Line:371, item.hh -> Ok, I will revert all changes other than what this changeset is supposed to do. I will work on the commit 1) but not sure if I would have time to work on commit 2). Some XDCR stuff to do.

-------------------------------------
author: Abby Duran
date: 2012-05-09 20:48:13.940000000

Patch Set 2: (1 inline comment)



Line:371, item.hh -> The second commit can be easily done. This memory leak one is the quite critical issue that was caused by your earlier commit. I think this is much more important than other XDCR stuffs

-------------------------------------
author: Macie Morton
date: 2012-05-09 20:51:23.558000000

Patch Set 2: (1 inline comment)



Line:371, item.hh -> I do not understand why converting name to CamelCase would cause the memory leak.  Anyway, I would work on it since you think it is more critical.

-------------------------------------
author: Abby Duran
date: 2012-05-09 21:11:28.001000000

Patch Set 2: (1 inline comment)



-------------------------------------
author: Tate Garrett
date: 2012-05-09 21:30:59.278000000

Your change could not be merged due to a path conflict.

Please merge (or rebase) the change locally and upload the resolution for review.

-------------------------------------
author: Macie Morton
date: 2012-05-09 22:00:47.407000000

Patch Set 2: (1 inline comment)



Line:141, item.hh -> This is no difference to me. The size is only used in assert for the sanity check here.

-------------------------------------
author: Noah Dean
date: 2012-05-09 22:07:19.616000000

Patch Set 2: (1 inline comment)



Line:141, item.hh -> There's a pretty large difference between "something changed in one of the callers under a specific situation and now the app aborts with an error pointing to a condition that is specifically not handled and the application silently corrupts data and starts returning incorrect answers.  I don't see how these can appear equivalent.

As written, this is a bug that you can't detect.  I'm suggesting you write it as something you make it both harder to make a bug and really obvious when you encounter one.

-------------------------------------
author: Macie Morton
date: 2012-05-09 22:30:50.124000000

Patch Set 2: (1 inline comment)



Line:141, item.hh -> What I am trying to say is that there is no difference between your code and what I said earlier (size is only used in sanity check). 

Enforcing caller to give you a "correct" size does not help you much if the caller gives you some crap but with "correct" size. If I understand correctly, in decode() we have already checked the size before we parse the data. I am not sure if there is any extra value to re-check the size is 20 again in constructor.

   if (*data != 0x01) {
     ...}
    ++data;
     if (*data != 20) {        //make sure size is correct
     ...}
   
// call constructor to parse the data
.....

-------------------------------------
author: Noah Dean
date: 2012-05-09 22:41:51.499000000

Patch Set 2: (1 inline comment)



Line:141, item.hh -> This code assumes that it receives a pointer to at least 20 bytes of data.  Nothing here explicitly states that.

Assumptions that are implicit and/or cause silent failures on code changes are very hard to track down.  assert() is a great way to document your assumptions if you don't want to do something better.

If you're concerned about the validity of the data, add a checksum byte.  This will make the input requirement 21 at which point you can decide whether or not to verify the checksum by the size.  If you place it at the end, older code can decode without verification and newer code can verify.  You can use throw instead of assert().

But in any case, you've documented the assumption that's completely not visible here.

-------------------------------------
author: Abby Duran
date: 2012-05-09 21:11:27.988000000

MISMATCHED INLINE COMMENT
Line:371, item.hh -> This is the earlier commit that caused the memory leak:
http://review.Piper Jefferson.org/#patch,unified,15721,1,ep_engine.cc

We don't need to allocate the item_meta instance in heap, but instead just do the stack allocation.

-------------------------------------
