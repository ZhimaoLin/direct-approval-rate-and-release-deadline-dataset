DESCRIPTION

MB-12352 Remove unnesscary couchstore open/reads from backfill

Observed disk reads were happening as part of a 100% resident rebalance.
Ok, so we need to scan disks using sequence numbers, but we can incorporate
the "how many items" call and scan into one.

CacheCallBack now increments backfillRemaining by 1, this reduces the amount
of opens and preads required in the initial backfill code.

Change-Id: I593021491150dab48210e9a55827a3ddc9f7baec


COMMENTS

author: Jim WNathalie Landryer
date: 2014-10-15 15:01:17.387000000

Uploaded patch set 1.

-------------------------------------
author: Ashlee Kent
date: 2014-10-15 15:26:08.154000000

Patch Set 1: Code-Review+1

-------------------------------------
author: Abby Duran
date: 2014-10-15 17:38:55.648000000

Patch Set 1:

Please add all ep-engine folks as a reviewer for any changes made in ep-engine.

-------------------------------------
author: Abby Duran
date: 2014-10-17 21:49:58.457000000

Patch Set 1:

Mike, please review this change. Thanks!

-------------------------------------
author: Kenny Maynard
date: 2014-10-20 17:43:47.357000000

Patch Set 1:

The purpose of that call is to get the amount of items that will be part of the backfill when it starts. Making this change will change the meaning of that stat. I read over the bug and saw that this makes a decent performance improvement so let me think about this change a little bit more.

-------------------------------------
author: Jim WNathalie Landryer
date: 2014-10-21 14:36:43.333000000

Patch Set 1:

Given that we incrementally reduce the stat by 1 (in ActiveStream::backfillPhase) it seems reasonable to increase incrementally as well? I guess it's all a matter of timely observation as to what the stat is going to say

-------------------------------------
author: Kenny Maynard
date: 2014-10-21 23:31:35.967000000

Patch Set 1:

The original purpose of that variable was to know how many more items we needed to read to finish the backfill as opposed to how many we actually read. I think it will be okay to remove, but I just need to look into it a little bit more. I'll take a look later tonight.

-------------------------------------
author: Jim WNathalie Landryer
date: 2014-10-22 08:31:42.910000000

Patch Set 1:

Another thought I had on this. We could increment a new non-stat variable during the scanning, using the CacheCallback counting, then when we're done scanning move the new counter into the backfillRemaining statistic variable. Then when you observe the stat it will have a perceived behaviour of the current implementation.

-------------------------------------
author: Kenny Maynard
date: 2014-10-27 22:06:44.386000000

Patch Set 1:

(2 comments)

The problem is that backfill remaining to supposed to be figured out before we do any reads from disk. After each read we then decrement the backfill remaining stat so that if the backfill is paused we know how many items are pending to read. Let's discuss this more tomorrow along with your other change.

Line:127, src/dcp-backfill.cc -> If we want to remove this then we should get rid of the incrBackfillRemaining() function too since we don't need it.

Line:56, src/dcp-backfill.cc -> You can just increment in backfillReceived. Also, the stat that we were incrementing in the incrBackfillRemaining() is called backfillRemaining. We should rename it to total

-------------------------------------
