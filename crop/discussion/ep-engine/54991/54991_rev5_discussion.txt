DESCRIPTION

MB-16056: Use exceptions instead of cb_assert() [1]

First set of changes to migrate away from cb_assert() and use
exceptions where applicable for invalid input / logic errors.

Covers: access_scanner, backfill, bloomfilter, checkpoint, common.h,
        configuration, connmap

Change-Id: I8c6fb8f8db4fc5a1a604107afe28ed73ce491082


COMMENTS

author: Ashlee Kent
date: 2015-09-24 14:19:08.391000000

Uploaded patch set 5.

-------------------------------------
author: Hugo Blankenship
date: 2015-09-24 14:19:17.109000000

Patch Set 5:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1003/

-------------------------------------
author: Hugo Blankenship
date: 2015-09-24 14:51:24.937000000

Patch Set 5: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1003/ : SUCCESS

-------------------------------------
author: Asher Vang
date: 2015-09-25 09:59:16.672000000

Patch Set 5:

(3 comments)

Just one thing.. what's the effect of running after we notice that our memory tracker is gone bananas...

Line:398, src/connmap.cc -> nullptr

Line:91, src/bloomfilter.cc -> Not related to this change, but this looks like good case to use enum class and have the compiler barf out if we don't update the switch with the new values...

Line:91, src/checkpoint.cc -> Is it safe to continue run? the assertions we added for gigantor "back in the days" was due to memory calculations being completely off (and we needed to identify these issues)..

-------------------------------------
author: Ashlee Kent
date: 2015-09-25 10:26:22.603000000

Patch Set 5:

(2 comments)

Line:398, src/connmap.cc -> I only used NULL as two lines above it was using NULL. I generally aim for consistency above making things different for difference sake (esp given in this case as there's no real difference functionally between NULL and nullptr here).

Line:91, src/checkpoint.cc -> I decided to continue as we were in the destructor of a class, and (IIRC) you shouldn't "throw"in a destructor.

There's still a number of other instances of the GIGANTOR check which so error.

(as an aside, I *think* at least some of the GIGANTOR errors were caused by non-atomic updates to the memory overhead, which are now fixed).

-------------------------------------
author: Asher Vang
date: 2015-09-25 11:05:14.660000000

Patch Set 5:

(1 comment)

Line:91, src/checkpoint.cc -> I'm pretty sure some of the bugs we saw earlier was caused by non-atomic updates (or bugs in our atomic impl). (we had other places where you'd replaced the assert with just logging for the gigantor.. and that wasn't exceptions)..

-------------------------------------
author: Ashlee Kent
date: 2015-09-25 11:19:29.900000000

Patch Set 5:

(1 comment)

Line:91, src/checkpoint.cc -> So it's unsafe to throw in this destructor. If you like I *could* revert this hunk (and go back to cb_assert) - given we *think* that these GIGANTOR errors should not longer occur that is probably safe..

What do you think?

-------------------------------------
author: Asher Vang
date: 2015-09-25 13:04:30.636000000

Patch Set 5:

(1 comment)

Line:91, src/checkpoint.cc -> I'd leave that up to the members of the old ep-engine team to decide. I don't know when the last time we saw this error...

-------------------------------------
author: Jim WNathalie Landryer
date: 2015-09-25 15:43:41.350000000

Patch Set 5: Code-Review+1

-------------------------------------
author: Tate Garrett
date: 2015-09-28 22:35:41.540000000

Change has been successfully cherry-picked as b566170dfedc2ce3087d265b2ca13b813801066c

-------------------------------------
