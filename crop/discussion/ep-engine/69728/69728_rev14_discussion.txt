DESCRIPTION

LockPhosphor: Providing the ability to event trace locks

Introduce a new LockHolder wrapper that creates Phosphor events when
attempting to acquire a lock and when the lock is released.

Change-Id: I69c12e3ff3ab6b1881188c75bf34271691230a18


COMMENTS

author: Kymani Ramirez
date: 2016-11-11 13:25:09.527000000

Uploaded patch set 14.

-------------------------------------
author: Hugo Blankenship
date: 2016-11-11 13:25:15.986000000

Patch Set 14:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/569/ (1/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-11-11 13:25:16.128000000

Patch Set 14:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/1418/ (2/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-11-11 13:25:16.272000000

Patch Set 14:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1667/ (3/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-11-11 13:25:16.425000000

Patch Set 14:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/1778/ (4/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-11-11 14:00:55.340000000

Patch Set 14: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/1778/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/569/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/1418/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1667/ : SUCCESS

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-11-11 14:31:09.350000000

Patch Set 14: Code-Review-2

(3 comments)

Line:368, src/locks.h -> The name made me think it is todo with locking phosphor, what about something more abstract, TracingLockHolder ?

Line:394, src/locks.h -> nit: incorrect indent

Line:401, src/locks.h -> Hmm, it maybe safer to copyin the category etc... so that there are no surprises if you returned a LockPhosphor from its creation point (i.e. the category memory goes out of scope). std::string them or delete copy cons?

-------------------------------------
author: Keira Washington
date: 2016-11-11 14:58:46.883000000

Patch Set 14:

(2 comments)

Line:382, src/locks.h -> If you don't have an unlock method then there's very little purpose to the lock holder, you can just lock and unlock the mutex yourself. This way you can also unlock the mutex in the destructor before the end event.

If you do it like that I would also suggest sticking this into the phosphor repo instead as phosphor::lock_guard (So it could be used from memcached). It would also allow you to reduce the overhead of having a second copy of the event names/categories over the trace point infos.

Line:401, src/locks.h -> That would actually be incredibly unsafe (and wrong) since phosphor doesn't do any copying of its own. You can only give phosphor string literals.

-------------------------------------
author: Kymani Ramirez
date: 2016-11-11 19:11:53.274000000

Patch Set 14:

(1 comment)

Line:382, src/locks.h -> I like the idea, however a TPI only contains a category and name, for my lock_guard I need two names, (for the acquire and for the held).

I was thinking about created an sub class of TPI which has two names and a mutex.  Was that along the lines of your thinking?

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-11-15 09:27:03.153000000

Patch Set 14:

(1 comment)

Line:401, src/locks.h -> Hence the *or* in my comment, two options.

-------------------------------------
author: Keira Washington
date: 2016-11-15 12:14:34.140000000

Patch Set 14:

(1 comment)

Line:401, src/locks.h -> Copy constructor is irrelevant, it's either safe or the class as a whole is entirely unsafe.

-------------------------------------
author: Kymani Ramirez
date: 2016-11-16 17:50:24.705000000

Abandoned

Moved implementation to phosphor

-------------------------------------
