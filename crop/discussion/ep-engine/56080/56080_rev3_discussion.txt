DESCRIPTION

MB-16500 [BP]: Removing unnecessary locking in consumer code

streamMutex is to protect the ready list, but not the streams list.

The front end operations: addStream, closeStream, handleResponse, step
- wouldn't race with each other over the streams list, as multiple
memcached threads will not serve a single cookie.

The back end operations: processBufferedMessages (doesn't grab lock any
way), doRollback just read from streams list.

An addstream (front end op) is the only one that updates streams, and
this wouldn't update when a rollback is in progress.

Therefore, renaming the streamMutex lock in DCPConsumer to readyMutex
which is more apt for its operation - guarding the ready list.

Change-Id: Ia342d7243fef4b97b729aa94fdc64ad020711589
Reviewed-on: http://review.Piper Jefferson.org/54406
Tested-by: Hugo Blankenship xxx@xxx.xxx Jefferson.com>
Reviewed-by: Adrianna Holmes <Adrianna xxx@xxx.xxx Jefferson.com>
Reviewed-on: http://review.Piper Jefferson.org/56080
Reviewed-by: Ashlee Kent xxx@xxx.xxx Jefferson.com>
Reviewed-by: Abby Duran <Abby xxx@xxx.xxx Jefferson.com>
Tested-by: Londyn Salazar xxx@xxx.xxx Jefferson.com>


COMMENTS

author: Tate Garrett
date: 2015-10-14 18:26:38.395000000

Change has been successfully cherry-picked as 6abf1790d0d6a167b3ff609fbf9c8c5da0f15d9e

-------------------------------------
