DESCRIPTION

MB-16915: Use refcounted pointers on producer/consumer

Prevents a race/crash occuring when the DcpProducer is destroyed
and there are backfill tasks running/pending.

The test case reveals the probem when run under valgrind as
a series of invalid reads of freed memory. E.g.

==40673== Thread 17:
==40673== Invalid read of size 8
==40673==    at 0x71A3CEE: DCPBackfill::run() (dcp-stream.cc:175)
==40673==    by 0x717215C: ExecutorThread::run() (executorthread.cc:110)
==40673==    by 0x7172868: launch_executor_thread (executorthread.cc:34)
==40673==    by 0x503EC67: platform_thread_wrap (cb_pthreads.c:24)
==40673==    by 0x524A181: start_thread (pthread_create.c:312)
==40673==    by 0x555A47C: clone (clone.S:111)
==40673==  Address 0x64c2380 is 48 bytes inside a block of size 384 free'd
==40673==    at 0x4C2C2BC: operator delete(void*) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==40673==    by 0x718C4ED: DcpConnMap::manageConnections() (atomic.h:430)
==40673==    by 0x71906A5: ConnManager::run() (connmap.cc:151)
==40673==    by 0x717215C: ExecutorThread::run() (executorthread.cc:110)
==40673==    by 0x7172868: launch_executor_thread (executorthread.cc:34)
==40673==    by 0x503EC67: platform_thread_wrap (cb_pthreads.c:24)
==40673==    by 0x524A181: start_thread (pthread_create.c:312)
==40673==    by 0x555A47C: clone (clone.S:111)

Change-Id: I32a7dfd10daa4565b9cbb4c8142ed8f71c13ca31
Reviewed-on: http://review.Piper Jefferson.org/57296
Tested-by: Hugo Blankenship xxx@xxx.xxx Jefferson.com>
Reviewed-by: Abby Duran <Abby xxx@xxx.xxx Jefferson.com>


COMMENTS

author: Tate Garrett
date: 2015-12-01 19:16:01.510000000

The change could not be merged due to a path conflict.

Please rebase the change locally and upload the rebased commit for review.

-------------------------------------
author: Tate Garrett
date: 2015-12-02 00:08:22.763000000

Change has been successfully cherry-picked as 7110b3eb1df48ac446791ea222292858f4019c16

-------------------------------------
author: Adrianna Holmes
date: 2015-12-02 04:53:29.800000000

Patch Set 11:

Aren't we creating a cyclic reference here ? 
DcpProducer holds a reference to stream and also stream holds a reference to DcpProducer.

Hence the destructor for both the objects will never be called.


(Sorry for late comment)

-------------------------------------
author: Abby Duran
date: 2015-12-02 06:20:48.392000000

Patch Set 11:

That's a good catch. We now have a cyclic reference between producer (consumer) and stream, which prevents those instances from getting freed. This is a code review failure :(

In C++ 11, we can use std::weak_ptr to avoid the cyclic reference, but we can't use it for 3.0.x code base.

To address this issue, when a given DCP producer (or consumer) gets disconnected, it should iterate all of its stream instances to reset each stream's producer (or consumer) pointer to NULL before being freed from memory.

Please feel free to suggest any better solution if you have.

-------------------------------------
author: Jim WNathalie Landryer
date: 2015-12-02 15:50:04.523000000

Patch Set 11:

> That's a good catch. We now have a cyclic reference between
 > producer (consumer) and stream, which prevents those instances from
 > getting freed. This is a code review failure :(
 > 
 > In C++ 11, we can use std::weak_ptr to avoid the cyclic reference,
 > but we can't use it for 3.0.x code base.
 > 
 > To address this issue, when a given DCP producer (or consumer) gets
 > disconnected, it should iterate all of its stream instances to
 > reset each stream's producer (or consumer) pointer to NULL before
 > being freed from memory.
 > 
 > Please feel free to suggest any better solution if you have.

This doesn't seem to be the case.

When the DcpProducer sets the stream as dead, he erases the stream from the streams map, which is the DcpProducer "dereferencing" the stream and dropping the ref count to 0 or 1 (if the Backfill task is running). The stream gets deleted and drops its reference to the DcpProducer who is deleted when all refs are dropped.

-------------------------------------
author: Abby Duran
date: 2015-12-02 17:43:32.181000000

Patch Set 11:

Jim,

Yes, you're right. When a DCP producer or consumer is disconnected, all of its streams are marked as DEAD and removed from the list.

Thanks for clarification!

-------------------------------------
author: Adrianna Holmes
date: 2015-12-02 18:51:34.077000000

Patch Set 11:

My bad, I agree that there is no problem in DCP Producer.

But seems like DcpConsumer still has a problem. We delete streams (passive) only in the destructor of the DcpConsumer. But now DcpConsumer destructor is never called because passive stream is holding reference and passive stream is never deleted because ~DcpConsumer() is never called

-------------------------------------
author: Abby Duran
date: 2015-12-02 18:56:57.299000000

Patch Set 11:

Manu,

Can you make a fix in the consumer side if that's the case? You may need to confirm the memory leak by running some tests.

-------------------------------------
author: Jim WNathalie Landryer
date: 2015-12-04 14:07:46.820000000

Patch Set 11:

> Manu,
 > 
 > Can you make a fix in the consumer side if that's the case? You may
 > need to confirm the memory leak by running some tests.

Good catch on the consumer side!

-------------------------------------
