DESCRIPTION

MB-17766: Incorrect ordering of messages during ActiveStream's takeover-send phase

A race between the step() and ActiveStreamCheckpointProcessorTask
can cause mutations to be queued into the readyQ after the
setVBucketState(active) message.

Here's the scenario in chronology (T: Front-end thread, BT: IO thread):
1. T1: ActiveStream::setVBucketStateAckRecieved()
2. T1: transitionState(takeoverSend) => schedules ActiveStreamCheckpointProcessorTask
3. BT1: manageConnections() notifies memcached about specific conn (max idle time: 5s)
4. BT2: ActiveStreamCheckpointProcessorTask runs, gets all Items For Cursor
5. T1: step() -> takeoverSendPhase() -> readyQ is empty
        => nextCheckpointItem() return false, as getNumItemsForCursor returns 0
        => setVbucketState(active) added to readyQ
6. BT2: ActiveStreamCheckpointProcessorTask continues, adds mutations acquired into readyQ
        -> Note the mutations were acquired in step 4
        => Notified memcached connections
7. T1: step() .. ships messages in incorrect order

On the new master, the vbucket is promoted to active state and then more
mutations are received from the old master. If there were front end ops
at this time, there could be an inconsistency in highSeqno or in worst
cases crashes in checkpoint manager due to highSeqno not belonging in
the designated range.

The fix: Add an atomic flag that is also checked for along with
getNumItemsForCursor in nextCheckpointItem(). This flag is set before
retrieving all items for a cursor (getAllItemsForCursor) and unset after
all the retrieved items have been added to the ready queue of the stream.

**Test case verifies the fix.

Change-Id: I5c04d47cc99c7dd3b2d87cb68dd30d36473226e5


COMMENTS

author: Emerson Nolan
date: 2016-02-08 22:53:03.048000000

Uploaded patch set 1.

-------------------------------------
author: Hugo Blankenship
date: 2016-02-08 22:53:07.486000000

Patch Set 1:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/356/

-------------------------------------
author: Hugo Blankenship
date: 2016-02-08 22:53:11.997000000

Patch Set 1: Well-Formed+1

Permission granted to commit to restricted branch

-------------------------------------
author: Hugo Blankenship
date: 2016-02-08 23:07:52.477000000

Patch Set 1: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/356/ : SUCCESS

-------------------------------------
author: Emerson Nolan
date: 2016-02-08 23:12:45.775000000

Patch Set 1:

@DaveR, I ran into a bunch of complications in creating module tests for DCP streams, that had to mostly do with too many dependencies and linkage failures. This is something we can do in the future on master but for now to address this particular scenario - I've changed the unit test that I had previously such that it definitely reproduces the issue.

Also in reply to your suggestion on changing the behavior of checkpoint manager's getAllItemsForCursor(), I have an alternate approach which also ensures no increased lock scope but will address the problem. Let me know what you think.

-------------------------------------
author: Ashlee Kent
date: 2016-02-09 09:22:25.927000000

Patch Set 1: Code-Review-1

I prefer this approach to the previous one - it's good we haven't increased lock scope, however I still believe my suggestion to defer advancing the cursor is a cleaner/simpler one as we don't introduce additional state / variables to track where nextCheckpointItemTask is up to - it feels to me like we are exposing implementation details.

Having said all that, I'm (reluctantly) ok with this style of fix going in for 3.0.x.

However, regarding testing not keen on having this kind of debug/test-only code in production. The fact that we have to "force" the race with a relatively complex test-case is undesirable - it feels like the sort of test case which may occasionally fail, or even may not fully test the behaviour if we change implementation down the line.

You should be able to split nextCheckpointItemTask() into two functions, and hence call each independently and check that numItemsforcuror returns zero. I think we should get the tests "fixed" for this simpler approach before we push this.

-------------------------------------
author: Emerson Nolan
date: 2016-02-09 17:14:35.378000000

Patch Set 1:

Changing cursor behavior would affect the flusher code path too. I'd have to look into it more - but we'd need to be careful to not cause any further regressions at this point.

Regarding your suggestion on testing (I liked the idea) - I did try setting up module tests for the active stream. But I mentioned I ran into complications, here they are: Creating an active stream object has a dependency - DcpProducer, which the stream object holds a reference to. So when I try creating a DcpProducer object, things got messy as I would need to pass in an EventuallyPersistentEngine object to its constructor, which brings in a huge list of dependencies.

-------------------------------------
author: Abby Duran
date: 2016-02-09 17:24:39.201000000

Patch Set 1:

Abhinav,

I suggest to verify this fix through the QE test without adding a module test that we can add and improve later in the master branch or 4.1.1, given 3.1.4 release timeline.

-------------------------------------
author: Tate Garrett
date: 2016-02-10 19:05:35.194000000

Change has been successfully cherry-picked as ba305c4f083b3910d12f470bf9b39b3f4c2f2b97

-------------------------------------
