DESCRIPTION

Fix data race on task waketime (ThreadSanitizer)

To avoid race without locking overhead create two
separate wake times one requested by user and other
for priority_queue, so that queue's value is only read
under lock. This fixes several ThreadSanitizer races
from unit tests.

Change-Id: I78fdddb832251fc062058c04f75f8d22c4c2f68d

COMMENTS

author: Ellie Kidd
date: 2015-07-22 00:52:39.438000000

Patch Set 6: Commit message was updated

-------------------------------------
author: Emerson Nolan
date: 2015-07-22 01:14:58.446000000

Patch Set 6: Code-Review+1

-------------------------------------
author: Emerson Nolan
date: 2015-07-22 01:15:28.192000000

Patch Set 6: Code-Review+2

-------------------------------------
author: Abby Duran
date: 2015-07-22 03:00:18.487000000

Patch Set 6:

Sundar,


Can you create the MB ticket and post the ThreadSanitizer's output in the ticket?

-------------------------------------
author: Ashlee Kent
date: 2015-07-22 09:39:02.936000000

Patch Set 6: Code-Review-1

An alternative approach would be to replace struct timeval (which is 2 x 64bits and hence not generally supported for atomic operations) with a single uint64_t waketime. 

From scanning the code we don't really need the `struct timeval` - we use a double to snooze on (which personally I'd replace with an integer type).

This would allow the use of atomics to update the sleep time and simplify the need for two copies (and the associated locks).

-------------------------------------
author: Tate Garrett
date: 2015-07-23 23:14:54.730000000

Change has been successfully cherry-picked as 5f3eb257e5a1ab1426de6fb3b37deb742c3616fe

-------------------------------------
