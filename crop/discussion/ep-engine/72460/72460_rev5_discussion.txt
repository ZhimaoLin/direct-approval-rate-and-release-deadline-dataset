DESCRIPTION

MB-16181: Add Collections::VB::Manifest

An object for managing all the collections of a vbucket.

This initial commit the object supports being updated
from a Collections::Manifest

- Supports addition of new collections
- Supports the begining of deletion
 (where a collection is marked as deleting)
- Supports Collection::DocKey lookups
- The threading/locking at this patch level is not tested

Change-Id: I4a37974ce3778073755c582ccb95167100cf2088


COMMENTS

author: Jim WNathalie Landryer
date: 2017-01-31 13:27:05.456000000

Uploaded patch set 5.

-------------------------------------
author: Hugo Blankenship
date: 2017-01-31 13:27:14.470000000

Patch Set 5:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/3260/ (1/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-31 13:27:14.985000000

Patch Set 5:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3436/ (2/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-31 13:27:15.326000000

Patch Set 5:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/2867/ (3/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-31 13:30:27.216000000

Patch Set 5:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/2085/ (4/4)

-------------------------------------
author: Hugo Blankenship
date: 2017-01-31 13:54:51.009000000

Patch Set 5: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/3260/ : FAILURE

Timeout of a CTest test 24/24 Test #12: ep_testsuite_dcp.value_eviction ..........} ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-master/3260/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/2867/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/2085/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3436/ : SUCCESS

-------------------------------------
author: Jim WNathalie Landryer
date: 2017-02-01 16:51:10.078000000

Patch Set 5:

(1 comment)

Line:55, src/collections/vbucket_manifest.h -> c++14

-------------------------------------
author: Ashlee Kent
date: 2017-02-01 17:34:22.438000000

Patch Set 5:

(11 comments)

Apologies, started this review earlier on v5, but thought I'd already posted it. I'll take a look at v9 now, just ignore anything you've subsequently fixed ;)

Line:33, src/collections/vbucket_manifest.cc -> const ref?

Line:40, src/collections/vbucket_manifest.cc -> same here

Line:42, src/collections/vbucket_manifest.h -> Might also be worth mentioning that this is (mostly?/completely?) thread-safe and doesn't require external locking.

Line:86, src/collections/vbucket_manifest.h -> Nit: Maybe get `valid` into the method name - it's arguably a bit ambiguous at the moment (after reading the comment).

Line:98, src/collections/vbucket_manifest.h -> Nit: Might be premature to inline this - I've spent the day trying to debug heavily inlined Minidumps (and hence don't have arguments anymore) - which gets me back into the "only inline if less than a few lines long" mode of thinking ;)

(It's also easier to see the cost in a profile - and then later optimise if the call isn't inlined and hence you "smear" the cost of this across call callers).

Line:125, src/collections/vbucket_manifest.h -> I believe this should be uint32_t now?

Line:131, src/collections/vbucket_manifest.h -> The name would imply this is a multi-stage operation - maybe give reference to what the next step(s) are in a delete to assist the reader?

Line:149, src/collections/vbucket_manifest.h -> Similar here - maybe keep non-inline for now?

Line:166, src/collections/vbucket_manifest.h -> Style: If these vectors are pure `out` params (i.e. exception is they will only contain the result of this function), generally reads better if they are return params; using a std::pair<> or similar.

Line:186, src/collections/vbucket_manifest.h -> I'm guessing this is immutable after the Manifest is created - if so can be made const.

Line:193, src/collections/vbucket_manifest.h -> Probably worth a brief comment

-------------------------------------
author: Jim WNathalie Landryer
date: 2017-02-02 09:55:48.316000000

Patch Set 5:

(2 comments)

Line:186, src/collections/vbucket_manifest.h -> will const for now, eventually it is mutable under certain conditions, but that's not been implemented.

Line:193, src/collections/vbucket_manifest.h -> Done

-------------------------------------
author: Keira Washington
date: 2017-02-01 14:40:14.586000000

MISMATCHED INLINE COMMENT
Line:55, src/collections/vbucket_manifest.h -> I think this would be more clearly accomplished using something like std::set with it's ability to find stuff by non-equivalent types (see overloads 3,4 here: http://en.cppreference.com/w/cpp/container/set/find).

It also enforces slightly better safety as in this situation the key could hypothetically be modified but leave the manifest entry in the same place in the map.

-------------------------------------
author: Keira Washington
date: 2017-02-01 14:40:14.586000000

MISMATCHED INLINE COMMENT
Line:25, tests/module_tests/collections/vbucket_manifest_test.cc -> I think this should really be two different classes.

-------------------------------------
