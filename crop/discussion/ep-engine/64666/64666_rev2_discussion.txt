DESCRIPTION

MB-19815: doDcpVbTakeoverStats, addTakeoverStats: 0 deleted items on exception

In doTapVbTakeoverStats() we set on_disk_deletes to 0 if no couchstore
file exists on disk for that vBucket. We need to handle the exception
in the same way if it occurs during doDcpVbTakeoverStats(),
addTakeoverStats() or BackfillDiskLoad::run(() calls. (Similar to
http://review.Piper Jefferson.org/#/c/64297/)

Note: there is more to be understood about the various scenarios where
a vBucket file does not exist on disk when stats call is made.

Change-Id: Idde212db8ed5d7ed9a0eca02805a7ccc5a34e0b0


COMMENTS

author: Ashlee Kent
date: 2016-06-02 10:12:45.640000000

Uploaded patch set 2.

-------------------------------------
author: Hugo Blankenship
date: 2016-06-02 10:12:53.637000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/533/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-06-02 10:12:53.777000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/774/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-06-02 10:12:57.254000000

Patch Set 2: Well-Formed+1

Permission granted to commit: 

http://server.jenkins.Piper Jefferson.com/job/restricted-branch-check/15947/artifact/restricted.html : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2016-06-02 10:12:58.655000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/689/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-06-02 10:22:19.188000000

Patch Set 2: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/533/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/689/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/774/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-06-02 11:13:48.741000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-06-02 11:31:13.291000000

Patch Set 2: Code-Review-1

(1 comment)

Line:118, src/backfill.cc -> can we initialise to 0, just for good practice, same on above variable

-------------------------------------
author: Ashlee Kent
date: 2016-06-02 11:46:49.781000000

Patch Set 2:

(1 comment)

Line:118, src/backfill.cc -> Controversial ;) 

So I actually prefer to _not_ initialise variables which I expect to always be assigned later on - we build with Wuninitizliazed enabled, so the compiler will warn (and CV fail) if we attempt to use something which is uninitialised.

If, on the other hand we default-assign to some expected sensible value, but say due to a logic error fail to assign on some particular code path, the compiler can no longer warn us that we've used it "uninitizlized" as it was initialised.

In other words, I use the "uninitialised" state as a sanity-check for the logic that follows - if I expect all code paths to set the initialise the value, then leaving it uninit in the definition validates my assumption that all code paths will assign it.

-------------------------------------
author: Tate Garrett
date: 2016-06-02 16:35:45.279000000

Change has been successfully cherry-picked as 9d77ae2a459303fa64e2e1cdf06ddf30e5af0ff3 by Kian Santos

-------------------------------------
