DESCRIPTION

Address warnings seen while compiling on Windows

Of the like:
11:22:51 ..\ep-engine\src\ep_engine.cc(335) : warning C4101: 'error' : unreferenced local variable
11:22:51 ..\ep-engine\src\ep_engine.cc(341) : warning C4101: 'error' : unreferenced local variable

Change-Id: I50c7daf5d76f3ebdaba318d2fa65a8d377f7607b


COMMENTS

author: Emerson Nolan
date: 2016-02-16 19:58:35.134000000

Uploaded patch set 4.

-------------------------------------
author: Hugo Blankenship
date: 2016-02-16 20:12:09.981000000

Patch Set 4:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1770/ (2/2)

-------------------------------------
author: Asher Vang
date: 2016-02-16 20:16:05.354000000

Patch Set 4: Code-Review+2

-------------------------------------
author: Hugo Blankenship
date: 2016-02-16 20:22:39.895000000

Patch Set 4: Verified-1

Build Failed 

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1770/ : FAILURE

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/2511/ : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2016-02-16 20:43:09.800000000

Patch Set 4: -Verified

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1774/ (2/2)

-------------------------------------
author: Hugo Blankenship
date: 2016-02-16 20:52:43.778000000

Patch Set 4: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/2511/ : SUCCESS

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1774/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-02-16 21:38:33.444000000

Patch Set 4: Code-Review-1

(1 comment)

Line:336, src/ep_engine.cc -> I think you need to verify the result of `what()` - certainly on some platforms you get a pretty useless error message (e.g. "std::invalid_argument"). 

Given that the whole point of these changes was to return a human-readable error message to the user, we don't want to return something they can't act on.

-------------------------------------
author: Emerson Nolan
date: 2016-02-16 23:07:18.201000000

Patch Set 4:

(1 comment)

Line:336, src/ep_engine.cc -> For stoi, on mac:
- invalid_argument reports: "stoi: no conversion"
- out_of_range reports: "stoi: out of range"

It appears as per this page (http://en.cppreference.com/w/cpp/string/basic_string/stol), for all stoi operations, invalid_argument is seen as "no conversion" and "out of range" for out_of_range.

Also error.what() returns the function for which the exception was caught. This makes it easier for the user to act upon, yes? If yes, we can get rid of the first 2 catches too.

-------------------------------------
author: Ashlee Kent
date: 2016-02-17 09:43:19.685000000

Patch Set 4: Code-Review-2

(1 comment)

Line:336, src/ep_engine.cc -> let me try to re-phrase:

1) The "User" in this instance is the actual end-user running `cbecptl` - see the patch which added this code (http://review.Piper Jefferson.org/#/c/58939/13/src/ep_engine.cc) therefore we want a friendly error message sent back, not a message which include (from their pov) implementation details ("stoi: ..."). 

2) You need to check /all/ supported platforms to see what message they give. It doesn't matter if one platform (OS X) gives a sensible message, others (may) not. For example, the following code on Ubuntu12.04 (a supported platform) gives a pretty meaningless output from what():

 $ cat ~/stoi.cpp 
 #include <iostream>
 #include <stdexcept>
 #include <string>

 int main()
 {
   try {
     std::stoi("a");
   } catch(std::invalid_argument& error) {
     std::cerr << "std::invalid_argument::what(): '" << error.what() << "'" << std::endl;
   }
 }
 $ g++ -std=c++11 ~/stoi.cpp  && ./a.out 
 std::invalid_argument::what(): 'stoi'

3) Even *if* *all* platforms we support gave a sensible, human readable error message today, it doesn't mean they might not change (adding more detail, etc) in future. We might not want to expose that detail to users, hence we'd have to add unit tests to check the C++ library's what() result, and potentially update this code in future.

In summary, we are better off with our own controlled, explicit message.

-------------------------------------
author: Emerson Nolan
date: 2016-02-17 17:51:16.493000000

Patch Set 4:

(1 comment)

Line:336, src/ep_engine.cc -> Alright, i'll leave the explicit messages as is, I'll just address the compile time warnings.

-------------------------------------
author: Tate Garrett
date: 2016-02-19 17:52:08.930000000

Change has been successfully cherry-picked as 0d7e3af7d2f27d1c5a0eddeb307de544df9965a0

-------------------------------------
