DESCRIPTION

Add BucketType to KVBucket class to identify if it is EP or Ephemeral

Modules invoking bucket functionality or the bucket module itself need
to be able to easily identify the type of the bucket.

This commit adds a new enum class BucketType for this purpose.

Change-Id: If641e162d2136980798e7dab8ac3ec59bf38459d


COMMENTS

author: Adrianna Holmes
date: 2017-02-24 17:08:32.884000000

Uploaded patch set 4.

-------------------------------------
author: Hugo Blankenship
date: 2017-02-24 17:21:29.808000000

Patch Set 4: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/2822/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/3579/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/3998/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/4197/ : SUCCESS

-------------------------------------
author: Keira Washington
date: 2017-02-24 17:48:44.229000000

Patch Set 4:

Actually it would be more like:

    typeid(EpBucket) == typeid(*ptr);

typeid should have performance on par with virtual dispatch since a reference to it will usually be in the vtable (it's definitely faster than a dynamic_cast as it doesn't need to traverse the class hierarchy).

I actually think it's preferable to have it be inelegant. People should be using this as a last resort as generally speaking determining the type of a polymorphic object is an anti-pattern and indicates you have a bad interface.

Having looked at the patch which follows this one it looks like your intention is to use this to identify if the KVBucket/VBucket object supports a feature. A better way to achieve this is to let the object make the decision itself, if it can't it can return an ENGINE_ENOTSUP. This is similar to the motivation behind DaveR's eviction strategies for instant karma.

-------------------------------------
author: Adrianna Holmes
date: 2017-02-24 19:22:12.316000000

Patch Set 4:

>>Actually it would be more like:
       typeid(EpBucket) == typeid(*ptr);
I implied ptr>getBucketType() will typeid(*ptr) and hence that comparison.

>>I actually think it's preferable to have it be inelegant. People should be using this
    as a last resort as generally speaking determining the type of a polymorphic
    object is an anti-pattern and indicates you have a bad interface.
Ok agree with this. Lets postpone merging this only when needed. In the next commit I will make the object return ENGINE_ENOTSUP.

-------------------------------------
author: Adrianna Holmes
date: 2017-02-24 19:23:09.475000000

Patch Set 4:

>>Actually it would be more like:
       typeid(EpBucket) == typeid(*ptr);
I implied ptr->getBucketType() will return typeid(*ptr) and hence that comparison.

-------------------------------------
author: Adrianna Holmes
date: 2017-02-24 19:24:52.198000000

Patch Set 4: Code-Review-2

Lets postpone merging this commit for now as determining the type of a polymorphic object should be last resort.

-------------------------------------
author: Adrianna Holmes
date: 2017-06-28 16:55:06.114000000

Abandoned

-------------------------------------
