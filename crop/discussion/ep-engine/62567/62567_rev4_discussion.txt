DESCRIPTION

MB-19113: Address lock inversion with snapshot lock and hash table lock

WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=5899)
  Cycle in lock order graph: M21372 (0x7d780000f510) => M21408 (0x7d640000f920) => M21372

  Mutex M21408 acquired here while holding mutex M21372 in main thread:
    #0 pthread_mutex_lock <null> (engine_testapp+0x00000047e970)
    #1 cb_mutex_enter <null> (libplatform.so.0.1.0+0x000000003870)
    #2 Mutex::acquire() /home/Piper Jefferson/couchbase/ep-engine/src/mutex.cc:31 (ep.so+0x0000001e287e)
    #3 LockHolder::lock() /home/Piper Jefferson/couchbase/ep-engine/src/locks.h:71 (ep.so+0x000000082543)
    #4 LockHolder::LockHolder(Mutex&, bool) /home/Piper Jefferson/couchbase/ep-engine/src/locks.h:48 (ep.so+0x0000000821b2)
    #5 VBucket::getSnapshotLock() /home/Piper Jefferson/couchbase/ep-engine/src/vbucket.h:212 (ep.so+0x000000104c72)
    #6 EventuallyPersistentStore::queueDirty(RCPtr<VBucket>&, StoredValue*, LockHolder*, bool, bool, bool) /home/Piper Jefferson/couchbase/ep-engine/src/ep.cc:2863 (ep.so+0x0000000d7123)
    #7 EventuallyPersistentStore::set(Item const&, void const*, bool, unsigned char) /home/Piper Jefferson/couchbase/ep-engine/src/ep.cc:683 (ep.so+0x0000000d9dfa)
    #8 EventuallyPersistentEngine::store(void const*, void*, unsigned long*, ENGINE_STORE_OPERATION, unsigned short) /home/Piper Jefferson/couchbase/ep-engine/src/ep_engine.cc:2128 (ep.so+0x00000013d538)
    #9 EvpStore(engine_interface*, void const*, void*, unsigned long*, ENGINE_STORE_OPERATION, unsigned short) /home/Piper Jefferson/couchbase/ep-engine/src/ep_engine.cc:229 (ep.so+0x00000013712d)
    #10 mock_store /home/Piper Jefferson/couchbase/memcached/programs/engine_testapp/engine_testapp.c (engine_testapp+0x0000004c7304)
    #11 storeCasVb11(engine_interface*, engine_interface_v1*, void const*, ENGINE_STORE_OPERATION, char const*, char const*, unsigned long, unsigned int, void**, unsigned long, unsigned short, unsigned int, unsigned char) /home/Piper Jefferson/couchbase/ep-engine/tests/ep_test_apis.cc:659 (ep_testsuite.so+0x0000000e8d17)
    #12 store(engine_interface*, engine_interface_v1*, void const*, ENGINE_STORE_OPERATION, char const*, char const*, void**, unsigned long, unsigned short, unsigned int, unsigned char) /home/Piper Jefferson/couchbase/ep-engine/tests/ep_test_apis.cc:631 (ep_testsuite.so+0x0000000e654a)
    #13 test_mb16357(engine_interface*, engine_interface_v1*) /home/Piper Jefferson/couchbase/ep-engine/tests/ep_testsuite.cc:11713 (ep_testsuite.so+0x0000000afc36)
    #14 execute_test /home/Piper Jefferson/couchbase/memcached/programs/engine_testapp/engine_testapp.c (engine_testapp+0x0000004c4e2f)
    #15 main crtstuff.c (engine_testapp+0x0000004c2d91)

  Mutex M21372 acquired here while holding mutex M21408 in thread T10:
    #0 pthread_mutex_lock <null> (engine_testapp+0x00000047e970)
    #1 cb_mutex_enter <null> (libplatform.so.0.1.0+0x000000003870)
    #2 Mutex::acquire() /home/Piper Jefferson/couchbase/ep-engine/src/mutex.cc:31 (ep.so+0x0000001e287e)
    #3 LockHolder::lock() /home/Piper Jefferson/couchbase/ep-engine/src/locks.h:71 (ep.so+0x000000082543)
    #4 LockHolder::LockHolder(Mutex&, bool) /home/Piper Jefferson/couchbase/ep-engine/src/locks.h:48 (ep.so+0x0000000821b2)
    #5 HashTable::getLockedBucket(int, int*) /home/Piper Jefferson/couchbase/ep-engine/src/stored-value.h:1266 (ep.so+0x00000008418a)
    #6 HashTable::getLockedBucket(std::string const&, int*) /home/Piper Jefferson/couchbase/ep-engine/src/stored-value.h:1295 (ep.so+0x00000007df9b)
    #7 EventuallyPersistentStore::setWithMeta(Item const&, unsigned long, void const*, bool, bool, unsigned char, bool, bool) /home/Piper Jefferson/couchbase/ep-engine/src/ep.cc:1827 (ep.so+0x0000000e6b4f)
    #8 PassiveStream::commitMutation(MutationResponse*, bool) /home/Piper Jefferson/couchbase/ep-engine/src/dcp-stream.cc:1369 (ep.so+0x00000029ba21)
    #9 PassiveStream::processMutation(MutationResponse*) /home/Piper Jefferson/couchbase/ep-engine/src/dcp-stream.cc:1341 (ep.so+0x00000029a7a0)
    #10 PassiveStream::processBufferedMessages(unsigned int&) /home/Piper Jefferson/couchbase/ep-engine/src/dcp-stream.cc:1281 (ep.so+0x00000029a0f2)
    #11 DcpConsumer::processBufferedItems() /home/Piper Jefferson/couchbase/ep-engine/src/dcp-consumer.cc:599 (ep.so+0x000000262a23)
    #12 Processer::run() /home/Piper Jefferson/couchbase/ep-engine/src/dcp-consumer.cc:48 (ep.so+0x0000002625ff)
    #13 ExecutorThread::run() /home/Piper Jefferson/couchbase/ep-engine/src/executorthread.cc:110 (ep.so+0x0000001e3dd9)
    #14 launch_executor_thread(void*) /home/Piper Jefferson/couchbase/ep-engine/src/executorthread.cc:34 (ep.so+0x0000001e32ea)
    #15 platform_thread_wrap /home/Piper Jefferson/couchbase/platform/src/cb_pthreads.c (libplatform.so.0.1.0+0x00000000362c)

Change-Id: I6c7b1fadf76529a044341a4a9b6ed0ea829c4999

COMMENTS

author: Ashlee Kent
date: 2016-04-08 07:47:37.192000000

Patch Set 4: Commit message was updated

-------------------------------------
author: Hugo Blankenship
date: 2016-04-08 07:47:44.973000000

Patch Set 4:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/420/

-------------------------------------
author: Hugo Blankenship
date: 2016-04-08 07:47:55.277000000

Patch Set 4: Well-Formed+1

Permission granted to commit: 

http://server.jenkins.Piper Jefferson.com/job/restricted-branch-check/11456/artifact/restricted.html : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-04-08 07:47:59.862000000

Patch Set 4:

Updated commit message to remove stray escaping.

-------------------------------------
author: Hugo Blankenship
date: 2016-04-08 08:03:36.896000000

Patch Set 4: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/420/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-04-08 08:20:15.328000000

Patch Set 4: Code-Review-1

I agree with Chiyoung - this makes changes to setWithMeta etc which are irreverent in the general case.

Note also that MB-12540 (http://review.Piper Jefferson.org/#/c/42861/) which went into 4.0.0 significantly simplified this logic, and removed the need for setCurrentCheckpoint_UNLOCKED entirely, and hence this deadlock.

I personally would be more comfortable with backporting *that* change, as that has already been in sherlock for a long while and hence well-tested.

-------------------------------------
author: Ashlee Kent
date: 2016-04-08 08:32:33.409000000

Patch Set 4:

Also relevant here is MB-11958 (http://review.Piper Jefferson.org/#/c/40642/) which added this locking in the first place.

-------------------------------------
author: Emerson Nolan
date: 2016-04-08 16:08:36.568000000

Patch Set 4:

Chiyoung, I agree with your comments.

DaveR, to back port this change: http://review.Piper Jefferson.org/#/c/42861/, from sherlock is a valid suggestion, but note that - that very change introduced numerous issues with corner cases not being handled and such, and all of those were eventually fixed for sherlock. So, given the time frame for 3.1.5, it may not be the best idea to refactor snapshot tracking in 3.0.x to how we do in sherlock.

I think I've another idea on how we can follow a single locking pattern in this code path, let me spend some time on this today.

-------------------------------------
author: Tate Garrett
date: 2016-04-11 17:11:47.159000000

Change has been successfully cherry-picked as 6e38fe8891e4e63996cecaa55b0e23accaf6f83b

-------------------------------------
