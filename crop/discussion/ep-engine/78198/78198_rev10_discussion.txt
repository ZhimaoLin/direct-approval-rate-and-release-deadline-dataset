DESCRIPTION

MB-24394: Peform an unlocked reset of ExecutorThread::currentTask

When performing currentTask.reset with currentTaskMutex held a
lock inversion situation occurs if:

* the task hits a ref-count of 0
* the task owns a VBucketPtr (shared_ptr)
* the VBucket is marked for deferred deletion
* the VBucketPtr hits a ref-count of 0

This occurs because the VBucketPtr deleter will schedule a new task
to delete the VBucket and thus we re-enter the task code with a
different lock ordering (TaskQueue::tMutex->currentTaskMutex vs
currentTaskMutex->TaskQueue::tMutex).

To fix this issue we simply need to not hold the currentTaskMutex
whilst calling currentTask.reset().

We switch ExTask over to being a std::shared_ptr and use its well
define move constructor (via std::move) to move the ref-counted
pointer into unlocked scope, and then reset that.

Change-Id: I883cb4d0e8a2c4dbc91cdf93f0a9a967863dcb31


COMMENTS

author: Ashlee Kent
date: 2017-05-24 15:04:39.144000000

Patch Set 10: Patch Set 9 was rebased

-------------------------------------
author: Hugo Blankenship
date: 2017-05-24 15:25:42.586000000

Patch Set 10: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/5972/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/5261/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/502/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/6815/ : SUCCESS

-------------------------------------
