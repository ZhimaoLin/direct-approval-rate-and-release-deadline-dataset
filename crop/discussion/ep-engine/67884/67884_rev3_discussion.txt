DESCRIPTION

MB-20869: Add new stat to fix intermittent test_access_scanner failure

In test_access_scanner the check that the number of non-resident items
was less than 6% of the total is incorrect - it was using integer
division (6/100) and hence the RHS of the check was always zero, which
would always succeed. Fix the check so it calculates the percentage
correctly.

Additionally we did not wait for the previous AccessScanner run to
finalize - which meant that the second start of the access acanner
could fail to start (and consequently we would timeout with the
message:

    Exceeded maximum wait time of 60000000us waiting for stat
    'ep_num_access_scanner_runs' to be greater or equal than 8 -
    aborting.

To solve this, add a new 'ep_alog_running' stat which returns the
number of Acess Scanner tasks running. Query this stat to wait for the
Access Scanner to start / stop before moving to the next iteration.

Change-Id: I6c3b6eeed91302fd7fa67dfade6ae954078fc125


COMMENTS

author: Hugo Blankenship
date: 2016-09-22 14:26:41.259000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1188/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 14:27:24.687000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/891/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 14:52:45.880000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/1052/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 15:01:15.788000000

Patch Set 3: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1188/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/1052/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/891/ : SUCCESS

-------------------------------------
author: Adrianna Holmes
date: 2016-09-26 23:45:59.992000000

Patch Set 3: Code-Review-1

(1 comment)

Line:2842, tests/ep_testsuite.cc -> Still not 100% fool proof. ep_access_scanner_running can be decremented but the task actually does not stop, and then the loop proceeds to next iteration and tries to invoke access scanner again which results in a no-op.

So we should have, while (get_int_stat(h, h1, "ep_num_access_scanner_runs") < alog_runs + num_shards) {
    check(set_param(h, h1, protocol_binary_engine_param_flush,
                        "access_scanner_run", "true"),
              "Failed to trigger access scanner");
}

We do not need the extra stat.

-------------------------------------
author: Ashlee Kent
date: 2016-09-27 07:48:47.135000000

Patch Set 3:

(1 comment)

Line:2842, tests/ep_testsuite.cc -> I think the problem with your proposal is that we could trigger the flush more times than desired. 

Consider that `ep_num_access_scanner_runs` is only incremented at the /end/ of the scan (in ItemAccessVisitor::complete). That means we could trigger an extra access scanner run.

I'm open to any suggestions which guarantee exactly two runs of the access scanner :)

-------------------------------------
author: Ashlee Kent
date: 2016-09-27 11:02:51.667000000

Patch Set 4: Patch Set 3 was rebased

-------------------------------------
author: Adrianna Holmes
date: 2016-09-28 00:52:18.484000000

Patch Set 3:

(1 comment)

Line:2842, tests/ep_testsuite.cc -> We need to check in the executor pool that access scanner task is not running.

-------------------------------------
author: Ashlee Kent
date: 2016-09-28 10:51:39.616000000

Patch Set 3:

(1 comment)

Line:2842, tests/ep_testsuite.cc -> Problem with that is theres's no explicit way to check what's running. We /could/ try to get the scheduler stats for all threads and check none of them are running the AccessScanner, but that feels a bit nasty. 

I think a better solution is move the ep_access_scanner_running increment / decrement to after we call snooze() in AccessScanner::run - as long as our wake some in after the snooze (so the task is expected to be run "immediately" then we should be correct.

-------------------------------------
author: Tate Garrett
date: 2016-09-29 12:07:14.220000000

Change could not be merged due to a path conflict.

Please rebase the change locally and upload the rebased commit for review.

-------------------------------------
author: Tate Garrett
date: 2016-09-29 12:36:57.094000000

Change has been successfully cherry-picked as 63edc3b6483e9740db142e483515bd078dc56555 by Ashlee Kent

-------------------------------------
