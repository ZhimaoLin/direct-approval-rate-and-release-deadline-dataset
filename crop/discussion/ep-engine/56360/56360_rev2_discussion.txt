DESCRIPTION

Address lock inversion scenario in ExecutorPool/ProcesserTask

Addressing this lock inversion by saving a reference of ExTask
in ExecutorPool's stopTaskGroup, just to make sure the reference
of the ExTask doesn't become zero, causing its destructor to be
invoked while holding the ExecutorPool's tMutex.

WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=193603)
Cycle in lock order graph: M27357 (0x7d5000016940) => M12635 (0x7d5000018120) => M27357

  Mutex M12635 acquired here while holding mutex M27357 in main thread:
    #0 pthread_mutex_lock <null> (engine_testapp+0x00000047f130)
    #1 cb_mutex_enter /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/platform/src/cb_pthreads.cc:189 (libplatform.so.0.1.0+0x000000004d92)
    #2 Mutex::acquire() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/mutex.cc:31 (ep.so+0x00000010a139)
    #3 ExecutorPool::_wake(unsigned long) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/locks.h:71 (ep.so+0x0000000e2246)
    #4 ExecutorPool::wake(unsigned long) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/executorpool.cc:345 (ep.so+0x0000000e2371)
    #5 Flusher::wake() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/flusher.cc:158 (ep.so+0x0000000ef406)
    #6 EventuallyPersistentStore::queueDirty(RCPtr<VBucket>&, StoredValue*, LockHolder*, unsigned long*, bool, bool, bool, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/flusher.h:89 (ep.so+0x00000007ff03)
    #7 EventuallyPersistentStore::deleteWithMeta(std::string const&, unsigned long*, unsigned long*, unsigned short, void const*, bool, ItemMetaData*, bool, bool, unsigned long, ExtendedMetaData*, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep.cc:2986 (ep.so+0x000000091f54)
    #8 PassiveStream::processDeletion(MutationResponse*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/stream.cc:1325 (ep.so+0x000000073e0d)
    #9 PassiveStream::messageReceived(DcpResponse*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/stream.cc:1161 (ep.so+0x0000000733ef)
    #10 DcpConsumer::deletion(unsigned int, void const*, unsigned short, unsigned long, unsigned short, unsigned long, unsigned long, void const*, unsigned short) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/consumer.cc:355 (ep.so+0x0000000577d6)
    #11 EvpDcpDeletion(engine_interface*, void const*, unsigned int, void const*, unsigned short, unsigned long, unsigned short, unsigned long, unsigned long, void const*, unsigned short) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep_engine.cc:1657 (ep.so+0x0000000ae4dd)
    #12 mock_dcp_deletion(engine_interface*, void const*, unsigned int, void const*, unsigned short, unsigned long, unsigned short, unsigned long, unsigned long, void const*, unsigned short) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/memcached/programs/engine_testapp/engine_testapp.cc:659 (engine_testapp+0x0000004c635d)
    #13 test_dcp_consumer_delete_with_time_sync(engine_interface*, engine_interface_v1*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/tests/ep_testsuite.cc:6412 (ep_testsuite.so+0x00000007bfa3)
    #14 execute_test(test, char const*, char const*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/memcached/programs/engine_testapp/engine_testapp.cc:1090 (engine_testapp+0x0000004c4192)
    #15 __libc_start_main /build/buildd/eglibc-2.15/csu/libc-start.c:226 (libc.so.6+0x00000002176c)

  Mutex M27357 acquired here while holding mutex M12635 in main thread:
    #0 pthread_mutex_lock <null> (engine_testapp+0x00000047f130)
    #1 cb_mutex_enter /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/platform/src/cb_pthreads.cc:189 (libplatform.so.0.1.0+0x000000004d92)
    #2 Mutex::acquire() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/mutex.cc:31 (ep.so+0x00000010a139)
    #3 PassiveStream::clearBuffer() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/locks.h:71 (ep.so+0x0000000723d9)
    #4 PassiveStream::setDead(end_stream_status_t) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/stream.cc:1021 (ep.so+0x0000000728e3)
    #5 DcpConsumer::closeAllStreams() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/consumer.cc:875 (ep.so+0x000000055cc1)
    #6 DcpConsumer::~DcpConsumer() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/consumer.cc:113 (ep.so+0x000000055751)
    #7 DcpConsumer::~DcpConsumer() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/dcp/consumer.cc:111 (ep.so+0x000000055e35)
    #8 Processer::~Processer() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/atomic.h:271 (ep.so+0x000000054bfd)
    #9 ~SingleThreadedRCPtr /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/atomic.h:271 (ep.so+0x0000000e61a2)
    #10 ExecutorPool::stopTaskGroup(unsigned long, task_type_t, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/executorpool.cc:585 (ep.so+0x0000000e68ee)
    #11 EventuallyPersistentStore::~EventuallyPersistentStore() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep.cc:471 (ep.so+0x00000007e1d6)
    #12 EventuallyPersistentEngine::~EventuallyPersistentEngine() /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep_engine.cc:6342 (ep.so+0x0000000cabea)
    #13 EvpDestroy(engine_interface*, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/ep-engine/src/ep_engine.cc:144 (ep.so+0x0000000ace97)
    #14 mock_destroy(engine_interface*, bool) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/memcached/programs/engine_testapp/engine_testapp.cc:98 (engine_testapp+0x0000004c4c07)
    #15 execute_test(test, char const*, char const*) /home/Piper Jefferson/jenkins/workspace/ep-engine-threadsanitizer-master/memcached/programs/engine_testapp/engine_testapp.cc:995 (engine_testapp+0x0000004c4247)
    #16 __libc_start_main /build/buildd/eglibc-2.15/csu/libc-start.c:226 (libc.so.6+0x00000002176c)

Change-Id: I113064316f38618eeea54f25777691d9e6291780


COMMENTS

author: Emerson Nolan
date: 2015-10-23 19:17:30.675000000

Uploaded patch set 2.

-------------------------------------
author: Hugo Blankenship
date: 2015-10-23 19:17:38.852000000

Patch Set 2:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/636/ (2/2)

-------------------------------------
author: Ellie Kidd
date: 2015-10-23 19:18:30.776000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Hugo Blankenship
date: 2015-10-23 19:30:24.743000000

Patch Set 2: Verified-1

Build Failed 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1400/ : FAILURE

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/636/ : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2015-10-23 19:31:26.564000000

Patch Set 2: -Verified

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1403/ (2/2)

-------------------------------------
author: Hugo Blankenship
date: 2015-10-23 19:43:11.382000000

Patch Set 2: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/636/ : SUCCESS

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/1403/ : SUCCESS

-------------------------------------
author: Abby Duran
date: 2015-10-23 21:31:00.679000000

Patch Set 2: Code-Review-1

(1 comment)

Line:554, src/executorpool.cc -> I think this is still a workaround and not a good approach to fixing this issue. ExecutorPool does the right thing to manage the life cycle of task instances through the reference counter. I think we need to fix this issue in DCP side. 

If I look at this code, it is not easy to understand why we need to add stopped tasks to the list and free them after releasing the task mutex.

-------------------------------------
author: Tate Garrett
date: 2015-10-25 17:59:04.967000000

Change has been successfully cherry-picked as ef725b7478a56d85afbfc972351ebee9013b05cf

-------------------------------------
