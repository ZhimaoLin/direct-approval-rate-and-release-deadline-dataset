DESCRIPTION

MB-19948: Refactor CouchKVStore meta-data handling

Wrap the ep-engine metadata we store into couchstore in
a class to provide a much cleaner management interface.

This includes a fix for the orginal MB-19948 issue in that
we correctly read V1 metadata (the 18byte version written
by 3.x). The fix is kind of hidden in the refactor, but the
new code explictly looks at the size of metadata and has
construction paths for 16, 18 and 19 bytes.

Tests in cab19c11ea95df30a119196078f7bc8bff683692 lend
some confidence to this refactoring.

Change-Id: I7d2042af519819737a6e4d070fd8185c84778d6a


COMMENTS

author: Jim WNathalie Landryer
date: 2016-08-09 11:13:39.049000000

Uploaded patch set 3.

-------------------------------------
author: Hugo Blankenship
date: 2016-08-09 11:13:44.785000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/867/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-08-09 11:13:44.944000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1026/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-08-09 11:13:45.097000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/1114/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-08-09 11:27:32.679000000

Patch Set 3: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1026/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/867/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/1114/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-08-09 11:42:37.275000000

Patch Set 3: Code-Review+1

(12 comments)

This is something like +0.5 - general approach etc looks good, but a few minor comments.

Line:43, src/couch-kvstore/couch-kvstore-metadata.h -> Nit: can be const.

Line:62, src/couch-kvstore/couch-kvstore-metadata.h -> Nit: missing carriage return.

Line:90, src/couch-kvstore/couch-kvstore-metadata.h -> Nit: can be const.

Line:91, src/couch-kvstore/couch-kvstore-metadata.h -> Can we assert that this is the expected value (I think there's only one valid value for the flex code?)

Line:171, src/couch-kvstore/couch-kvstore-metadata.h -> Maybe add some helpful message here - say include in.size?

Line:198, src/couch-kvstore/couch-kvstore-metadata.h -> Would it make more sense to perform the byteswap "on the way in" - i.e. when we initially construct the metadataV0 object? That way we don't have to worry about it after construction?

(ditto for the instances below)

Line:252, src/couch-kvstore/couch-kvstore-metadata.h -> Given the client has to manage the lifetime of this (i.e. it's a dynamic allocation), any reason not to return a std::string / std::vector ?

Line:282, src/couch-kvstore/couch-kvstore-metadata.h -> Assuming we validate the version when written, can we remove the default case here (and rely on us explicitly listing all valid Versions?

Line:219, src/couch-kvstore/couch-kvstore.cc -> Would it be cleaner to move this into a  Metadata constructor which takes an Item? That would mean we'd be sure to initialise all fields of Metadata, and simplifies the code in this method?

Line:646, src/couch-kvstore/couch-kvstore.cc -> Would be desirable if we could avoid the new() here - can we not have createMetaData just return a concrete object - as it doesn't look like the type created is dynamic?

Line:1483, src/couch-kvstore/couch-kvstore.cc -> I'm not a big fan of lots of different constructor variants, but having such a long list of arguments to the Item constructor feels error-prone - given there's another very similar new call at line 1532.

Is it worth creating a helper static function - itemFromMetaAndDocInfo(docinfo, metadata) or similar to simplify this / remove duplication?

Line:145, src/couch-kvstore/couch-kvstore.h -> Correct me if I'm wrong, but this doesn't have a different lifespan from the CouchRequest object - so can it just be a normal member variable (and we save the extra new() call?

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-08-10 09:39:29.904000000

Patch Set 3:

(7 comments)

Line:43, src/couch-kvstore/couch-kvstore-metadata.h -> Done

Line:62, src/couch-kvstore/couch-kvstore-metadata.h -> Done

Line:90, src/couch-kvstore/couch-kvstore-metadata.h -> Done

Line:91, src/couch-kvstore/couch-kvstore-metadata.h -> Done

Line:171, src/couch-kvstore/couch-kvstore-metadata.h -> oops, yeah forgot to complete that one before upload #shame

Line:198, src/couch-kvstore/couch-kvstore-metadata.h -> investigating, makes sense for performance reason if we code loops around getCas etc...

Line:252, src/couch-kvstore/couch-kvstore-metadata.h -> investigating

-------------------------------------
author: Tate Garrett
date: 2016-08-12 09:57:59.865000000

Change has been successfully cherry-picked as 8350175ed7fc9d060d9105bcaa5aa538bb8f973b by Ashlee Kent

-------------------------------------
