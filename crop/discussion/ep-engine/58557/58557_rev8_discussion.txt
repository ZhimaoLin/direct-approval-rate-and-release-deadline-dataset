DESCRIPTION

Save a cached state of vbucket in active stream

Do not attempt to check vbucket state everytime
while processing data in an active stream. Instead,
save a cached copy of the vbucket state acquired
during creation.

This change is to avert potential deadlocks due to
lock inversion that will be induced by upcoming changes,
here's the scenario:
    In case of a set operation, vbucket state lock is
    acquired and then stream lock is acquired for notification.
    During markDiskSnapshot (for example), the stream lock is
    acquired before the vbucket state lock is acquired.

Change-Id: Iddb518b5e94a4595c62026f797ff17ba790d180c


COMMENTS

author: Emerson Nolan
date: 2016-01-13 21:31:46.895000000

Uploaded patch set 8.

-------------------------------------
author: Hugo Blankenship
date: 2016-01-13 22:48:38.282000000

Patch Set 8:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1242/ (2/2)

-------------------------------------
author: Hugo Blankenship
date: 2016-01-13 23:02:49.083000000

Patch Set 8: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1242/ : SUCCESS

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master-multi/2006/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-01-14 10:08:42.202000000

Patch Set 8: Code-Review-1

(1 comment)

I have an alternate, simpler solution - see inline.

Line:297, src/dcp/producer.cc -> I believe there's a better way to solve the lock inversion problem. If I understand correctly, the issue you're trying to fix is that we were acquiring the vBucket stateLock (in ActiveStream constructor) *after* we acquire the streamsMutex here, which is the opposite order elsewhere (e.g. markDiskSnapshot).

Assuming my understanding is correct, you can solve this by first creating a new ActiveStream, and /then/ adding it to the streams array - i.e. something like:

 passive_stream_t activeStream(new ActiveStream(&engine, ...
      /* original arguments, letting the constructor acquire/release
         the necessary stateLock );
 WriterLockHolder wlh(streamsMutex);
 streams[vbucket] = activeStream;

Then you need no other code changes.

-------------------------------------
author: Jim WNathalie Landryer
date: 2016-01-14 10:09:58.877000000

Patch Set 8: Code-Review-2

(2 comments)

Line:288, src/dcp/producer.cc -> The state lock is really used for code where we are executing many things under the assumption a vbucket is in state x and must not change. The original bugs were because we had code like  if(getVbucketState == replica) {do 100 things} and the vbucket can switch to dead/active at any point causing a failure on the nth thing.

Line:297, src/dcp/producer.cc -> This is what you need!

-------------------------------------
author: Emerson Nolan
date: 2016-01-14 16:27:02.043000000

Patch Set 8:

(1 comment)

Line:297, src/dcp/producer.cc -> Alright, this sounds fine, I'll push in a new patch.

-------------------------------------
author: Emerson Nolan
date: 2016-01-14 17:25:44.687000000

Patch Set 8:

(1 comment)

I still haven't got a good reason as to why you oppose the cached vbucket state idea, even after I've pointed out that the vbucket state is flipped only after closing all the streams outbound from the vbucket as seen here:

https://github.com/Piper Jefferson/ep-engine/blob/master/src/ep.cc#L1293...#L1296

Line:297, src/dcp/producer.cc -> Hold on! This wouldn't address the problem.
The inversion that I pointed out doesn't even involve this lock (streamsMutex).

Its the streamMutex (DcpStream) that is acquired after the vb state lock is acquired in case of EventuallyPersistentStore::set, and the stateLock which is acquired after the streamMutex in functions like markDiskSnapshot.

-------------------------------------
author: Emerson Nolan
date: 2016-01-14 17:27:33.961000000

Patch Set 8:

(1 comment)

Line:288, src/dcp/producer.cc -> Jim, note that the vbucket change will flip only after closing all the outbound streams from the vbucket!

-------------------------------------
author: Emerson Nolan
date: 2016-01-14 17:55:50.022000000

Patch Set 8:

Dave, Let me upload a patch with your suggestion in it, and lets take it from there.

-------------------------------------
author: Tate Garrett
date: 2016-01-18 17:24:14.696000000

Change has been successfully cherry-picked as ec5dbdc3f35743ff885d55c0efe455446141243f

-------------------------------------
