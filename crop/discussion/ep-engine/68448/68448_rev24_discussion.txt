DESCRIPTION

Add stats test to ep_perfsuite

Extended the number of stats for which we measure performance.

Also extended the number of tests to including testing with
100 active vbuckets, (in addition to testing with 1 vbucket).

Also separated into standard stats and slow stats.
The tests for the standard stats iterate 1000 times, however
the tests for the slow stats iterate 100 times.

Example output of the standard stats is:

32:                                 Percentile
32:                          Median     95th     99th  Std Dev  Histogram of samples
32:
32: diskinfo                  4.596    4.769    7.084    3.944  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: failovers                36.318   68.856  232.886  112.407  ▁▁▁▁█▆▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: failovers_vb0             2.571    2.869    4.375    3.697  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: dcp-vbtakeover            2.699    2.747    3.262    2.175  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: tap-vbtakeover            3.299    5.829   15.658    3.329  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: config                   92.993  208.508  410.700  289.420  ▁▁▁▁▁▁▁▁▁▁▁█▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: kvstore                 128.151  282.344  453.924   96.942  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁█▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: prev-vbucket             36.920   74.383  123.672   22.041  ▁▁▁▁█▇▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: vkey_vb0                 33.616   82.903  114.688   23.510  ▁▁▁▁█▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: key_vb0                   3.184    3.440   10.735    2.651  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: info                      0.605    0.626    0.645    0.265  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: uuid                      0.632    1.224    1.310    3.511  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: scheduler                49.999  101.020  203.979   33.561  ▁▁▁▁▁▁█▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: memory                   14.098   26.232   58.500    9.100  ▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: runtimes                 57.091   90.641  143.582   15.619  ▁▁▁▁▁▁▁█▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: workload                 16.743   18.430   41.345    5.753  ▁▁█▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: timings                  40.803   77.617   98.745   23.935  ▁▁▁▁▁█▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: vb-details_vb0           48.356   62.348   96.613   11.524  ▁▁▁▁▁█▇▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: warmup                    9.431   10.629   15.329    1.261  ▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: checkpoint_vb0           13.161   14.712   24.398    3.179  ▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: dcp                      33.193   50.920   86.615    9.597  ▁▁▁▁█▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: vb-seqno_vb0              6.140    6.865   12.063    0.960  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: vbucket                  33.565   60.747   66.232    9.521  ▁▁▁▁█▅▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: tap                      80.194  143.648  176.045   19.502  ▁▁▁▁▁▁▁▁▁▁█▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: dcpagg                    5.223    8.756   13.627    1.881  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: tapagg                    5.985    6.041    6.293    0.507  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32:                                                             0              µs            282

Example output of the slow stats is:

32:                                 Percentile
32:                          Median     95th     99th  Std Dev  Histogram of samples
32:
32: Sets (bg)                 2.885    3.665   11.631  259.315  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: diskinfo-detail (x1e3)    2.854   10.219   31.286    3.989  ▁▁▁▁▃█▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: allocator               786.336 1761.968 41032.623 4103.862  ▁▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: checkpoint      (x1e3)    2.801    6.287   14.300    2.029  ▁▁▁▁▃█▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: dispatcher      (x1e3)    4.531    5.974    7.197    0.802  ▁▁▁▁▁▁▂▃█▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: engine                  270.097  409.075  607.720   53.950  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: kvtimings               164.314  371.686  480.599   71.754  ▁█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: vb-seqno        (x1e3)    1.127    1.786    4.330    0.509  ▁▁█▆▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: vb-details      (x1e3)    5.619   10.014   10.971    1.468  ▁▁▁▁▁▁▁▁▁█▇▃▃▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
32: hash            (x1e3)   12.163   19.133   23.033    3.120  ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▆▂▃▄█▅▄▃▂▁▃▃▂▂▂▁
32:                                                             1              µs          19132

Change-Id: Ib6ab742589aecff1a64ccd0f194b90d3e796e627


COMMENTS

author: Kymani Ramirez
date: 2016-10-12 19:48:45.273000000

Uploaded patch set 24.

-------------------------------------
author: Hugo Blankenship
date: 2016-10-12 19:48:52.319000000

Patch Set 24:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/1526/ (1/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-10-12 19:48:52.485000000

Patch Set 24:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/1209/ (2/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-10-12 19:48:52.628000000

Patch Set 24:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/325/ (3/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-10-12 19:48:52.779000000

Patch Set 24:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1423/ (4/4)

-------------------------------------
author: Hugo Blankenship
date: 2016-10-12 20:14:13.814000000

Patch Set 24: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/325/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-addresssanitizer-master/325/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1423/ : FAILURE

ThreadSanitizer issue: data race ??:0 operator delete(void*)  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-master/1423/ )

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-master/1423/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/1526/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/1209/ : SUCCESS

-------------------------------------
author: Keira Washington
date: 2016-10-12 21:16:43.391000000

Patch Set 24:

(16 comments)

Line:78, tests/ep_perfsuite.cc -> I don't see a particularly good reason to specify the type as bool (it's both plausible a third option might need adding and there's no real size pressure).

Line:78, tests/ep_perfsuite.cc -> should be `enum class` (especially since you're using them as scoped anyway)

Line:83, tests/ep_perfsuite.cc -> ditto

Line:101, tests/ep_perfsuite.cc -> I'd consider having these in a struct to namespace them instead, e.g.

struct iterations {
    const int fast_stats = 1000;
    const int slow_stats = 100;
}

as it makes them a bit tidier. You could also add a static function to accept a StatRuntime and return an iteration count, e.g.

struct iterations {
   ...

   static int get(StatRuntime sr) {
        switch (sr) {
            case StatRuntime::Fast: return fast_stats;
            case StatRuntime::Slow: return slow_stats;
        }
   }
}

which would simplify where you've used ternary operators below

Line:107, tests/ep_perfsuite.cc -> I'm not a fan of mixing the test definitions and the test measurements - it might make more sense to split them into separate structures. I'm also very against having the global mutable state.

Line:119, tests/ep_perfsuite.cc -> Since you're iterating over them, there isn't a particularly good reason to use an _unordered_ map. In fact I can't really see why you need a map altogether - including the test name as part of the properties would be sufficient in which case an array/vector would work.

Line:140, tests/ep_perfsuite.cc -> nit spelling, sentinal -> sentinel

Line:192, tests/ep_perfsuite.cc -> these numbers

Line:196, tests/ep_perfsuite.cc -> invented by

Line:200, tests/ep_perfsuite.cc -> houdini (magic)

Line:230, tests/ep_perfsuite.cc -> consider explicitly calculating them

Line:1272, tests/ep_perfsuite.cc -> please add a comment explaining the purpose of this

Line:1273, tests/ep_perfsuite.cc -> weird indent

Line:1276, tests/ep_perfsuite.cc -> This seems like a prime target for some RAII

Line:1310, tests/ep_perfsuite.cc -> weird alignment, suggest putting this down a line

Line:1337, tests/ep_perfsuite.cc -> To clarify, you're running a bunch of tests and discarding half of them?

-------------------------------------
author: Kymani Ramirez
date: 2016-10-13 12:23:59.578000000

Patch Set 24:

(15 comments)

Line:78, tests/ep_perfsuite.cc -> Agree removing bool, (and int type from BackgroundWork)

Line:78, tests/ep_perfsuite.cc -> Done

Line:83, tests/ep_perfsuite.cc -> Done

Line:107, tests/ep_perfsuite.cc -> Would prefer to keep them altogether.  However have made the key and runtime const.

Line:119, tests/ep_perfsuite.cc -> Dave suggested an unorder_map.  Agreed we could use an array or vector, however having the map key: stat_test and value: Stat properties is convenient.

Line:140, tests/ep_perfsuite.cc -> corrected spelling - and all uses of sentinal in the file.

Line:192, tests/ep_perfsuite.cc -> Will look to address in separate patch.  Where we also want to be consistent on the use of (x1e3) in the output table.

Line:196, tests/ep_perfsuite.cc -> see comment above

Line:200, tests/ep_perfsuite.cc -> see comment above

Line:230, tests/ep_perfsuite.cc -> see comment above

Line:1272, tests/ep_perfsuite.cc -> Code is no longer required - and hence removed.

Line:1273, tests/ep_perfsuite.cc -> Code been removed

Line:1276, tests/ep_perfsuite.cc -> Could create a timing function however don't think it provides any significant benefit here.

Line:1310, tests/ep_perfsuite.cc -> fixed

Line:1337, tests/ep_perfsuite.cc -> Good spot :) - have fixed so we only run the tests we collect the timings for

-------------------------------------
author: Ashlee Kent
date: 2016-10-13 13:08:20.532000000

Patch Set 24:

(2 comments)

Line:107, tests/ep_perfsuite.cc -> I think for test code (and of this size) it's reasonable to have them in a single structure and just make the immutable fields `const`.

Line:119, tests/ep_perfsuite.cc -> The key gives a convenient human-readable name for the stat; I don't mind either way if you keep as a map or an array (and move the key into the StatProperties struct).

-------------------------------------
author: Tate Garrett
date: 2016-10-21 10:46:33.440000000

Change has been successfully cherry-picked as 602b89d17b0aa85a3ba00f136e0d0cb4ddaf960c by Ashlee Kent

-------------------------------------
