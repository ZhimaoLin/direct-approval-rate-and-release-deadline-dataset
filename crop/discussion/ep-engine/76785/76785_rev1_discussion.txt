DESCRIPTION

WIP: Convert value_t to std::shared_ptr

Some initial testing suggests this generates less code compared to
SingleThreadedRCPtr. Need further analysis.

Change-Id: I7e950f7081018878deeaf03dc31a1df1a00902b9


COMMENTS

author: Ashlee Kent
date: 2017-04-13 17:39:27.923000000

Uploaded patch set 1.

-------------------------------------
author: Hugo Blankenship
date: 2017-04-13 19:14:30.686000000

Patch Set 1: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/4584/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-addresssanitizer-master/4584/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/5807/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-master/5807/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/6045/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/5300/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-04-20 13:32:41.333000000

Abandoned

This is unlikely to be as efficient as our own ref-counted ptr for two reasons:

1) shared_ptr is the size of two pointers (object and control-block), compared to RCValue being the size of one (for the ref-count).
2) shard_ptr results in two allocations, unless one uses make_shared(). However, make_shared cannot accept a custom size for the allocation, and hence we can't use it for Blob creation. As a result, we'll end up with two allocations.

Abandoning for now.

-------------------------------------
