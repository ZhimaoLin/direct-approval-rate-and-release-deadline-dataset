DESCRIPTION

MB-17766: Incorrect ordering during ActiveStream's takeover-send phase

A race between the step() and ActiveStreamCheckpointProcessorTask
can cause mutations to be queued into the readyQ after the
setVBucketState(active) message.

Here's the scenario in chronology (T: Front-end thread, BT: IO thread):
1. T1: ActiveStream::setVBucketStateAckRecieved()
2. T1: transitionState(takeoverSend) => schedules ActiveStreamCheckpointProcessorTask
3. BT1: manageConnections() notifies memcached about specific conn (max idle time: 5s)
4. BT2: ActiveStreamCheckpointProcessorTask runs, gets all Items For Cursor
5. T1: step() -> takeoverSendPhase() -> readyQ is empty
        => nextCheckpointItem() return false, as getNumItemsForCursor returns 0
        => setVbucketState(active) added to readyQ
6. BT2: ActiveStreamCheckpointProcessorTask continues, adds mutations acquired into readyQ
    -> Note the mutations were acquired in step 4
    => Notified memcached connections
7. T1: step() .. ships messages in incorrect order

On the new master, the vbucket is promoted to active state and then more
mutations are received from the old master. If there were front end ops
at this time, there could be an inconsistency in highSeqno or in worst
cases crashes in checkpoint manager due to highSeqno not belonging in
the designated range.

The fix here would be to acquire streamMutex for the length of
nextCheckpointItemTask() which is run by ActiveStreamCheckpointProcessorTask,
so that no such incorrect ordering of DCP messages takes place.

Change-Id: I68d2fea97694d179769a40dac2d557641961f47f


COMMENTS

author: Emerson Nolan
date: 2016-02-05 01:01:59.328000000

Uploaded patch set 2: Commit message was updated.

-------------------------------------
author: Hugo Blankenship
date: 2016-02-05 01:02:06.741000000

Patch Set 2:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1577/

-------------------------------------
author: Hugo Blankenship
date: 2016-02-05 01:09:39.604000000

Patch Set 2: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/1577/ : SUCCESS

-------------------------------------
author: Adrianna Holmes
date: 2016-02-05 01:30:12.512000000

Patch Set 2: Code-Review+2

-------------------------------------
author: Ashlee Kent
date: 2016-02-05 10:22:37.918000000

Patch Set 2: Code-Review-1

Please add a regression test for this issue.

-------------------------------------
author: Emerson Nolan
date: 2016-02-05 18:15:38.911000000

Patch Set 2:

Adding a unit test could prove difficult as the issue may or may not reproduce depending on when the step() function is invoked such that it races with ActiveStreamCheckpointProcessorTask::run() which is invoked by an auxIO thread.

-------------------------------------
author: Ashlee Kent
date: 2016-02-05 18:20:09.850000000

Patch Set 2:

> Adding a unit test could prove difficult as the issue may or may
 > not reproduce depending on when the step() function is invoked such
 > that it races with ActiveStreamCheckpointProcessorTask::run() which
 > is invoked by an auxIO thread.

You should be able to call each relevant function Adrianna Holmesally (i.e. not from auxIO threads etc) to demonstrate the issue (i.e. wrong order of messages) and then show that it doesn't occur with your fix.

-------------------------------------
author: Emerson Nolan
date: 2016-02-05 18:25:30.955000000

Patch Set 2:

Ok, say we do come up with a way to invoke the relevant function Adrianna Holmesally (instead of the auxIO dispatcher), how can we definitely control the "race": which is the order in which the internal steps of the 2 functions execute that would cause the issue.

-------------------------------------
author: Emerson Nolan
date: 2016-02-06 00:28:45.957000000

Patch Set 2:

I've an idea for the unit test, but not sure how deterministic I can make it.

-------------------------------------
