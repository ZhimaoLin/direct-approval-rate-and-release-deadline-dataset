DESCRIPTION

Serialize item add/update/softDelete at EphemeralVBucket level

In an EphemeralVBucket we need to store items sequentially apart
from storing it in HashTable. We intend to store these items in a
data structure, a 'sequence list', which may be implemented as a
linked list or a skiplist. We must serialize the adds/updates/softDeletes
on the sequence list.

Currently seqno is generated in the CheckpointManager and is synchronized
on 'queueLock' in the CheckpointManager. CheckpointManager relies on seqno
for its meta(dummy) items and also self generates them (that is generates
seqno when no external item is added to it). It is therefore not a trivial
task to move the seqno generation entirely to the EphemeralVBucket.

This commit introduces a new lock at the EphemeralVBucket level 'orderLock'.
Using this lock ensures that at the VBucket level we have correct ordering
of items even though seqno is generated by the CheckpointManager later.
The seqno generated by the CheckpointManager later is updated in the
sequence list.

All operations/data structures that rely on ordered sequence of items
must grab i) orderLock in 'EphemeralVBucket' and then ii) queueLock in
'CheckpointManager'.

The commit also derives child class (EphemeralVBucket) functions for
add/update/softDelete and gives an overview of what changes will be
made in EphemeralVBucket when sequence list is added pretty soon.

Pros of this approach:
1. CheckpointManager logic is unchanged and hence smaller chance of
   regression.
2. Difference in operation of VBucket vs EphemeralVBucket level is little.

Cons of this approach:
1. Some rogue functions not grabbing 2 locks (orderLock and queueLock)
   correctly can screw up things. But I think since we have very few
   functions handling add/update/softDelete, it should not be a big problem.
2. There is a tiny (very tiny :) ) window where we the item in the
   'sequence list' though is in correct order, does not have a seqno.
   Hence special care must be taking during DCP backfill from the
   sequence list.

Change-Id: I99e928c75f9eee101bba8852b6cc531bb8353886


COMMENTS

author: Adrianna Holmes
date: 2017-02-08 01:24:20.012000000

Uploaded patch set 1.

-------------------------------------
author: Adrianna Holmes
date: 2017-02-08 01:25:20.774000000

Topic set to ephemeral

-------------------------------------
author: Adrianna Holmes
date: 2017-02-08 01:28:22.980000000

Patch Set 1:

Dave just adding you for review to know your thoughts on this approach.
It think this is the safest approach we can employ without having to refactor checkpoint manager code and keeping minimal lock time for "sequence generation/ ordering of items"

We can discuss further on this approach tomo

-------------------------------------
author: Hugo Blankenship
date: 2017-02-08 01:37:06.762000000

Patch Set 1: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/2308/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/3087/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3674/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/3484/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-02-08 10:14:10.460000000

Patch Set 1: Code-Review-1

(6 comments)

I think the general approach is OK, I agree there's pros and cons but I think this is at least a step in the right direction.

Few comments on implementation details.

Line:55, src/ephemeral_vb.h -> Note: No need to repeat "black-box" documentation on overridden methods - it just duplicates the comment on the parent class, and means we have two things to keep in sync.

Line:60, src/ephemeral_vb.h -> Add `override` to these so it's clear they are overrides of virtual functions in a parent class.

Line:103, src/ephemeral_vb.h -> Nit: prefer explicit nouns (e.g. "EphemeralVBucket", or "in this class") - as code moves / evolves, things like `here` can become ambiguous.

Line:113, src/ephemeral_vb.h -> Would `sequenceLock` be a more explicit name?

Line:82, src/ephemeral_vb.cc -> This all looks duplicated from VBucket::updateStoredValue.

Prefer to refactor so the common code is in one place - either by having this method call down to the base class one to do the common work, or (if not possible) extracting the common code into a protected method and having both call that.

(Same in other methods).

Line:47, /COMMIT_MSG -> This worries me - even if it's small we'll hit it. Can we not do something like only update a `high sequence` ID after the seqno is added, and then use the `high sequence` ID to control what range we iterate over for DCP?

-------------------------------------
author: Adrianna Holmes
date: 2017-02-08 16:46:37.812000000

Patch Set 1:

(6 comments)

Line:55, src/ephemeral_vb.h -> Done

Line:60, src/ephemeral_vb.h -> Done

Line:103, src/ephemeral_vb.h -> Done

Line:113, src/ephemeral_vb.h -> Here we are not generating the sequence. We are just maintaining the order of elements. So thought will use orderLock.. But sequenceLock is also good. Let me know

Line:82, src/ephemeral_vb.cc -> Ok will look into that

Line:47, /COMMIT_MSG -> Yup, we can do that. That was in my mind for "special care"

-------------------------------------
author: Adrianna Holmes
date: 2017-02-15 23:18:16.462000000

Patch Set 1:

(1 comment)

Line:113, src/ephemeral_vb.h -> Changing it to "sequenceLock" as sequence is invariably there ("ordered sequence of items")

-------------------------------------
