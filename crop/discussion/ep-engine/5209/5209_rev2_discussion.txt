DESCRIPTION

Incremental backup client stops at the open checkpoint.

Incremental backup (one of the registerd TAP clients) does not
need to receive live mutations from the open checkpoint because
it might receive more than one mutation for the same key from
the open checkpoint.

This change supports an additional option for the registered TAP
client so that it can specify whether it wants to receive mutations
from the open checkpoint or not.

Change-Id: Id7f0b642807bb7f69cb44775437d1b258bcc4a73


COMMENTS

author: Abby Duran
date: 2011-04-04 06:14:31.053000000

Uploaded patch set 2.

-------------------------------------
author: Abby Duran
date: 2011-04-04 06:20:17.035000000

Patch Set 2: Verified

I don't know why Jasmin Rangel sometimes shows more chagnes than I actually did.

The following are the actual changes that I made in "checkpoint.cc"

diff --git a/checkpoint.cc b/checkpoint.cc
index 8606a45..5086c52 100644
--- a/checkpoint.cc
+++ b/checkpoint.cc
@@ -296,7 xxx@xxx.xxx protocol_binary_response_status CheckpointManager::endHotReload(uint64_t total)
     return PROTOCOL_BINARY_RESPONSE_SUCCESS;
 }
 
-bool CheckpointManager::registerTAPCursor(const std::string &name, uint64_t checkpointId) {
+bool CheckpointManager::registerTAPCursor(const std::string &name, uint64_t checkpointId,
+                                          bool closedCheckpointOnly) {
     LockHolder lh(queueLock);
     assert(checkpointList.size() > 0);
 
@@ -312,7 xxx@xxx.xxx bool CheckpointManager::registerTAPCursor(const std::string &name, uint64_t chec
         // If the checkpoint to start with is not found, set the TAP cursor to the beginning
         // of the checkpoint list. This case requires the full materialization through backfill.
         it = checkpointList.begin();
-        CheckpointCursor cursor(it, (*it)->begin());
+        CheckpointCursor cursor(it, (*it)->begin(), 0, closedCheckpointOnly);
         tapCursors[name] = cursor;
         (*it)->incrReferenceCounter();
     } else {
@@ -329,7 xxx@xxx.xxx bool CheckpointManager::registerTAPCursor(const std::string &name, uint64_t chec
             (*(map_it->second.currentCheckpoint))->decrReferenceCounter();
         }
 
-        CheckpointCursor cursor(it, (*it)->begin(), offset);
+        CheckpointCursor cursor(it, (*it)->begin(), offset, closedCheckpointOnly);
         tapCursors[name] = cursor;
         // Increase the reference counter of the checkpoint that is newly referenced
         // by the tap cursor.
@@ -587,6 xxx@xxx.xxx queued_item CheckpointManager::nextItemFromClosedCheckpoint(CheckpointCursor &cu
 }
 
 queued_item CheckpointManager::nextItemFromOpenedCheckpoint(CheckpointCursor &cursor) {
+    if (cursor.closedCheckpointOnly) {
+        queued_item qi(new QueuedItem("", vbucketId, queue_op_empty));
+        return qi;
+    }
+
     ++(cursor.currentPos);

-------------------------------------
author: Asher Vang
date: 2011-04-04 06:50:22.281000000

Patch Set 2: Looks good to me, approved



-------------------------------------
