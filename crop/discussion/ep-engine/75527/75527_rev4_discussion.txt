DESCRIPTION

Rollback correctly when requested to mid of an unpersisted snapshot

When the rollback request intends to have a rollback to a point in
an unpersisted snapshot, we must remove all unpersisted checkpoint
items from both checkpoint and hash table till the last persisted
disk snapshot.

Prior to this commit, we removed the items from the checkpoint
correctly, but only removed hash table items till the requested
rollback point, not all the unpersisted items, when
requested_rollback_seqno > persisted_seqno.

Note: We currently always rollback to a point which is persisted on
disk. Hence we must drop all checkpoint items from checkpoint and
hash table, irrespective of whether they are part of a full snapshot
or partial snapshot.

Change-Id: I1c14d0df6ae5e5459e60ecb0fc4a72ecd14231d3


COMMENTS

author: Adrianna Holmes
date: 2017-03-23 01:21:42.380000000

Uploaded patch set 4: Patch Set 3 was rebased.

-------------------------------------
author: Hugo Blankenship
date: 2017-03-23 01:43:24.034000000

Patch Set 4:

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/3866/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/5069/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/4605/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/5285/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2017-03-23 12:05:28.852000000

Patch Set 4: Code-Review-1

(1 comment)

Still need some clarification on the scope of of this.

File Comment: /COMMIT_MSG -> This sounds like a bug - what exactly is the consequence of the previous behaviour - would we leave incorrect data in the HashTable (and consequently potentially return incorrect data to clients)?

i.e. is this a data corruption issue, and does it affect any released versions?

If so, we need to raise an MB and consider if this needs backporting.

If not, please make it clearer in the description that this isn't a data loss issue.

-------------------------------------
author: Adrianna Holmes
date: 2017-03-23 15:27:53.377000000

Patch Set 4:

(1 comment)

File Comment: /COMMIT_MSG -> This is a bug Dave. Not data loss, but HashTable showing items that must not be there.
Created MB-23503

-------------------------------------
author: Adrianna Holmes
date: 2017-03-24 07:18:20.314000000

Patch Set 4: Code-Review-2

Committed on Watson and branch merge up for review

-------------------------------------
author: Adrianna Holmes
date: 2017-03-24 18:28:37.338000000

Abandoned

Merged from watson branch

-------------------------------------
