DESCRIPTION

MB-20751: Fix lock cycle (deadlock) during bucket delete & client disconnect

MB-20716 recently fixed an issue where idle DCP connections (in
EWOULDBLOCK state) would not be notified (woken up) in the frontend
when a bucket was deleted. The fix for this was to trigger a notify
(via producer->notifyPaused()) as part of ep-engine bucket delete.

Unfortunately this introduced a lock-order-inversion (deadlock)
between two mutxes, which caused memcached to hang during shutdown,
as one (or more) worker threads would never terminate.

The issue is between:

1. Frontend_worker thread mutex (threadLock)
2. ConnMap::connsLock

And at least two threads (although normally 3 in the wild):

T1: Frontend worker thread
T2: DestroyBucket thread
(optional T3: A NONIO thread running ConnManager)

During bucket delete, the follow sequence occurs which creates a cycle
between threadLock and connsLock:

T1<Worker>:
    event_handler() ... conn_pending_close()
      -> LOCK(threadLock)
    DcpConnMap::disconnect()
      -> ACQUIRE(connsLock)

T2<DeleteBucket>:
    EventuallyPersistentEngine::handleDeleteBucket() ...
    DcpConnMap::shutdownAllConnections()
      -> LOCK(connsLock)
    notifyIOComplete() ... DcpProducer::notifyPaused()
      -> ACQUIRE(threadLock)

Part of the issue here is that DcpProducer::notifyPaused() *must* be
called with schedule==false, as there is no longer a ConnNotifier task
running on another thread (which never acquires the connsLock and
hence avoids any deadlock), as the ConnNotifier has been shutdown in
DcpConnMap::shutdownAllConnections previously. Therefore we need to
use the variant of notifyPaused which calls notify_IO_complete in the
same thread.

The solution chosen is to essentially drop the connsLock in
shutdownAllConnections before calling notify. We achive this by taking
a _copy_ of the connections map (under connsLock), and then iterating
over this copy and calling notify etc. This is safe as the elements of
the map are all ref-counted pointers.

Change-Id: I73f9b7576e42030a9f5219ae51e604e36fabcac7


COMMENTS

author: Ashlee Kent
date: 2016-09-01 15:39:38.500000000

Uploaded patch set 3.

-------------------------------------
author: Hugo Blankenship
date: 2016-09-01 15:39:44.201000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/934/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-01 15:39:44.349000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1042/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-01 15:39:48.160000000

Patch Set 3:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/773/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-01 15:39:48.525000000

Patch Set 3: Well-Formed+1

Permission granted to commit: 

http://server.jenkins.Piper Jefferson.com/job/restricted-branch-check/22438/artifact/restricted.html : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2016-09-01 15:49:04.756000000

Patch Set 3: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/934/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1042/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/773/ : SUCCESS

-------------------------------------
author: Asher Vang
date: 2016-09-01 20:20:12.607000000

Patch Set 3: Code-Review+2

-------------------------------------
author: Keira Washington
date: 2016-09-01 20:31:40.945000000

Patch Set 3:

(2 comments)

Line:1137, src/connmap.cc -> I think the map can be const

Line:1153, src/connmap.cc -> Ditto

-------------------------------------
author: Tate Garrett
date: 2016-09-01 21:09:29.333000000

Change has been successfully cherry-picked as 32c286fe0b9cf87fe540611a865ce320b29b8cb4 by Ashlee Kent

-------------------------------------
author: Ashlee Kent
date: 2016-09-01 21:21:32.290000000

Patch Set 3:

(1 comment)

Line:1137, src/connmap.cc -> It might be able to be const (from a language-lawyer pov), given the layers of containers / smart pointers we have.

However, logically (to me at least) we are modifying the elements in the map (although not adding or removing elements) as we're calling non-const methods on them, and I think that conveys the intent better here. 

(Ideally we'd probably have the map be templated on a `const RCPtr<T>` as we don't (IIRC) ever change what each element holds, but we're not really there yet for maximum const-correctness in this class...

-------------------------------------
