DESCRIPTION

Attempt at lockless mc-kvstore for performance

Change-Id: I1b76afe9c331f649b4a95c1b07b6260cb71e4d9b


COMMENTS

author: Broderick Chavez
date: 2011-10-27 23:54:14.791000000

Uploaded patch set 4.

-------------------------------------
author: Abby Duran
date: 2011-10-28 03:45:17.141000000

Patch Set 4: Looks good to me, but someone else must approve

This showed better behaviors in my 4-core linux machine. Trond, as you're an expert in this area, you may want to review and test it on your solaris machine.

-------------------------------------
author: Noah Dean
date: 2011-10-28 07:10:27.492000000

Patch Set 4:

I was looking for Trond to review this because it's the item he said he was working on.

-------------------------------------
author: Asher Vang
date: 2011-10-28 15:00:47.707000000

Patch Set 4:

I'll try it in a bit.. I didn't get around to do anything yesterday. BTW. I've got an alternative kvstore for you to try as well that in addition to no locks also only use one thread...

-------------------------------------
author: Noah Dean
date: 2011-10-28 16:23:32.141000000

Patch Set 4: I would prefer that you didn't submit this

The code looks basically right to me, but I'd really like a better and more detailed commit message.  This one sort of looks like a cross between magic and throwaway work, and is at the same time redundant.

Ideally, we've got the first 70 byte line summarizing the work (e.g. "Use notify pipe to deliver mc-kvstore messages" or whatever makes sense).

These things are important when we summarize changes and go back and try to find issues.

For a good read on the subject:

http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html

-------------------------------------
author: Asher Vang
date: 2011-10-29 02:18:52.841000000

Patch Set 4:

I see ~7-8k less operations/s with this approach in the frontend compared to the what I'm seeing with sqlite (using two workerthreads in molly and really small objects).. 

With sqlite it seems that more time is spent in each individual "set" operation, causing less impact on the frontent threads..

I get a better approach would use the single threaded mode where we can also work around allocating the buffers to send (and ship everything with a single kernel-trap and sendmsg).

I've got a bad feeling that part of of the slowdown I'm seeing is caused by contention on memory allocation mutexes. Since we're allocating and freeing the storedvalue objects from multiple threads the internal allocation routines need to "steal" from the other pools etc.. It could be that we might want to check if we should get rid of the item structure and instead move the storedvalue object around (and do COW)... 

I need to try this on a linux box and see if I can get a profile of some sort..

-------------------------------------
author: Broderick Chavez
date: 2012-01-12 06:34:38.665000000

Patch Set 4: Abandoned

obsolete

-------------------------------------
