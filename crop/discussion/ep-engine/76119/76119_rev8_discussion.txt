DESCRIPTION

Implement delete-with-value with store() instead of delete()

During investigation of issues with 'fully' deleting documents
(i.e. discarding their bodies) which are in state Delete-with-value, I
found that there's two bugs which interact to allow some transitions
between Deleted states, but not others...

Prior to Spock, the valid state transitions for StoredValues (relating
to deletion) were:

              /---\
              |   |
              |   V
              Alive -----------------\
                ^                    |
                |                    V
                \---------------- Deleted
                                 (no value)

With the advent of Deleted Bodies for system XATTRs, Deleted SVs can
optionally have a value (Blob) associated with them, which can be
changed (or removed) without going back to Alive:

              /---\
              |   |
              |   V
              Alive -----------------\
                ^                    |
                |                    V
                \---------------- Deleted <------------\
                           (with-value or no-value)    |
                                     |                 |
                                     \-----------------/

While the above transitions should be supported, StoredValue was not
fully updated to allow transitioning between the two Deleted variants.
Specifically, if an item had the `deleted` flag set, then calling
StoreValue::del() while in the Deleted-with-Value state became a no-op
- the value was not removed:

    void del(HashTable &ht) {
        if (isDeleted()) {
            return;
        }
        ...
        resetValue();  // <-- Value removed here

This means the Deleted-with-value -> Deleted-no-value transition is
broken.

If we want to fix this, and handle 'deleting-a-deleted-value' in
HashTable, then we need to allow the HashTable to re-delete an item
(essentially remove the early exit in StoredValue:del(). However in
doing so, it breaks *setting* the deleted value, due to a second bug
in VBucket::processSoftDelete():

VBucket::processSoftDelete() (which is the function which handles both
Delete-with-value and Delete-no-value) assumes the deletion should
have no value (it calls softDeleteStoredValue() with
onlyMarkDeleted==false), and hence the item should have its body
discarded. However due to the aforementioned 'bug' (early-exit) in
StoredValue::del(), the body was kept (and Delete-with-Value ->
Delete-with-Value transition currently works).

To resolve this, we need to essentially fix both of these issues at
once.

1. Allow the HashTable/StoredValue to correctly transition between the
   Deleted variants.

2. Update VBucket to be able to drive this.

Change-Id: I3b9223da101b38e3e25aef237d0e52ee55bae623


COMMENTS

author: Ashlee Kent
date: 2017-04-04 09:48:12.903000000

Uploaded patch set 8: Patch Set 7 was rebased.

-------------------------------------
author: Hugo Blankenship
date: 2017-04-04 10:39:22.103000000

Patch Set 8: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/5427/ : FAILURE

Failure of a CTest test  ( http://cv.jenkins.Piper Jefferson.com//job/ep-engine-threadsanitizer-master/5427/ )

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/4214/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/4937/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/5641/ : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2017-04-04 11:58:18.910000000

Patch Set 8: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/4214/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/4937/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/5641/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/5434/ : SUCCESS

-------------------------------------
