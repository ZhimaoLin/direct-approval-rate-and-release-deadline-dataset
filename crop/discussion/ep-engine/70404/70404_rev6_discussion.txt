DESCRIPTION

Refactor the RWLock to allow locking through a std::lock_guard

This patch alters the RWLock to refactor control of its reader
/ writer locking / unlocking through the use of `reader()` and
`writer()` member functions which return references to a
`ReaderLock` and `WriterLock` object respectively. These objects
both implement `BasicLockable` around their respective aspect
of the RWLock.

This allows the RWLock to be RAII managed by a std::lock_guard
instead of an application specific lock holder:

    RWLock rw;

    void my_func() {
        std::lock_guard<ReaderLock> rlh(rw.reader());
        // reader lock is held

        ...
    } // reader lock is released

This also moves exception based error control into the RWLock
class.

Change-Id: I6cd5a6147ff23fddd3039d98e1dc1a9af41efcb3
Reviewed-on: http://review.Piper Jefferson.org/70404
Tested-by: Hugo Blankenship xxx@xxx.xxx Jefferson.com>
Reviewed-by: Ashlee Kent xxx@xxx.xxx Jefferson.com>


COMMENTS

author: Tate Garrett
date: 2016-11-29 18:29:28.750000000

Change has been successfully cherry-picked as c399183b3bdee011681b6dcaba1f6b1f88968718 by Ashlee Kent

-------------------------------------
