DESCRIPTION

Add new iomanager

Change-Id: Iccaa2c027cdb9abdd6c580973f94ee6d254ef035


COMMENTS

author: Kenny Maynard
date: 2013-04-10 02:05:08.002000000

Patch Set 1:

This is the first posting of the unified dispatcher code. Please review when you have some time and let me know if there are any concerns or major changes that need to be made so I can begin making them as soon as possible. This change passes all unit tests except 2 of them which I have disabled for now. I will continue to work on improvements over the next few days.

-------------------------------------
author: Abby Duran
date: 2013-04-11 07:13:12.933000000

Patch Set 1: I would prefer that you didn't submit this

(18 inline comments)

Mike,

I put several major and minor comments in different places.

The major concerns that I have now:

1) io-manager doesn't seem to support scheduling multiple flushers / bg_fetchers, each of which has a distinct vbucket list. I'm wondering if Jin will adapt the io-manager to support this.

2) As mentioned in my comments, please rename "dispatcher" directory to "io-manager" and move some generic classes (e.g., GlobalTask, Executor, ExecutorPool, etc) to the parent directory "src".

3) Please use a singleton pattern for an io-manager instance instead of declaring it as a global variable in common.h

Line:16, src/dispatcher/scheduler.h -> Please move this file to the parent directory src/. This defines and implements generic schedulers that can be extended and used by the ep-engine modules.

Line:130, src/dispatcher/scheduler.h -> Please give a short comment to each member field.

Line:24, src/dispatcher/iomanager.h -> We should make sure that it is a singleton class.

Line:38, src/dispatcher/tasks.h -> Let's place this class in "task.h" and move it to the parent directory src/

Line:111, src/dispatcher/tasks.h -> Let's place all the io tasks in "tasks.h" and move it to src/io-manager directory. In other words, we can rename "dispatcher" directory to "io-manager".

Line:51, src/dispatcher/scheduler.cc -> Why the dead task should be move to the ready queue?

Line:141, src/dispatcher/scheduler.cc -> I think we should explicitly cancel the task regardless of a daemon or not. A daemon task should return true from its run() method if it wants to be scheduled again.

Line:163, src/dispatcher/scheduler.cc -> We still need to provide the list of jobs completed, and also the list of slow jobs.

Line:175, src/dispatcher/scheduler.cc -> Shouldn't it be pushed to the incoming futureQueue?

Line:196, src/dispatcher/scheduler.cc -> Please check the underflow

Line:231, src/dispatcher/scheduler.cc -> please log it as a warning.

Line:247, src/dispatcher/scheduler.cc -> Please change all standard outputs to logs

Line:262, src/dispatcher/scheduler.cc -> We should release a lock before sleep. Otherwise, another thread won't be able to decrement the counter. Can we use the sync object instead of mutex and wait here instead of infinite loop?

Line:176, src/flusher.cc -> We don't need to cancel the task here as long as we cancel it in the scheduler because it returns "false" below.

Line:1283, tests/ep_testsuite.cc -> Please remove it.

Line:100, src/common.hh -> Let's declare iomgr as a static variable in IOManager class and use a singleton pattern.

Line:26, src/dispatcher/iomanager.cc -> Why should we always schedule it to the same thread 0?

Line:68, src/dispatcher/iomanager.cc -> The same question above.

-------------------------------------
