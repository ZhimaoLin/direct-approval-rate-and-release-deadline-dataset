DESCRIPTION

MB-20822: When loading persisted failovers, remove any erroneous entries

Due to bugs in older releases (and also possibly in future releases),
we may end up storing wrong failover table on disk. Hence during
warmup while loading failover table from disk we must prune out any
wrong entries.

Change-Id: I630cb7fb1ea9a711432be64f36924d04fcd5e361


COMMENTS

author: Adrianna Holmes
date: 2016-09-19 18:21:58.836000000

Uploaded patch set 2: Patch Set 1 was rebased.

-------------------------------------
author: Hugo Blankenship
date: 2016-09-19 18:22:06.770000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1144/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-19 18:22:06.911000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/857/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-19 18:22:08.192000000

Patch Set 2:

Branch restricted. PLEASE READ this URL: 

http://server.jenkins.Piper Jefferson.com/job/restricted-branch-check/23839/artifact/restricted.html : FAILURE

-------------------------------------
author: Hugo Blankenship
date: 2016-09-19 18:29:30.330000000

Patch Set 2:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/1025/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-19 18:43:58.909000000

Patch Set 2: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1144/ : ABORTED

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/857/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/1025/ : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2016-09-19 19:52:23.151000000

Patch Set 2: -Verified

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1147/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-19 20:23:45.393000000

Patch Set 2: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1147/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/857/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/1025/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-09-20 11:17:18.807000000

Patch Set 2:

(2 comments)

Line:182, src/failover-table.h -> Style: If you pass in a reference to the Mutex lock guard (you don't have to do anything with it) you (soft) enforce the lock is held.

Line:368, src/failover-table.cc -> Can you not use a range-based for here?

-------------------------------------
author: Ashlee Kent
date: 2016-09-20 11:18:45.092000000

Patch Set 2:

> > When do we get a vb_uuid ==0, is it because its a randomly
 > > generated value and therefore it's possible to get zero?
 > >
 > > My other question, is assuming that we wipe out the entries that
 > > are zero, why is this safe (under the rare condition that the
 > > vb_uuid == 0 was actually a valid entry)?
 > >
 > > (apologies if these are silly questions - I'm new to the failover
 > > table stuff)
 > 
 > Dan, we had a bug where a particular warmup path lead to us
 > initialising the failover table with a vb_uuid of 0. This would
 > happen against every vb, leading to some broken failover scenarios.
 > 
 > But because the uuid is a random number, 0 is valid.
 > 
 > So my point is that if you encounter 0, just assume it's because of
 > the bug. Wiping out all entries just means that no client can do a
 > delta DCP style connection, everyone will be forced to backfill
 > from seqno 0.

I agree - and in fact I'd be tempted to change the UUID generation to never return zero (just check for zero and regenerate if you get one). This reduces the space of the UUIDs by some tiny fraction (1 in 2^64), but ensures that it's always correct to delete UUIDs of zero - or at least it will from this point forward.

-------------------------------------
author: Adrianna Holmes
date: 2016-09-20 18:28:56.281000000

Patch Set 2:

(2 comments)

Line:182, src/failover-table.h -> But do we want to hold lock in ctor ?

Line:368, src/failover-table.cc -> 1) Do you mean use for (auto entry : table) { .. } ?
    I just get ref to an entry directly. How do I get itr for table.erase() ?

2) Do you mean use remove_if() ?
     Didn't find a way to use remove_if() wherein you have to compare a list elem with the previous one

-------------------------------------
author: Adrianna Holmes
date: 2016-09-20 18:32:41.233000000

Patch Set 2:

>>I agree - and in fact I'd be tempted to change the UUID generation to never    return zero (just check for zero and regenerate if you get one). This reduces the space of the UUIDs by some tiny fraction (1 in 2^64), but ensures that it's always correct to delete UUIDs of zero - or at least it will from this point forward.

I agree, will write code to regenerate the vb_uuid if a valid vb_uuid == 0 is created during a failover entry insertion.

-------------------------------------
author: Ashlee Kent
date: 2016-09-21 07:37:08.222000000

Patch Set 2:

(1 comment)

Line:368, src/failover-table.cc -> There's probably a variation of std::mismatch() you could use, but yes I agree it's probably clearer to keep the for loop you have.

-------------------------------------
author: Ashlee Kent
date: 2016-09-29 21:02:24.250000000

Patch Set 3: Patch Set 2 was rebased

-------------------------------------
author: Tate Garrett
date: 2016-10-11 07:51:36.719000000

Change has been successfully cherry-picked as 3fb0f02cbed9a7ea90af8b59efcf0983794efd2a by Ashlee Kent

-------------------------------------
