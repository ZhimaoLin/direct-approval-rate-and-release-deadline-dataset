DESCRIPTION

MB-22041 [5/N]: Test that workers can be increased

Confirm that the number of workers can be increased beyond the initial
value.

Change-Id: I495db490f4b772e52a993e2c1aa66a7a4fcc64e6


COMMENTS

author: Jace Townsend
date: 2017-02-17 12:13:47.425000000

Uploaded patch set 16.

-------------------------------------
author: Hugo Blankenship
date: 2017-02-17 12:32:59.810000000

Patch Set 16: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/2595/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/3366/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/3765/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/3980/ : SUCCESS

-------------------------------------
author: Jim WNathalie Landryer
date: 2017-02-17 14:17:09.184000000

Patch Set 16: Code-Review-1

(1 comment)

Line:139, tests/module_tests/executorpool_test.cc -> how long is this test taking? Hopefully not waiting nearer to the 10s bound?

-------------------------------------
author: Kymani Ramirez
date: 2017-02-17 14:23:44.307000000

Patch Set 16: Code-Review-1

(4 comments)

Line:117, tests/module_tests/executorpool_test.cc -> Add a comment at prior to the test describing what it does / what its testing

Line:118, tests/module_tests/executorpool_test.cc -> can numWriters be 1?

Line:119, tests/module_tests/executorpool_test.cc -> why 8? - can this be 1 also?

Line:139, tests/module_tests/executorpool_test.cc -> I believe this maps to std::condition_variable wait_for.
http://en.cppreference.com/w/cpp/thread/condition_variable/wait_for

Don't you need to handle the case of spurious wake-ups?

-------------------------------------
author: Jace Townsend
date: 2017-02-22 10:17:37.356000000

Patch Set 16:

(5 comments)

Line:117, tests/module_tests/executorpool_test.cc -> Done

Line:118, tests/module_tests/executorpool_test.cc -> Done

Line:119, tests/module_tests/executorpool_test.cc -> It was 8 because there are two of each task type. It could be 1 - that would require a separate setMax{Readers,NonIO,AuxIO}(0) because at construction time, providing zero indicates to use the default calculated value; setting each to 1 would give a minimum of 4.

I've changed it to 4 and restructured to make it less of a magic number - can go down to 1 if preferred.

Line:139, tests/module_tests/executorpool_test.cc -> it does indeed use wait_for - specifically variety 2 on cppreference, it passes a predicate, mitigating spurious wake-ups :) I can restructure it/comment it if that would be better?

Line:139, tests/module_tests/executorpool_test.cc -> 1ms - no the 10s was picked as a longer "timeout" in response to a previous review - the last task entering the ThreadGate will notify_all, and this call here won't wait if the ThreadGate isComplete.

-------------------------------------
