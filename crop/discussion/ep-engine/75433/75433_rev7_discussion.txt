DESCRIPTION

MB-16181: Refactor buffered backfill accounting.

The general aim of this commit is to be more abstract in how we
account the resources used during in backfill.

Currently the assumption is that MutationResponses will be the only
object to account for, thus on the read increment we use Item::size
and on the send decrement we access the Item::size by casting to a
MutationResponse.

With Collections, SystemEvents will be part of the backfill and should
be accounted for, but a SystemEvent in the ActiveStream's readyQueue
means we need a cleaner way of asking a DcpResponse for its size, as
opposed to more if (event == ...) {static_cast...}

1. Add a method to the abstract DcpResponse class which by default
   returns 0, so for example a SnapShotMarker can be unconditionally
   applied to the backfill accounting without changing it.

2. Implement in MutationResponse and (upstream) SystemEvent the method
   so it returns a value that better represents the resources that
   DcpResponse is holding, that is the size of the Item + any extra
   resources.

Change-Id: I7c57572e2f09ed80d84a7505b36734def5c75580


COMMENTS

author: Jim WNathalie Landryer
date: 2017-03-22 11:38:23.254000000

Uploaded patch set 7.

-------------------------------------
author: Hugo Blankenship
date: 2017-03-22 12:03:22.182000000

Patch Set 7: Verified+1

Build Successful 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-addresssanitizer-master/3831/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-master/5025/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-master/4571/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-master/5247/ : SUCCESS

-------------------------------------
