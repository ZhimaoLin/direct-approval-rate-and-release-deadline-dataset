DESCRIPTION

MB-20852: Serialize VB state changes

Background/Problem:

MB-20852 exposed an issue with how VBucket state was persisted to disk
- specifically that state can be persisted to disk out of order, and
intermediate state changes could be dropped (not persisted at all).

These problems are caused by the asynchronous tasks which are
responsible for persisting state to disk -
VBStatePersistTask{Low,High}. There are essentially two interrelated
issues:

1. We allow multiple VBStatePersistTasks to exist concurrently.
2. We do not maintain a queue of states to persist, instead we just
   mark that a given vbid's state is pending.

(1) can occur when a VBPersistTask has started to run on a BG writer
    thread (and has cleared the schedule_vbstate_persist flag), but
    then another scheduleVBStatePersist() call is made. As the
    schedule_vbstate_persist flag is clear, this second task is
    allowed to be created. There is then no guarantee which task will
    complete first (they could be scheduled to different OS writer
    threads, the first thread could be descheduled and the second one
    then runs and completes first).

    We could attempt to solve this by changing when
    schedule_vbstate_persist is cleared (say move it later in the
    persistVBState() function), but then the inverse problem is
    exposed - we may fail to schedule a second (different) state to be
    persisted if the current task is just finishing up (and will exit
    without persisting the now-outstanding work).

(2) Presents a subtle problem relating to when the state of a VBucket
    is materialized. As we only record the vbid to persist (and not
    the state), by the time the VBucketPersistTask runs the actual
    state we /wanted/ to write may have moved forward. Even worse, the
    state could have "gone backwards" (as shown in the MB) if the
    state of the VBucket is read before the vbucket is deleted,
    meaning the task has a 'stale' view of the VBucket object (due to
    us using ref-counted pointers for VBucket objects).

    Additionally, not persisting all intermediate states makes
    debugging harder. We don't actually change VBucket state /that/
    often, and so having all the intermediate states a VBucket went
    through on disk is extremely valuable in debugging.

Solution:

Instead of creating new VBPersistTasks dynamically, and trying to
manage when they are created / when they run / what state they
persist, we instead move to one long-lived Task per shard. This task
is woken when there's outstanding state to persist, otherwise it
remains snoozed, but still in existence. This solves the issues
presented by having multiple Tasks in existence - we no longer have to
worry if the Task already exists or not.

We also add a per-Vbucket FIFO queue of states which need to be
persisted - i.e. the vbucket_state object is recorded by the producer
when the state is enqueued, as opposd to being materialized when the
Task runs (as used to be the case).  This ensures that intermediate
states cannot be lost or reordered (for example if the VBStatePersist
task was in the middle of running).  In other words we turn the
problem into a multi-producer, single consumer problem, with a work
queue as the communication mechanism.

One (hopefully minor) downside of this is that there is no longer two
priorities for VBPersistState tasks. This is ultimately due to the
fact that we must only have a single task consuming from each queue to
guarantee ordering.

Change-Id: I11445623fef3718c0080b8ed9c20adad796822c2


COMMENTS

author: Ashlee Kent
date: 2016-09-22 13:47:21.787000000

Uploaded patch set 6: Patch Set 5 was rebased.

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 13:47:27.674000000

Patch Set 6:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1184/ (1/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 13:54:37.491000000

Patch Set 6:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/887/ (2/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 14:18:03.530000000

Patch Set 6:

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/1047/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 14:25:40.711000000

Patch Set 6: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1184/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/1047/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/887/ : SUCCESS

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 14:29:43.312000000

Patch Set 6: -Verified

Build Started http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1189/ (3/3)

-------------------------------------
author: Hugo Blankenship
date: 2016-09-22 14:49:37.144000000

Patch Set 6: Verified-1

Build Failed 

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-watson/1189/ : FAILURE

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-threadsanitizer-watson/1047/ : SUCCESS

http://cv.jenkins.Piper Jefferson.com/job/ep-engine-clang_analyzer-watson/887/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2016-09-29 21:06:27.937000000

Patch Set 6: Code-Review-2

Reworking these patches, -2 for now.

-------------------------------------
author: Ashlee Kent
date: 2016-10-20 20:02:30.933000000

Abandoned

-------------------------------------
