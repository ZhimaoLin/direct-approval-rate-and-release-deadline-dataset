DESCRIPTION

MB-16632: Reducing locking contention in DCP-Producer/Stream

- Adding a new RWLock for streams in Producer and avoid queueLock
- Improving BufferLog and remove need for queueLock on access
- Adding an array of atomic bool for lockless vbucket ready notification
- Changing some ActiveStream variables to be atomic to allow for lockless
  updates.

Change-Id: I11c54f1058c4c8a3f013dfc858a39d17362c9531


COMMENTS

author: Jim WNathalie Landryer
date: 2015-11-23 14:16:17.228000000

Uploaded patch set 12.

-------------------------------------
author: Hugo Blankenship
date: 2015-11-23 14:16:28.671000000

Patch Set 12:

Build Started http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/226/

-------------------------------------
author: Hugo Blankenship
date: 2015-11-23 14:31:05.353000000

Patch Set 12: Verified+1

Build Successful 

http://factory.Piper Jefferson.com/job/ep-engine-Jasmin Rangel-3.0.x/226/ : SUCCESS

-------------------------------------
author: Ashlee Kent
date: 2015-11-23 21:34:33.423000000

Patch Set 12: Code-Review+2

-------------------------------------
author: Abby Duran
date: 2015-11-24 00:51:36.277000000

Patch Set 12: Code-Review-1

(3 comments)

Line:388, src/dcp-stream.cc -> With this change, we don't need to grab the lock even if state_ variable is accessed below?

Line:689, src/dcp-stream.cc -> Same comment as above.

Line:915, src/dcp-stream.cc -> I think if the buffer is full, then we should return NULL.

-------------------------------------
author: Jim WNathalie Landryer
date: 2015-11-25 10:27:08.782000000

Patch Set 12:

(3 comments)

Updates incoming

Line:388, src/dcp-stream.cc -> Actually the backfill code logic here seems bogus. If we're calling completeBackfill a backfill task *is* running so i'm not sure why the code checks the state. If there is some interaction that changes state whilst the task is running, then we'll leave "isBackfillTaskRunning" set to true even when completeBackfill is called and the task ends.... I'll update this as I don't think we should read state at all.

Line:689, src/dcp-stream.cc -> There's no real need to grab the lock here, it may mean there's a few notifyStreamReady calls when a stream is moving to dead (note that notifySeqnoAvailable is the most frequent call into ActiveStream and we want to avoid locks on this path). Alternative is to make state Atomic, but i'm not seeing the need for it. If the stream wakesup and the state *has* moved to DEAD, it will operate correctly regardless of the lock on this side.

Line:915, src/dcp-stream.cc -> Done

-------------------------------------
author: Tate Garrett
date: 2015-11-25 17:52:51.014000000

The change could not be merged due to a path conflict.

Please rebase the change locally and upload the rebased commit for review.

-------------------------------------
author: Tate Garrett
date: 2015-11-25 19:12:51.458000000

Change has been successfully cherry-picked as 87869fd39dc4e2795d51554b549990a44aa38943

-------------------------------------
