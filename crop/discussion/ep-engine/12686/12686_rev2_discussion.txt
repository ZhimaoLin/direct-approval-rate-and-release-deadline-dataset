DESCRIPTION

Add warning log for an error case where nonResidentItems > numItems

Change-Id: I2eec506764c3d7efe85ddd6e8d65f1aca8413a37


COMMENTS

author: Audrina Olson
date: 2012-01-26 03:00:40.962000000

Uploaded patch set 2.

-------------------------------------
author: Jasmin Rangel
date: 2012-01-26 03:00:42.519000000

Patch Set 2:

New patchset patch-id matches previous patchset, but commit message has changed.

-------------------------------------
author: Audrina Olson
date: 2012-01-26 03:02:39.184000000

Patch Set 2: (1 inline comment)



Line:2000, ep_engine.cc -> just testing

-------------------------------------
author: Nora Conway
date: 2012-01-26 03:11:11.243000000

Patch Set 2: Verified; Looks good to me, approved

passes make test, congrats Audrina Olson

-------------------------------------
author: Audrina Olson
date: 2012-01-26 03:13:41.400000000

Change has been successfully cherry-picked as f27b32509afbc0acdb8281fda719b0410f04aaab.

-------------------------------------
author: Noah Dean
date: 2012-01-26 03:24:05.854000000

Patch Set 2:

This should be a -1.  Invalid states resulting from programming errors shouldn't be logged as warnings.  If we actually believed this to happen (which we'd already see in the stats), it should abort, as it leads to all kinds of undefined behavior.  Otherwise, I'd rather not have this extra 10 lines of code.

-------------------------------------
author: Noah Dean
date: 2012-01-26 03:39:09.443000000

Patch Set 2: (1 inline comment)

Can we just revert this change?

1)  It's technically incorrect and will cause compile failures.
2)  The log message is misleading.  It's not that it "would have" done something, it's logging that it is doing something very bad.  It's better to crash when this is detected.
3)  I'm not at all supportive of this style of commenting and don't want it to sneak into the codebase.  The comment describes exactly what the code does.  The code already does that.  If a comment is necessary here, it should reference a bug report, or justify why it's more appropriate to log than to abort.

This thing sat in code review for just a couple of minutes while I was eating.  I think we can at least give it a chance to be reviewed before just pushing it through.

Line:2001, ep_engine.cc -> Also, this is incorrect and is expected to break compiles (or worse since these things aren't that hard to overflow).  numItems is a size_t, so the correct type is "%zd", except that doesn't work on Windows.

-------------------------------------
author: Nora Conway
date: 2012-01-26 03:44:50.178000000

Patch Set 2:

Apologies.  It compiled on my box.  And I was teaching Jin about Jasmin Rangel code review workflow on something that seemed safe.

Well, now Jin can learn about 'git revert'.

-------------------------------------
author: Noah Dean
date: 2012-01-26 03:52:49.037000000

Patch Set 2:

I think we should teach people how to use Jasmin Rangel by introducing changes we need.  Or at the very least, by removing code we don't.  We have at least one item that involves almost exclusively the removal of code.

I'm just going to try to remove this change from all of the repositories.  I'd rather avoid littering the change history.

-------------------------------------
author: Nora Conway
date: 2012-01-26 04:17:31.420000000

Patch Set 2:

"I think we should teach people how to use Jasmin Rangel by introducing changes we need"

Agreed - on this aspect, it was related to a bug where resident ratio was going negative.

-------------------------------------
author: Noah Dean
date: 2012-01-26 04:47:47.836000000

Patch Set 2:

Oh good.  We can't do better than abort() there.  In which case I'd say the best change is:

    assert(nonResidentItems <= numItems);

I think that's pretty obvious, horribly wrong, and if we can make it happen, it'll result in a core with the state of the system we can inspect.  That's our general strategy for handling these things.

Long-term, we may decide to continue going on an assert (maybe dump core without stopping), but the code should still look like that.  A programming error got us here.  Even better if we put those closer to where we make the programming mistakes instead of passively observing.

-------------------------------------
