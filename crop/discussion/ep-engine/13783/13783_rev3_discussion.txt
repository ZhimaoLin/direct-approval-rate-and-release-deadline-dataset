DESCRIPTION

mb-4857 avoid accessing uninitialized map data

A map table in InvalidItemDbPager class is not initialized correctly
during warmup phase. The table is supposed to be populated if data
are rebalanced from other nodes. When no data transfered and/or
invalid item added, the map table should not be processed either.

Change-Id: I5abc626d32f288eab9a767c06ebb57d498f214dd


COMMENTS

author: Rubi Walsh
date: 2012-03-06 03:09:29.657000000

Uploaded patch set 3.

-------------------------------------
author: Jasmin Rangel
date: 2012-03-06 03:09:31.375000000

Patch Set 3:

New patchset patch-id matches previous patchset, but commit message has changed.

-------------------------------------
author: Asher Vang
date: 2012-03-06 07:08:15.432000000

Patch Set 3:

Not sure I understand this. Are you saying that the constructor on the map does not properly initialize the map so that it contains bogus entries?

-------------------------------------
author: Rubi Walsh
date: 2012-03-06 16:59:32.541000000

Patch Set 3:

Yes, somehow the map object vb_items status is very unstable. When InvalidItemDbPager::createRangeList() is called, the size of map object is just random number. And exception is launched for statement 
std::sort(vbit->second->begin(), vbit->second->end());
Same goes when accessing vbit->first.

-------------------------------------
author: Asher Vang
date: 2012-03-06 19:07:09.694000000

Patch Set 3:

It makes me a bit scared if the C++ compiler fails to run the constructor on the objects (since that means we've got a minefield out there of potential mines we haven't seen yet...). Did you verify that the constructor for the object should be called at the time? I'm not a huge fan of having an extra variable indicating the state of another value (sooner or later someone who don't know the logic will update one of them and not know about the other)..

-------------------------------------
