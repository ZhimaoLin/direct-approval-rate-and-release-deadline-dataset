DESCRIPTION

MB-20141 memdb/nodetable: Fix bug in remove operation using slowHT

If there are multiple conflicts and slowHT can have multiple
entries. If a delete happens and one of the items from slowHT
is removed, the incorrect removal will result in keeping deleted
entry. Next time when an operation with key with same crc32 hash
conflict occurs, it will wNathalie Landry through the invalid entries of the
slowHT and try to access the freed skiplist nodes which were
removed earlier. This results in the crash.

We use sharding for back-index equal to the number of CPUs. If there
are many cores, data will be uniformly distributed across multiple
back-index shards, hence the chance of having more than one entry
in slowHT is very less. For this case to happen, we need large dataset
and less number of CPU cores.

Change-Id: Ied1da4e5949121272b90b1a15b07784178aeb527


COMMENTS

author: Justice Schneider
date: 2016-07-13 19:27:43.176000000

Uploaded patch set 1.

-------------------------------------
author: Justice Schneider
date: 2016-07-13 19:28:08.292000000

Patch Set 1: Code-Review+2 Verified+1

-------------------------------------
author: Tate Garrett
date: 2016-07-13 19:28:11.245000000

Change has been successfully merged into the git repository by Justice Schneider

-------------------------------------
author: Justice Schneider
date: 2016-07-13 19:28:18.091000000

Patch Set 1: Cherry Picked

This patchset was cherry picked to branch unstable as commit a63a4d45ee4606b7958bf45e3afaf5ff16259b58

-------------------------------------
