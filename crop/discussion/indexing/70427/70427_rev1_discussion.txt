DESCRIPTION

Support for composite filters pushdown and spans

First cut of implementation of composite filters pushdown
and multiple scans (spans) for stable reads.

Changes include:
- Implementation of datastore API
- Addition of new API in GSI client
- protobuf message change for spock scan features
- Scan coordinator changes for enahanced scan request type
  and populating spans as part of scan request
- Scan pipeline handles multiple serial scans
- composite filtering in forestdb and MOI - common code in
  index_reader
- Old API and scan requests continue to work

Todo:
- Rest API changes
- Refactoring of snapshot_reader
- Handling primary index as part of Scans API is pending

Change-Id: Ia932585c10af07f23d5b6e349f5579ba672dffd9


COMMENTS

author: Alden Ashley
date: 2016-11-29 15:36:11.068000000

Uploaded patch set 1.

-------------------------------------
author: Kinsley Fox
date: 2016-11-30 05:53:30.019000000

Patch Set 1:

(7 comments)

Line:1359, secondary/indexer/memdb_slice_impl.go -> I think this function can be avoided. You can implement the same with a custom callback wrapper for Iterate() API (ie., EntryCallback).

Line:66, secondary/protobuf/query/query.proto -> NewSpan seems inappropriate since Span type already exists. Later there could be NewNewSpan. I think you could add Span2 or modify existing Span with additional field for repeated ranges

Line:66, secondary/protobuf/query/query.proto -> Please fix indentation

Line:705, secondary/queryport/n1ql/secondary_index.go -> It should be Scan2 isn't it?

Line:87, secondary/indexer/index_reader.go -> init() is not required to define static values

Line:102, secondary/indexer/index_reader.go -> This is not-optimal, make is part of scanrequest buflist

Line:118, secondary/indexer/index_reader.go -> This code looks unreadable.
Why do you want this fancy table? If you measure perf, I think it may not even account for 1% of the cpu used.


You could restructure it as follows:

includeLow := incl == 1 || incl == 3
if bytes.Compare(ck, rng.Low.Bytes() == 0 && includeLow {

}

-------------------------------------
author: Alden Ashley
date: 2016-11-30 07:30:19.756000000

Patch Set 1:

(3 comments)

Line:66, secondary/protobuf/query/query.proto -> Will do

Line:66, secondary/protobuf/query/query.proto -> Will do

Line:705, secondary/queryport/n1ql/secondary_index.go -> Yes the name of this will be changed by N1QL team. Until then, I am implementing the API name defined by them.

-------------------------------------
author: Tate Garrett
date: 2016-12-02 12:29:59.378000000

Change has been successfully merged into the git repository by Alden Ashley

-------------------------------------
