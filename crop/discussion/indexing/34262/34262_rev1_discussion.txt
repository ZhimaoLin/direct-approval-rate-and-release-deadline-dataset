DESCRIPTION

List of terms and definitions used in secondary index.


COMMENTS

author: Leonel Abbott
date: 2014-03-07 15:34:06.751000000

Uploaded patch set 1.

-------------------------------------
author: Justice Schneider
date: 2014-03-07 16:23:49.174000000

Patch Set 1: Verified+1 Code-Review+1

-------------------------------------
author: Dominique Stanton
date: 2014-03-07 19:10:32.545000000

Patch Set 1:

(8 comments)

Line:51, secondary/docs/design/markdown/terminology.md -> It only maintains meta-data for index (just to be clear)

Line:62, secondary/docs/design/markdown/terminology.md -> For release 1, we can treat Partition and Slice as the same for design perspective.  For implementation, we can still keep these as 2 concepts internally.  So you can consider dropping slice from terminology at this point.

Line:68, secondary/docs/design/markdown/terminology.md -> A timestamp is the same as a vector clock, with each clock (integer) represents an internal event counter per vbucket.    A strict point-in-time timestamp is not possible in a distributed system without synchronized clock or global synchronization.   Note that a timestamp depends on the observer that sees those vbucket events.   In your description, you are describing a timestamp from the perspective of the indexer.  But a timestamp can be generated by the events observed by the client, or the timestamp can be generated by observing the latest events from KV nodes.   In both cases, the timestamp can provide approximation of point-in-time query and RYOW.

Line:76, secondary/docs/design/markdown/terminology.md -> HW timestamp represents all the latest vbucket events observed by an indexer node.    A particular UPR mutation may only be sent to a subset of index nodes.   Therefore, each node may have a different HW timestamp, since each observe a different set of vbucket events.   A SYNC message can be sent from the projector to all indexer nodes to force their vector clock to be updated/synchronized for specific vbuckets.

Line:83, secondary/docs/design/markdown/terminology.md -> kv-cluster goes through unexpected data loss.

Line:105, secondary/docs/design/markdown/terminology.md -> I would say it is just in memory collection of mutations.   We may implement it as b-tree.

Line:112, secondary/docs/design/markdown/terminology.md -> A bit confusing.  Can you rephrase?

Line:115, secondary/docs/design/markdown/terminology.md -> The snapshot does not have to be the tip of the storage, does it?

-------------------------------------
author: Leonel Abbott
date: 2014-03-10 09:16:22.647000000

Patch Set 1:

(8 comments)

Line:51, secondary/docs/design/markdown/terminology.md -> Done

Line:62, secondary/docs/design/markdown/terminology.md -> Done

Line:68, secondary/docs/design/markdown/terminology.md -> Done

Line:76, secondary/docs/design/markdown/terminology.md -> Done

Line:83, secondary/docs/design/markdown/terminology.md -> Done

Line:105, secondary/docs/design/markdown/terminology.md -> Done

Line:112, secondary/docs/design/markdown/terminology.md -> Done

Line:115, secondary/docs/design/markdown/terminology.md -> Yes the snapshot does not have to be the tip of the storage. Just that it is flushed into the algorithm and may be present in-memory. Even if it is flushed into disk, it may not become an on disk snapshot.  Please suggest if there is a better way to re-phrase it.

-------------------------------------
