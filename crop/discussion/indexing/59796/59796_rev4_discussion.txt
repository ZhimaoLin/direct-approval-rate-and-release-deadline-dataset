DESCRIPTION

MB-100 ArrayIndexing - Support for duplicate array entries

- Support for indexing duplicate array elements
- Duplicate support is not enabled when DISTINCT keyword is used
- Encoding scheme has changed to include optional count in key

Change-Id: I3972b74ec2e921079f3d644674c46e96ecbd0b0a


COMMENTS

author: Alden Ashley
date: 2016-02-11 19:04:14.409000000

Uploaded patch set 4.

-------------------------------------
author: Alden Ashley
date: 2016-02-11 19:07:48.196000000

Patch Set 4:

(1 comment)

Line:51, secondary/indexer/memdb_slice_impl.go -> It is: 0111111 11111111
Typo in comment. Will be fixed in next iteration

-------------------------------------
author: Kinsley Fox
date: 2016-02-11 20:04:08.788000000

Patch Set 4:

(8 comments)

Line:53, secondary/indexer/memdb_slice_impl.go -> These masks can be defined as a const variable extraMask or something.

Line:55, secondary/indexer/memdb_slice_impl.go -> In my opinion, it would looks cleaner if you just use a 2byte hasCountMask and define a const.

Line:388, secondary/indexer/memdb_slice_impl.go -> Would prefer to avoid garbage generation by this function.

Line:91, secondary/indexer/array.go -> I think it is not really required to duplicate items and generate garbage to do de-duplication. In my past refactor, i have made all the memdb array indexing path to reuse buffers and generate no garbage. This would break that.

Line:95, secondary/indexer/array.go -> Do we need to check this ?
If DISTINCT clause is used, n1ql makes sure that duplicates are not present right ?

If we always assume that duplicates can be present, is that an issue?
If count=1, we just dont add optional count field of 2 bytes. It will avoid need for separate handling right ?

Line:101, secondary/indexer/array.go -> In my opinion this function is not required. ArrayIndexItems function can return one more array called counts (count for each entry).

NewSecondaryIndexEntry() method can be added with one more arg count.
During index inser,

you just need to iterate through itms, counts := ArrayIndexItems() and encode as NewSecondaryIndexEntry(itm,count)

Line:109, secondary/indexer/index_entry.go -> It would be good to indicate 1 bit

Line:387, secondary/indexer/index_entry.go -> This can be merged with NewSecondaryIndexEntry by adding a count arg. Would avoid code duplication.

-------------------------------------
author: Kinsley Fox
date: 2016-02-11 20:09:17.608000000

Patch Set 4:

(2 comments)

Line:167, secondary/indexer/index_entry.go -> better to use hex of 128 (0x80) - more readable. Even better use a const mask and use it everywhere.

Line:187, secondary/indexer/index_entry.go -> == true is not required (idiomatic)

-------------------------------------
author: Kinsley Fox
date: 2016-02-11 20:14:52.859000000

Patch Set 4:

(1 comment)

Line:169, secondary/indexer/index_entry.go -> no explicit if else required.

return rbuf[offset] & 0x80) == 128

-------------------------------------
author: Alden Ashley
date: 2016-02-12 00:57:42.829000000

Patch Set 4:

(5 comments)

Line:55, secondary/indexer/memdb_slice_impl.go -> Sure Sarath. I will do that.

Line:95, secondary/indexer/array.go -> DISTINCT is to be handled by indexer and not N1QL. We should have dup or no dup behaviour handled at indexer side

Line:167, secondary/indexer/index_entry.go -> Sure will do

Line:169, secondary/indexer/index_entry.go -> Sure will do

Line:187, secondary/indexer/index_entry.go -> Okay. Will remove

-------------------------------------
author: Kinsley Fox
date: 2016-02-12 03:15:14.327000000

Patch Set 4:

(1 comment)

Line:95, secondary/indexer/array.go -> If that is the case, I think distinct can be handled just before returning from ArrayIndexItems. So that it will not need any duplication and garbage gen.

-------------------------------------
author: Justice Schneider
date: 2016-02-12 19:21:43.050000000

Patch Set 4:

Please add a CBIDXT with some information about the feature and please use that in the commit message. This is too big for MB-100 :)

-------------------------------------
author: Justice Schneider
date: 2016-02-12 19:26:51.680000000

Patch Set 4:

(1 comment)

Line:109, secondary/indexer/index_entry.go -> Is it optional really? Or is it mandatory absent for non array indexes, and mandatory present for array indexes?

-------------------------------------
author: Kinsley Fox
date: 2016-02-13 02:13:14.097000000

Patch Set 4:

(1 comment)

Line:109, secondary/indexer/index_entry.go -> Its an optimization. If the count is 1 (default no array or even array index), we do not need to pay the cost of additional 2 bytes for count encoding.

-------------------------------------
author: Alden Ashley
date: 2016-02-15 11:18:25.311000000

Patch Set 4:

(6 comments)

@Siri, Updating the commit msg with a bug I created for this MB-18122 .

@Sarath - All changes suggested are being taken care in upcoming patch

Line:95, secondary/indexer/array.go -> Cool!! Will do.

Line:109, secondary/indexer/index_entry.go -> Done

Line:167, secondary/indexer/index_entry.go -> Done

Line:169, secondary/indexer/index_entry.go -> Done

Line:187, secondary/indexer/index_entry.go -> Done

Line:387, secondary/indexer/index_entry.go -> Done

-------------------------------------
author: Tate Garrett
date: 2016-02-16 17:41:38.715000000

Change has been successfully merged into the git repository.

-------------------------------------
