DESCRIPTION

CBIDXT-29 Concurrent MutationQueue Implementation

MutationQueue is a concurrent multi-queue with internal queue per vbucket
for storing mutation references. MutationQueue internally uses mutex locks
per vbucket queue. Multiple Reader/Writer threads can access the queue concurrently.

Change-Id: Id29fc2f9cf583989c4cf762b9f99e527ae6b4c1b


COMMENTS

author: Dominique Stanton
date: 2014-04-22 20:51:33.928000000

Patch Set 4:

(2 comments)

Line:43, secondary/indexer/mutation_queue.go -> numVbuckets not initialized.

Line:110, secondary/indexer/mutation_queue.go -> Can anyone in this function panic so it won't call unlock()?

-------------------------------------
author: Maliyah Fischer
date: 2014-04-23 06:20:40.987000000

Patch Set 4:

(2 comments)

Line:43, secondary/indexer/mutation_queue.go -> yes, I'll add that.

Line:110, secondary/indexer/mutation_queue.go -> The only possibility I see is when writing to channel "datach <- m" and if that channel is closed. But as this library is creator/owner of the channel(and the only one closing this channel), I don't think it should happen.

-------------------------------------
author: Dominique Stanton
date: 2014-04-23 16:21:21.468000000

Patch Set 4:

(1 comment)

Line:110, secondary/indexer/mutation_queue.go -> Right.  Will just putting a defer statement for unlock works as well?  Just to be safe.

-------------------------------------
author: Maliyah Fischer
date: 2014-04-25 16:19:54.044000000

Patch Set 4:

(1 comment)

Line:110, secondary/indexer/mutation_queue.go -> changed unlock to defer in the next patchset

-------------------------------------
