DESCRIPTION

collatejson: Use a string encoder that doesn't require heap alloc

json.Marshal() was used to encode strings during collatejson.Decode().
It internally allocates memory in heap causing gc to slowdown system
performance.

Copied and modified golang json.Marshal string encoder and added a []byte
sync.Pool of size 1kb temporary buffer.

Change-Id: Icc023440ba41f87e59eaa60fe43ab8a520d13b8c


COMMENTS

author: Kinsley Fox
date: 2015-04-02 10:12:30.074000000

Uploaded patch set 1.

-------------------------------------
author: Leonel Abbott
date: 2015-04-02 11:20:49.985000000

Patch Set 1:

The following was my original reasoning for using json.Marshal()

BenchmarkString  5000000   533 ns/op   202 B/op     3 allocs/op

Above was the cost of encoding a 10 byte typical string Vs copying encoding/json and maintaining it along the way.

I may not upvote this but that does not mean I don't like this implementation.

Thanks,

-------------------------------------
author: Leonel Abbott
date: 2015-04-09 13:08:43.396000000

Patch Set 1: Code-Review+1

Upvoting it, but I would like to see the difference in system-level performance before and after this merge. either with memdb or forestdb but over the network.

Thanks,

-------------------------------------
author: Kinsley Fox
date: 2015-04-09 15:55:39.132000000

Patch Set 1:

I did this patch due to observation from my cpu profiling. which runs a pipeline that writes to network with tcp client running locally.

Before this changes:

< 1M rows/sec

After:

3.3M rows/sec

-------------------------------------
author: Tate Garrett
date: 2015-04-19 11:20:52.259000000

Change has been successfully merged into the git repository.

-------------------------------------
