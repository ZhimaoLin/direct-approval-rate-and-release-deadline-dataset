DESCRIPTION

A document describing invariants in the system.

rules of index partitioning is updated

Change-Id: Ife53bdad49628a6ea148a0801d7780db6971848f


COMMENTS

author: Leonel Abbott
date: 2014-03-24 09:53:39.143000000

Uploaded patch set 3.

-------------------------------------
author: Dominique Stanton
date: 2014-03-24 17:20:08.188000000

Patch Set 3:

(8 comments)

Line:3, secondary/docs/design/markdown/invariant.md -> what consitutes  "the system"?

Line:4, secondary/docs/design/markdown/invariant.md -> unless there is failover.

Line:6, secondary/docs/design/markdown/invariant.md -> The statement is true, but it is not clear.  For new index, the data will be snapshot'ed along with existing index, but the new index will be behind the seqNo (of the stable timestamp).  In another words, it is not very meaningful to say the tip of the indexer node is at a stable timestamp.

Line:7, secondary/docs/design/markdown/invariant.md -> The application should have option when the run query.  For latency sensitive query, the application may want to bypass the timestamp if they want.  This is true especially when a partition key is provided.

Line:9, secondary/docs/design/markdown/invariant.md -> Need to be a bit more specific if you want to put it as an invariant.  Even so, I am not sure if this is true.  Can the same KV mutation (e.g. seqNo 2000) being pulled from both mutation queue and catch-up queue?  It is potentially possible

Line:10, secondary/docs/design/markdown/invariant.md -> This is not clear.  Why is this an invariant?   I could change this "statement" in future design.  No?

Line:13, secondary/docs/design/markdown/invariant.md -> This looks more like design decision than "invariants".    Design Decisions can change over time (release to release), but invariants can't (e.g. mutations must be ordered sequentially).  If invariants change, the system will need to be re-architect.   If design decisions change, only a piece of the system is affected.

Line:33, secondary/docs/design/markdown/invariant.md -> Clarify the meaning "identical".   Let's say the user creates an index, and it wants to create a range between 'A-F'.    So logically, a index is "partitioned" based on its range.  But each index replica should have flexibility in terms of how to map the "logical partition (range)" into a "physical partitions" based on resource availability and redundancy requirement.

-------------------------------------
author: Leonel Abbott
date: 2014-03-25 06:09:58.009000000

Patch Set 4: Patch Set 3 was rebased

-------------------------------------
author: Leonel Abbott
date: 2014-03-26 05:53:49.237000000

Patch Set 3:

(7 comments)

Line:3, secondary/docs/design/markdown/invariant.md -> Done

Line:4, secondary/docs/design/markdown/invariant.md -> Done

Line:6, secondary/docs/design/markdown/invariant.md -> Yes. Will keep it for now, since local indexer node shall never flush inbetween stable timestamps.

Line:7, secondary/docs/design/markdown/invariant.md -> Done

Line:9, secondary/docs/design/markdown/invariant.md -> Done

Line:10, secondary/docs/design/markdown/invariant.md -> Done

Line:13, secondary/docs/design/markdown/invariant.md -> Done

-------------------------------------
