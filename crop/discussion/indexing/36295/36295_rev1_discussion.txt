DESCRIPTION

CBIDXT-53 Initial Implementation of SlabManager

Slab Manager provides a wrapper around go-slab library to allow concurrent access and
memory accounting(e.g. limit the max memory of Arena etc).

Change-Id: I15a637e9876e94d757272f39fe7ec4434390f381


COMMENTS

author: Maliyah Fischer
date: 2014-04-25 15:38:51.861000000

Uploaded patch set 1.

-------------------------------------
author: Dominique Stanton
date: 2014-04-25 18:03:38.857000000

Patch Set 1:

(3 comments)

The implementation looks good but I worry about the memory efficient (goslab) and concurrency overhead.   It will serve its purpose if each allocated buf is about the same size and each component uses its own slabManager (but this can reduce the overall effectiveness as well).

Line:113, secondary/indexer/slab_manager.go -> The better way is really to add concurrency support in slab manager itself.   I worry about this lock is too coarse grain -- unless you plan to have many SlabManager.  For example, one for the MutationManager.  Can still be a problem with query.

Line:124, secondary/indexer/slab_manager.go -> It looks like go-slab allocates its internal heap based on different slabClass.  It finds the slabClass from the bufSize, and return a chunk from that slabClass only.  The code does not seem to allow stealing from another slabClass if the slabClass is inbalance, or free up memory if a particular slabClass free list grows too long.  In other words, the slab manager may have memory but it still cannot return a chunk.

Line:215, secondary/indexer/slab_manager.go -> Would using atomic variable be more efficient for inc/dec memory allocation counter?

-------------------------------------
author: Dominique Stanton
date: 2014-04-25 18:03:53.421000000

Patch Set 1: Code-Review+1

-------------------------------------
author: Maliyah Fischer
date: 2014-04-28 14:45:05.152000000

Patch Set 1:

(3 comments)

I agree with your concerns John. I am already following "each component uses its own slabManager" strategy but not sure about overall effectiveness at this point.

Line:113, secondary/indexer/slab_manager.go -> Yes, right. I intend to use multiple slab managers i.e. one per mutation queue and a separate one for query. This will help reduce lock contention and when the mutation queue is not required, the memory can be returned back to GC. Also to avoid contention, I plan for mutation manager to pre-allocate some memory from slab manager and keep backfilling it in background. But I agree that if these things don't help, will have to move this locking stuff to the slab itself.

Line:124, secondary/indexer/slab_manager.go -> Yes this really is an area of concern. Though I am guessing for a single index a couple of slabClasses should be sufficient but across indexes if it varies widely, the effectiveness will reduce. slab has a chaining facility to address this which can be used to mitigate this.

Line:215, secondary/indexer/slab_manager.go -> I expect this method to be called infrequently. So just kept it simple for now. Will change to atomic if the components using the slab manager want to call this often.

-------------------------------------
author: Leonel Abbott
date: 2014-04-30 08:37:59.481000000

Patch Set 1: Code-Review+1

-------------------------------------
author: Maliyah Fischer
date: 2014-04-30 09:53:22.297000000

Patch Set 1: Verified+1 Code-Review+2

-------------------------------------
author: Tate Garrett
date: 2014-04-30 09:53:22.985000000

The change could not be merged due to a path conflict.

Please rebase the change locally and upload the rebased commit for review.

-------------------------------------
